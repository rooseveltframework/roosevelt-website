window.siteTexts = []
window.siteTexts.push({file: "index.html", title: "Roosevelt web framework", text: "The easiest web frameworkto learn and build apps withRoosevelt is a web framework for Node.js based on Express that aims to reduce the complexity of your code as much as possible.Named for Teddy Roosevelt, the \"trust buster\" who curtailed the abuses of monopolists, the Roosevelt framework curtails the abuses of the merchants of complexity by trust busting (so to speak) all the unnecessary layers of abstractions and other needless complexities common to other web frameworks. Plus Teddy Roosevelt has a curly brace for a mustache.Learn moreGet started"})
window.siteTexts.push({file: "contributors/index.html", title: "contributors", text: "Roosevelt was originally created by Eric Newport in 2013 and has since evolved into a large family of interrelated projects that is the collective work of dozens of direct contributors:And is also the work of countless indirect contributors who built or contributed code to the dependencies leveraged by the Roosevelt framework project family.The current maintainers of Roosevelt are Eric Newport and Troy Coutu.The Roosevelt text logo and parts of this website were designed by Kayleigh East.Support Roosevelt's developmentIf you would like to support Roosevelt's ongoing development and maintenance, you can do so in the following ways:SponsorshipRoosevelt's development is primarily sponsored by Otherworldly Media.If you or your organization would like to also sponsor Roosevelt, please contact us with your offer of sponsorship and how you would like us to publicly credit you.Buy merchYou can support Roosevelt's development and maintenance by buying merch from Otherworldly Media's Curly Braces Merch shop.DonateYou can also donate to Otherworldly Media directly to support Roosevelt's development and maintenance. Please note that donations are not tax-deductible.Thank you for your support!"})
window.siteTexts.push({file: "design-philosophy/index.html", title: "design philosophy", text: "TAFT HAVE YOU HEARD OF THIS WEB FRAMEWORK BUSINESSyes, sirTHEY’RE RIDDLED WITH NEEDLESS COMPLEXITYyes, sirTHAT ISN’T SPORTING AT ALLno, sirBRING ME THE WEB FRAMEWORKSI’M GOING TO PUNCH THEM MANFULLY IN THE FACEsir, web frameworks are software, not a personyou can’t punch a web framework in the faceOH CAN’T ITAFT, WATCH ME BECOME THE FIRST MAN TO PUNCH A WEB FRAMEWORK IN THE FACETHEN WRITE IT DOWNIN YOUR OFFICIAL WHITE HOUSE NOTES“TODAY THE PRESIDENT PUNCHED A WEB FRAMEWORK IN THE FACE”all right“QUITE SOUNDLY TOO”I will“WITH AN EXCELLENT RIGHT UPPER CROSS”yes, sir“CAN’T PUNCH A WEB FRAMEWORK IN THE FACE”FORSOOTHI’M THE PRESIDENTI CAN PUNCH ANYTHINGApologies to Daniel Mallory OrtbergRoosevelt is a web framework based on Express that aims to be the easiest web framework on the Node.js stack to learn and use. Suitable for building multi-page apps, static sites, or single page apps, Roosevelt is a batteries-included framework with minimal boilerplate.The primary design goal of Roosevelt is to reduce the complexity of your code as much as possible. Teddy Roosevelt — referred to by Cracked magazine as the \"the most badass President of all-time\" — curtailed the abuse of monopolists, so there's no way he would ever put up with all the indecipherable layers of abstractions and other needless complexities common to other web frameworks. If Teddy were around today, he would punch over-engineered frameworks quite soundly in the face, just as he did with trusts.So why not just use vanilla Express then?You could! Express is wonderful. But fine-tuning the Express framework for developing serious web apps is a lot of work because it adopts a very minimalist philosophy in its defaults. If you build a vanilla Express web app yourself, you will need to manually include and configure a lot of additional modules to handle very basic things such as handling POST request bodies, file uploads, logging, security hardening, template parsing, CSS/JS preprocessing and bundling, etc. Roosevelt wires up these features for you, sets sane defaults, and more.Roosevelt is a low jargon, minimal abstractions frameworkThe best libraries and frameworks exist solely to extend and improve existing tools rather than overturn them with complete replacement abstractions. As such, Roosevelt does not replace Express or hide its functionality and features behind an opaque interface like other frameworks that sit in front of Express do. When you use Roosevelt, it simply configures Express for you, adds some features, and then returns an Express app to you to do as you like with. In this way, Roosevelt is merely a progressive enhancement of Express.Roosevelt enhances Express withA simple, configurable default MVC directory structure.Teddy HTML templates by default which are much easier to read and maintain than common alternatives. Can be configured to use any templating system that supports Express, or even PHP.Sass CSS preprocessing by default with support for Less and Stylus too. Minification via clean-css. Other CSS preprocessors can be used as well with a bit of extra configuration.Webpack fully integrated providing an easy to use interface for bundling and minifying your frontend JS. Other JS bundlers can be used as well with a bit of extra configuration.Automatic progressively enhancement of supported web components in your code with fallback markup that will work if JavaScript is disabled which will then be replaced with the desired web component when the JavaScript loads. Powered by progressively-enhance-web-components.Session support via express-session using SQLite as the default session data store and CSRF protection enabled by default.Automatic code-reloading in development mode via nodemon for server-side changes and express-browser-reload for frontend changes.Automatic HTML validation in development mode for your post-server-rendered HTML powered by express-html-validator.Roosevelt is a progressive enhancement-first frameworkAs mentioned briefly above, a core principle behind the design of the Roosevelt framework is promoting progressive enhancement as a best practice in building web applications. We believe progressive enhancement is the best approach not just in regards to how Roosevelt enhances Express, but also with your frontend code as well. This means most web applications should be multi-page apps, not single page apps. It also means with few exceptions you should always focus on writing HTML first, enhance it with CSS as-needed, and enhance your HTML and CSS with JS only as-needed. Avoid JS-first architectures.Why progressive enhancement is a best practice on the frontendThe web platform was designed with three languages (HTML, CSS, and JS) intentionally: to separate concerns and to allow a subset of functionality to be guaranteed to work even if the user's browser or internet connection can't execute the full intended experience. This is distinct from the all-or-nothing approach that native apps take and is the web's greatest superpower.To fully understand this, let's consider a couple of analogies:HTML, CSS, and JS are kind of like a peanut M&MHTML is the peanut: Consumable entirely on its own regardless of whether any CSS (chocolate coating) or JS (candy coating) enhancements are added on top of it.CSS is the chocolate coating: Chocolate makes the peanut better, but you can eat the peanut without it.JS is the candy coating: The candy coating is the best way to experience a peanut M&M, but if the candy coating is missing it's still good without it.Build escalators, not elevatorsAnother analogy that helps us understand progressive enhancement is thinking about the three web languages as helping us build escalators instead of elevators. When you build a JS-first web app that can't function without JS, then you're building an elevator. If the elevator fails, then it's useless. But if you build an escalator instead, then when your escalator fails, it becomes stairs. And handling the non-JS scenario is often much more important than it may seem.Accordingly, Roosevelt's recommended best practice for building single page apps involves using Roosevelt's built-in support for Single Page Express, which allows you to build single page apps using the Express API. You can use other SPA frameworks if you like instead, but you should consider Single Page Express because it will allow you to write isomorphic (aka universal, amphibious, etc) controller and view code that can be shared verbatim on the client and the server in your app for maximum code reuse on the client and server. That means you can server-render every page in your SPA and even support the non-JS scenario with very little extra work, unlike most other SPA architectures.We prioritize \"good\" when deciding between \"fast, good, or cheap\" and so should youIt's often said that when presented with the options of \"fast, good, or cheap,\" you need to \"pick two\" — a demonstration of the classic project management triangle. But perhaps somewhat counter-intuitively, it's often best to prioritize \"good\" over \"fast\" or \"cheap\" whenever you can. This is because if you cut corners while developing your product to save time or money, you're often creating a technical debt situation that will cost you as much or more time and money later.As such, the only acceptable times to lower the priority of \"good\" in the pursuit of \"fast\" or \"cheap\" is when you're certain the work you're doing is truly a throwaway one-off and won't need to be maintained by anybody, or when the urgency of the situation is so high that you're willing to pay off the technical debt burden later.Likewise, just as picking \"fast\" or \"cheap\" over \"good\" can result in you getting none of those things in the long run, prioritizing \"good\" first can make it possible for you to achieve all three at the same time: \"good,\" \"fast,\" and \"cheap\" without sacrificing any of them. Achieving that software development nirvana is obviously everyone's dream, and too few ever achieve it. So how can it be done? The answer is by becoming excellent at your craft. The better you are at what you do, the faster you'll work and the less funding you'll need to get things done.Reducing complexity as much as possible is a core component of excellent craftsmanshipIf you want to get to the point in your software development journey where you can check all three boxes in the \"good,\" \"fast,\" or \"cheap\" project management triangle, you need to use tools that strip away as much needless complexity as possible so you can focus on getting work done quickly without compromising the quality of your work. This can be difficult though because the software development ecosystem is filled with merchants of complexity — people who have a vested interest in selling you on solutions that increase complexity, either because they directly profit by it or because they have some ideological attachment to a specific way of doing things that isn't based in good evidence.The merchants of complexity are everywhere and it can be difficult to steer clear of them. They will try to convince you that the way you're doing things is unprofessional unless you adopt their preferred, often over-engineered architecture preferences. Don't listen to them. Use the most minimally viable tool at your disposal unless and until you encounter hard evidence that something more is needed. That is the best way to avoid technical debt and get high quality work done quickly.The Roosevelt framework team endeavors to not become merchants of complexity ourselves by embracing humility and self-awarenessThe most insidious thing about the \"merchants of complexity\" phenomenon is it seems clear the majority of people who are shilling for over-engineered solutions aren't doing it with nefarious intent. They're true believers who really do think the complexity they're selling isn't needless. We recognize that as authors of our own series of libraries and frameworks, we could potentially have our own blind spots in this regard. What if the tools we're promoting are over-engineered too? It wouldn't be the first time an author of a framework promoted it with complexity-reducing branding only to deliver a solution that is also needlessly complicated. It happens all the time.We think the best way to avoid falling into that trap is to state our core principles clearly and live by our values. We believe reducing complexity as much as possible empowers people get the best possible work done and we live by our values by remaining constantly vigilant about our own blind spots. We encourage evidence-based discussion and debate about ways to improve our tools either by simplifying them further, or embracing needed complexity that we incorrectly regarded as needless, and we commit to going wherever the evidence leads because we are scouts, not soldiers.Strong opinions, loosely held, expressed as codeBecause we recognize that aspects of our design philosophy could be wrong, and we respect people's desires to do what they like regardless of what the evidence says is the best approach, our work is designed to be as flexible as possible. We are less interested in selling you on an ideology and more interested in building tools that you find genuinely useful regardless of how much you agree with us about our design philosophy. Even if you reject a large amount of the recommendations in our design philosophy, much of our work could still be useful to you when assembling your own stack any way you like, if you have that need or desire. Accordingly, below is a list of modules that were built and are maintained by the Roosevelt framework team, but can be used independently of Roosevelt as well.Independent projects in the Roosevelt project familycheck-if-CSS-is-disabled: Frontend JavaScript module that can determine if CSS is disabled or if it failed to load, then take action to stop JS enhancements from applying if the CSS isn't working first.crossplatform-killport: Command line program to kill the process running on a given port in any operating system.express-browser-reload: Refresh your browser when your Express server restarts.express-html-validator: Automatic HTML validation middleware for Express applications.fallback-dependencies: Add git repo dependencies to your Node.js app from a cascading list of fallback locations.minify-html-attributes: Obfuscates your HTML attribute class names, IDs, and data-* attributes in a coordinated fashion across your HTML, CSS, and JS files.multi-db: A thin abstraction around selected Node.js database drivers to normalize their APIs to one simplified common API. This makes it possible to write a Node.js app that supports multiple databases by configuration with minimal additional boilerplate needed per additional database.node-php-runner: Allows you to run PHP code in Node.js in various ways.progressively-enhance-web-components: Template file preprocessor for progressively enhancing web components in Node.js.roosevelt-logger: Intuitive, attractive logger for Node.js applications based on Winston.semantic-forms: A pattern library of forms based on semantic HTML enhanced with a modern UX.single-page-express: A client-side implementation of the Express route API.source-configs: Allows you to declaratively define a hierarchy of configuration values for your app from command line arguments, environment variables, or defaults based on a JSON schema you define within your app.teddy: Teddy is the most readable and easy to learn templating language there is!"})
window.siteTexts.push({file: "docs/check-if-CSS-is-disabled/latest/index.html", title: "Check if CSS is disabled (latest)", text: "☂️ check-if-css-is-disabled Frontend JavaScript module that can determine if CSS is disabled or if it failed to load, then take action to stop JS enhancements from applying if the CSS isn't working first.If your CSS fails to load but your JS does load, that can lead to mangled-looking user interfaces. But if you build your website using a progressive enhancement technique, this module will also let you do graceful degradation elegantly by making it easy for you to revert to the non-CSS and non-JS experience if your CSS fails but your JS doesn't.As such, if no CSS or JS loads but you built your site using semantic HTML, it should still look reasonably good with the default styles applied and function reasonably well so long as no JS is mucking with the DOM.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/crossplatform-killport/latest/index.html", title: "Crossplatform killport (latest)", text: "💀 crossplatform-killport Command line program to kill the process running on a given port in any operating system.Unlike many of the other programs out there that do this, this one works in Windows, Linux, and Mac, it is very easily installed in any OS using npm because it is written in Node.js, and it is actively maintained by a team of people rather than being just some guy's project from several years ago that may or may not work."})
window.siteTexts.push({file: "docs/express-browser-reload/latest/index.html", title: "Express browser reloader (latest)", text: "✨ express-browser-reload Node.js module to refresh your browser when your Express server restarts. Works by using a WebSocket to the server and waits for the WebSocket to close to detect the server restarting. Once the server comes back up, the page will be reloaded.This project is a hard fork of reload, which is a more generalized tool with more features beyond the Express world. This fork is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/express-html-validator/latest/index.html", title: "Express HTML validator (latest)", text: "✅ express-html-validator A middleware for the Express framework that automatically validates the HTML on all your Express routes, powered by html-validate.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/fallback-dependencies/latest/index.html", title: "Fallback dependencies (latest)", text: "📦 fallback-dependencies A Node.js module that allows you to add git repo dependencies to your Node.js app from a cascading list of fallback locations.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well.Why?You might be wondering: why not use a private npm registry, let npm clone git repos directly, or use some other package manager?Here are some reasons why you might need fallback-dependencies for certain types of apps:Private npm registries can be difficult to set up and maintain. But private git repos are easy to setup and maintain.Installing dependencies of an app that uses a private npm registry adds extra steps to your build process which can be fussy for your app's users to configure correctly.There is no straightforward way to use npm to consume private packages from multiple fallback locations if the primary URL goes down or you want to limit access to some domains to some users of your app.There is no way to install git repos via npm if the repo in question does not have a package.json, but with fallback-dependencies, you can.If you consume git repos directly with npm, it will deposit those repos into the node_modules folder which could result in naming collisions or just make those repos feel excessively buried if you want more convenient access to the private repos' files. The node_modules folder is also an inappropriate place to deposit dependencies that aren't Node.js modules, which as noted above are possible to fetch with fallback-dependencies. With fallback-dependencies, you can decide where to deposit them.Simplifying the developer experience is the main goal here. With fallback-dependencies, all a user of your app has to do is:Have an account in good standing with at least one of the fallback URLs for each fallback-dependency in the app's dependency list.Clone your app.npm ci.That's it. The app will start now. All the alternative approaches add additional complex steps to the build process that make the developer experience more cumbersome.So if you want to minimize the number of steps that need to be followed to install private dependencies in your Node.js app, then you might want to consider using fallback-dependencies.CaveatsThe fallback-dependencies module is not a standard endorsed by or maintained by the Node.js or npm teams. You're relying on the maintainers of this project to ensure that it keeps working. You can of course just fork this project if you want to do it some other way as well though.You may need to set up git to authenticate against the URL(s) you're cloning from, which can present a similar degree of cumbersomeness to fetching these dependencies from a private npm registry or similar. We think in most cases git authentication is less annoying than the other methods though, particularly if you've already needed to do this authentication to clone the main project.Your build process will likely be slower because it will need to build at least two separate dependency trees.Doing it this way will likely increase your total disk space usage for dependencies since you will likely have multiple copies of the same dependency in the separate dependency trees, particularly if you pile up a lot of fallback-dependencies.Using this technique instead of setting up something like a private npm registry might make you feel less cool because this approach is more straightforward, more flexible, less over-engineered, and a lot of us programmers are addicted to needless complexity. If you want a super complicated build process to make you feel smart, this module won't help you with that."})
window.siteTexts.push({file: "docs/latest/changelog/index.html", title: "changelog (latest)", text: "0.31.4Fixed a bug in the CSRF handler.Updated dependencies.0.31.3Added warning to the debug markup on 403 \"forbidden\" POST error pages instructing the user to include the CSRF token in their request.Fixed a bug that could cause undefined to print on error pages in certain circumstances.Updated dependencies.0.31.2Fixed bug that caused cookie parser to not load under certain circumstances.Updated dependencies.0.31.1Changed expressSession default to true so that csrfProtection's default being true will actually function.Updated dependencies.0.31.0Breaking: npm run generate-csrf-secret script removed, as it is no longer necessary due to an internal switch of Roosevelt's CSRF dependency from csrf-csrf to csrf-sync. You should delete any csrfSecret.json files in your secrets directory after upgrading Roosevelt, as the file is no longer needed. You should also remove the npm run generate-csrf-secret from your package.json.Added expressVersion param which lets you decide which version of Express to use. Choose between either 4 or 5. This option exists because there are significant differences between Express 4 and Express 5. Default: 5.Added glob pattern support to CSRF route exemption param.Removed enableCLIFlags param which has been obsolete for some time and didn't actually do anything.Changed the deprecation checker to only run in development mode and added a new param deprecationChecks that will let you disable it entirely.Updated dependencies.0.30.7Added new onBeforeControllers event.Added new html.folderPerPage param.Made it easier to debug HTML validation errors on static sites.Fixed bugs associated with the stopServer() method.Fixed bugs associated with using a roosevelt.config.json file in your app.Fixed a bug that could cause middleware errors not to flow through the middleware stack correctly.Copyedited documentation significantly.Updated dependencies.0.30.6Added onBeforeStatics event.Altered makeBuildArtifacts log to be a warning.Fixed writing JS file log to be properly classified as info instead of log.Fixed a bug that could cause the static site generator to not write new files even if the file has changed.Updated dependencies.0.30.5Added error handling for if you supply Roosevelt constructor params to initServer or startServer.Fixed bugs that could cause initServer, startServer, and stopServer to not be properly awaitable.Fixed bug that would cause undefined to print on error pages in Roosevelt apps without a package.json version defined.Updated dependencies.0.30.4Fixed bugs that prevented CSS source maps from working correctly.Updated dependencies.0.30.3Fixed model overriding precedent in static site generator.0.30.2Fixed a crash associated with the default catch-all route.0.30.1Fixed a bug that caused two catch-all routes to appear in the router stack.Updated dependencies.0.30.0Breaking: Upgraded to Express 5.x.To migrate:Most Roosevelt apps probably only need to change * routes to *all.Apps that use more complex routing may need other changes.Full list of considerations for migrating to Express 5: https://expressjs.com/en/guide/migrating-5.htmlAdded expressSessionStore Express variable, which is the session store instance used by express-session module Roosevelt uses internally.Added support for catch-all * in static site generator model definitions.Updated dependencies.0.29.5Added new copy param that will copy files from a source location to a destination location.Added new feature to integrated webpack bundler to disable LICENSE.txt generation by default. This can be overridden by supplying your own optimization param to your webpack config.Improved docs.Updated dependencies.0.29.4Added first-line comment blocklist support to the static site generator.Added static site generator folder to the require module path.Added async/await support for static site models.Updated dependencies.0.29.3Fixed a bug that could cause some routes not to load.Fixed a bug that could cause more than one * route to end up in the router stack.Updated dependencies.0.29.2Fixed a bug that would cause MAKE_BUILD_ARTIFACTS to supersede the --build CLI flag.Fixed a bug that would cause an error to falsely print about not being able to create symlinks.Updated dependencies.0.29.1Fixed bugs associated with MAKE_BUILD_ARTIFACTS sometimes not working properly.Updated dependencies.0.29.0Breaking: Moved default output location for clientControllers and clientViews to the .build folder.To migrate your app, you will likely need to change js.webpack.bundles.config.resolve.modules to replace any entry that has \"${publicFolder}/js\" with \"${buildFolder}/js\".Breaking: Changed default of preprocessedViewsPath param from \".build/.preprocessed_views\" to \".build/preprocessed_views\" and changed default of preprocessedStaticsPath param from \".build/.preprocessed_statics\" to \".build/preprocessed_statics\".Added buildFolder param to customize the name of the .build folder.Altered output of controllersBundler and viewsBundler feature to produce files that are easier to read.Updated dependencies.0.28.1Fixed a bug where HTTPS certs wouldn't always automatically generate when they should.Updated various dependencies.0.28.0Breaking: Removed config auditor feature.Added more checks to the deprecation checker.Updated dependencies.0.27.0Breaking: Changed http/s param structure:Changed port param to http.port and changed the default to 43763.Changed https.port param default to 43711.Removed https.force param. Non-secure http can now be disabled via http.enable being set to false.Removed authInfoPath, passphrase, caCert, requestCert, and rejectUnauthorized params. Replaced them with options where you can pass any native option.The ca, cert, key, and pfx params can take file paths relative to your secretsDir in addition to everything else natively supported (strings, buffers, and arrays of strings or buffers).The file paths get resolved within arrays if you pass arrays to any of those as well.These collective changes mean most Roosevelt apps will need to alter their Roosevelt configs from something that looks like:\"port\": 19679, \"https\": {   \"enable\": true,   \"port\": 19679,   \"force\": true,   \"authInfoPath\": {     \"authCertAndKey\": {       \"cert\": \"cert.pem\",       \"key\": \"key.pem\"     }   } },To be something like this instead:\"http\": {   \"enable\": false }, \"https\": {   \"enable\": true,   \"port\": 19679,   \"options\": {     \"cert\": \"cert.pem\",     \"key\": \"key.pem\"   } },Breaking: Changed behavior of NODE_PORT environment variable to now set https port when https is enabled and fall back to http if https is disabled.Breaking: Moved the versioning of webpack from Roosevelt itself to the app. You will need to declare webpack as a dependency in your app if you intend to use the JS bundler feature in Roosevelt.Breaking: Changed js.webpack.bundles.env param to require values development or production instead of dev or prod.Breaking: Changed js.webpack.bundles.verbose param to js.verbose.Breaking: Changed --webpack, --wp, and --w CLI flags to --jsbundler, --jsb, and --j respectively.Breaking: Changed default of preprocessedViewsPath param from 'mvc/.preprocessed_views' to '.build/.preprocessed_views' and changed default of preprocessedStaticsPath param from '.preprocessed_statics' to '.build/.preprocessed_statics'. Collectively these changes mean most Roosevelt apps should remove .preprocessed_views and .preprocessed_statics from .gitignore and add .build instead.Added new param js.customBundler that will let you define a custom JS bundler.Added new param js[bundler].customBundlerFunction that will let you define custom behavior for default supported JS bundlers like Webpack.Updated dependencies.0.26.1Added new Express variable debugMarkup that contains HTML you can add to your custom error pages if you define any that will print server errors if any exist, display the route list, add some inline JavaScript that will serialize the request's err, req, and res objects so you can interactively examine them in the browser's developer tools. Only available in development mode.Added the aforementioned debug markup to the default error pages in development mode as well.Added routes Express variable which will list all routes in the app.Added new recognized environment variable: MAKE_BUILD_ARTIFACTS will allow you to set Roosevelt's makeBuildArtifacts config.Added new param minifyHtmlAttributes: Settings to pass to minify-html-attributes.Options:enable: Whether or not to enable minify-html-attributes.Default: [Boolean] false.Available options:'production': Enable only in production mode.'development': Enable in all modes.true: Will be taken to mean 'production'.minifyHtmlAttributesParams: Params to pass to minify-html-attributes.Default: [Object] {}Default: [Object]{   \"enable\": true,   \"minifyHtmlAttributesParams\": {} }Note: Roosevelt will always override 3 params from minify-html-attributes:htmlDir will always be set to Roosevelt's preprocessedViewsPath.cssDir will always be set to Roosevelt's preprocessedStaticsPath.jsDir will always be set to Roosevelt's preprocessedStaticsPath.Added new param preprocessedStaticsPath: Relative path on filesystem to where your preprocessed static files will be written to. Preprocessed static files are view files that have been preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled.Default: [String] \".preprocessed_statics\".This feature will only be active if minifyHtmlAttributes is enabled.Replaced isomorphicControllers param with clientControllers param and made it function similarly to clientViews.Fixed a bug with displaying app version on default error pages.Fixed a bug that could lead to a counter-intuitive error if your template rendered an empty response in dev mode.Updated various dependencies.0.26.0Breaking: Added new param preprocessedViewsPath: Relative path on filesystem to where your preprocessed view files will be written to. Preprocessed view files are view files that have had their uses of web components progressively enhanced using the progressively-enhance-web-components module.Default: [String] \"mvc/.preprocessed_views\".To disable this feature, set the value to false.This is breaking because if you leave it enabled by default (recommended), you will need to add .preprocessed_views to your .gitignore.Breaking: Switched to external source maps for the CSS preprocessor. This necessitated changing the custom CSS preprocessor API to require returning an object instead of a string.If you have written a custom CSS preprocessor, the new return value is:return {   css: 'write code to output css here',   sourceMap: 'write code to output source map here (optional)' }Added new param prodSourceMaps to allow source maps to be generated in prod mode for both CSS and JS.Added IP address to the output when the server starts.Added new CLI script secretsGenerator.js that allows you to combine certsGenerator.js, csrfSecretGenerator.js, and sessionSecretGenerator.js into one command.Added feature to override appDir and secretsPath for the CLI scripts using --appDir somewhere and --secretsPath somewhere CLI flags.Added exceptionRoutes option to the frontendReload param.Added a check for broken symlinks in the public folder, which will be purged if any exist.Added support for placing your Roosevelt config in a roosevelt.config.json file in addition to the previous options.Added better error when attempting to start a Roosevelt app on a file system that does not support symlinks.Changed source maps from inline to external.Fixed a bug that caused the JS bundler to not log when it was writing JS files.Fixed a bug that caused a statics/pages directory being created when it isn't needed.Fixed a bug that could cause the public folder and statics folder to be created even when makeBuildArtifacts is disabled.Fixed a bug that caused the views bundler and isomorphic controllers finder to write a new views bundle to disk even when it wasn't needed.Fixed frontendReload not working in Firefox with the default HTTPS config.Updated various dependencies.0.25.0Breaking: Supplying an allowlist to the views bundler will now implicitly disable exposeAll.Breaking: Renamed secretsDir param to secretsPath.Updated all file path express variables to include full absolute paths.Fixed various bugs in the views bundler feature.Fixed a rare bug where CSRF and session secrets could be written to the wrong directory.Fixed a bug where HTTPS certs could be automatically generated when they shouldn't be.Updated various dependencies.0.24.0Breaking: Altered startServer and initServer methods to now be async. They now need to be awaited to avoid possible race conditions.As a result, starting the app in a single line needs to be updated to await (require('roosevelt').startServer()).Callback arguments have been removed from these methods as well.Breaking: Removed app.get('routes'), onReqAfterRoute, onReqBeforeRoute, onReqStart, and onStaticAssetsGenerated.Breaking: Renamed app.httpServer to app.get('httpServer') and app.httpsServer to app.get('httpsServer').Breaking: Added enable param to clientViews. If your app uses the clientViews feature, you will need to add this param to continue using the feature.Added new method onBeforeMiddleware.Added start and stop method shorthands for startServer and stopServer respectively.Refactored various things under the hood to improve code quality, performance, and reduce unnecessary dependencies.Updated various dependencies.0.23.2Removed toobusy feature since it is temperamental and the dependency is no longer maintained.Refactored internal wildcardMatch to use minimatch under the hood.Replaced html-minifier with html-minifier-terser since html-minifier-terser is better-maintained.Updated various dependencies.0.23.1Added feature that scans the router stack to move the 404 route (the * route) to the end of the stack every time a new route is added, even if the route is added at runtime so that you can dynamically add routes while the app is running.Updated various dependencies.0.23.0Removed cores feature since it is largely redundant now thanks to the widespread popularity of tools like pm2. Also removed various deprecated cluster module support as well.Updated various dependencies.0.22.16Made it possible to disable helmet by setting the helmet param to false.Updated various dependencies.0.22.15Added option to exempt certain routes from CSRF protection.Updated various dependencies.0.22.14The JS bundler will now add mode: \"development\" and devtool: \"source-map\" automatically to your Webpack bundles in development mode.Updated various dependencies.0.22.13Altered helmet's defaults again. The form-action directive has been set to null. This makes it possible to submit forms to other domains in production mode.0.22.12Added 'unsafe-inline' option to helmet's Content-Security-Policy's script-src directive by default in Roosevelt. This will prevent inline scripts from being blocked in production mode.Updated various dependencies.0.22.11Added DISABLE_HTTPS environment variable which when set to true, the HTTPS server will be disabled and the app will revert to HTTP regardless of what is set in the rooseveltConfig.Updated various dependencies.0.22.10Enabled WAL in the SQLite instance used for session storage by default.Updated various dependencies.0.22.9Fixed an issue with cert generation from CLI scripts properly this time.0.22.8Fixed an issue with cert generation from CLI scripts.Updated various dependencies.0.22.7Added a max age to the default express-session configuration.Fixed an issue with cert generation in production mode.Updated various dependencies.0.22.6Fixed a bug that caused self-signed certs to get regenerated every time the app restarted.Updated various dependencies.0.22.5Certs generator will now run in production mode as well if https is enabled and if the files do not already exist. This behavior can be suppressed by setting https.autoCert to false.Fixed bug that prevented the static site generator feature from working in dev mode when the HTML validator was enabled.Fixed README formatting typos.Updated various dependencies.0.22.4Made it possible to set expressSession to true which will set a sane default config so you don't have to spell one out.0.22.3Updated default session store to use SQLite instead of an in-memory database so that sessions are not invalidated when the server restarts.Updated various dependencies.0.22.2Fixed a bug that caused self-signed certs to get regenerated every time the app restarted.Updated various dependencies.0.22.1Exposed the express-session middleware for use in Roosevelt apps.Updated various dependencies.0.22.0Breaking: Added a unified secrets directory for various app secrets such as HTTPS certs, session secret, CSRF secret, etc. The name of the directory is configurable, but when upgrading an app from the previous version, you may need to alter your rooseveltConfig to remove directories from your cert or key paths. You must now specify only a file name in those params.Added support for express-session for session support.Added CSRF protection.Improved dev sync script for developing Roosevelt significantly.Updated various dependencies.0.21.16Fixed an issue that could cause the server to start before all the controller routes were loaded.Updated various dependencies.0.21.15Updated various dependencies.0.21.14Updated various dependencies.0.21.13Certs will be auto-generated in dev mode now if they don't exist.Various dependencies updated.0.21.12Fixed isomorphic controllers bundler webpack bug in Windows.Various dependencies updated.0.21.11Added a new --build CLI flag that will instruct Roosevelt to just build the build artifacts but not start the server.Added new onStaticAssetsGenerated event that is fired when the server finishes init but before the server starts.Fixed an issue that would cause the server to start even when makeBuildArtifacts is set to staticsOnly. This has the side effect of causing serverStart() to revert to the behavior of init() if makeBuildArtifacts is set to staticsOnly.Fixed a bug that would cause roosevelt-router to produce a false negative when detecting teddy.Various dependencies updated.0.21.10Added --webpack=verbose and --wp=verbose-file CLI flags to make it easier to see verbose webpack errors. Available shorthands: --wp and -w.Added detection of undefined template literal variables (e.g. via typo) in rooseveltConfig.Added more helpful error if starting an app with broken symlinks.Various dependencies updated.0.21.9Fixed frontend reload when https is enabled with self-signed certs.Removed parent-require dependency.Added new dev_sync.sh to make writing code for Roosevelt easier. See instructions on how to use it in the README.Various dependencies updated.0.21.8Added wildcard matching to views bundler feature.Fixed bug that could cause build artifact generation to crash starting the app.Various dependencies updated.0.21.7Fixed CSS preprocessor breaking on Windows when using the default configuration in a newly generated app.Various dependencies updated.0.21.6The certs-generator script's default name has been changed to generate-certs. The config auditor will now expect it to be named that.The config-audit script's default name has been changed to audit-config. The config auditor will now expect it to be named that.allowlist in CSS preprocessor now supports wildcard matching, e.g. dir/*.Various dependencies updated.0.21.5allowlist and blocklist in static site generator feature now supports wildcard matching, e.g. dir/*.Various dependencies updated.0.21.4Added allowlist and blocklist to the static site generator feature.Fixed bug with the static site generator feature that required absolute paths for including child templates in a main template.Various dependencies updated.0.21.3When versionedPublic is true, Roosevelt will no longer deposit static HTML pages into the versioned directory.Various dependencies updated.0.21.2Fixed bug where the config auditor would complain about the makeBuildArtifacts param being set to string.Static site generator will now run the HTML validator against rendered templates in dev mode only.Various dependencies updated.0.21.1Static site generator can now be supplied models by file instead of by configuration. If model data is not supplied by configuration, Roosevelt will try to automatically load a model from a JS file with the same name alongside the template if it exists instead.Static site generator will now run the HTML validator against rendered templates.Bumped CI Node versions.0.21.0Breaking: htmlMinifier param renamed and expanded to html. You will need to update your Roosevelt config.Added feature html.sourcePath, html.models, and html.output which lets you generate static HTML pages from the your statics directory by compiling them with a view engine and depositing the output to the public folder at start time.Fixed issue with symlinks that would cause symlinking to a file rather than a directory to fail in Windows.Some error message copyediting.Some minor refactoring and documentation fixes.Various dependencies updated.0.20.1makeBuildArtifacts will now accept a new value of 'staticsOnly' which will allow Roosevelt to create static files but skip the creation of the MVC directories.initServer can now also be called as init instead.Various dependencies updated.0.20.0Breaking: Renamed generateFolderStructure to makeBuildArtifacts.Various dependencies updated.Breaking: Among them, formidable was updated which is a breaking change for any app that takes file uploads as property names in req.files have been renamed, most notably file.path is now file.filepath and file.name is now file.originalname.Removed checkDependencies.0.19.14Fixed bug that required admin permissions to start an app in Windows.0.19.13Added script to generate self-signed HTTPS certs:npm run certs-generator: Generates self-signed HTTPS certs for your app.Default shorthand:npm run cScript is short for: node ./node_modules/roosevelt/lib/scripts/certsGenerator.jsSome refactoring.Various dependencies updated.0.19.12Various dependencies updated.Migrated colors to @colors/colors.0.19.11Fixed bug that caused isoRequire to only work with absolute paths.Various dependencies updated.0.19.10Added roosevelt-router feature to improve support for writing isomorphic code for SPAs.Added isomorphicControllers config option that will permit Roosevelt to make a list of all your controller files that can be used client-side as well so they can be auto-loaded client-side too.Altered clientViews such that the template list will lack file extensions if the file extension of the template matches the default view engine's file extension.Breaking: Default clientViews output bundle changed from bundle.js to views.js.Fixed confusing console warning.HTML validator frontend scripts moved to <head>.Various dependencies updated.0.19.9Made Webpack errors less verbose.Various dependencies updated.0.19.8Updated for support for Node 16.x. This required a migraiton from node-sass to dart-sass.Dropped official Node 15 support, though it will probably still work. Node 14 remains officially supported.Various dependencies updated.0.19.7clientViews allowlist now allows directories.Default command line flags and environment variables recognized by Roosevelt can now be overridden via source-configs.Various dependencies updated.0.19.6Added onAppExit event.Fixed bug with https feature.Various dependencies updated.0.19.5Fix for Node 15 / npm 7 regression. Config auditor and deprecation checker will no longer run as postinstall scripts to compensate for INIT_CWD being removed from npm. These checks will be run exclusively on application first run instead (or any time the public folder is removed). (Closes https://github.com/rooseveltframework/roosevelt/issues/975)Dropped Node 12 support.Various dependencies updated.0.19.4Fixed bug that caused Roosevelt to not listen to NODE_ENV.Moved symlink creation to a separate step and made happen earlier in the app initialization process to maek it easier to work with the various Roosevelt server starting events.Various dependencies bumped.0.19.3Fixed bug which could cause CSS preprocessor to fail if there are subdirectories in your CSS folder.Various dependencies bumped.0.19.2Breaking: clientViews no longer exports a function, instead exporting a JSON object.Breaking: clientViews will no longer minify templates by default.Fixed bug with clientViews exposeAll feature that would cause it to scoop up any system files that might be present in your views directories.Fixed bug with clientViews blocklist mistakenly defaulting to an object instead of an array which could cause crashes in some configurations.Fixed bug with CSS preprocessor that would cause it to scoop up any system files that might be present in your CSS directories.Various dependencies bumped.0.19.1Added ability to configure helmet dependency.Fixed bug that caused frontend reload not to work.Fixed a bug in the Express env variable that would cause it to be incorrectly set at times.Updated some out of date into in the README.Removed some unnecessary code.Various dependencies bumped.0.19.0Breaking: Production mode behavior changed significantly:localhostOnly and alwaysHostPublic defaults were flipped to false and true respectively.alwaysHostPublic was renamed to hostPublic.The --host-public command line flag was removed, since it is no logner needed because hostPublic defaults to true now.New command line flag added called production-proxy to let you opt-in to localhostOnly and alwaysHostPublic being set to true and false respectively as before.Various dependencies bumped.0.18.3You can now use PHP as your templating engine in a Roosevelt app or any other Express application. PHP should be faster than any JS-based templating engine for complex templates since its parser is written in C rather than JS.Breaking: blacklist/whitelist params throughout the API have been renamed to blocklist/allowlist.README was copyedited to improve the clarity of the default behaviors of some of the API, remove outdated information, and other small improvements.The host-public warning was made more prominent so that production mode default behavior regarding statics is less confusing to people.CI improvements.Breaking: Roosevelt is no longer tested on Node 10.x. We didn't do anything to explicitly break older Node versions, but use at your own risk.Various dependencies bumped.0.18.2Added helmet middleware to improve security by default.Replaced body-parser middleware with native Express integration.Various dependencies bumped.0.18.1Changed passphrase option from https.p12.passphrase to https.passphrase so it can be used for certAndKey configurations as well.CI improvements.Various dependencies bumped.0.18.0Replaced the vnu-jar based HTML validator with express-html-validator 🎉.Roosevelt no longer does any background process management as a result.Moved all developer facing dependencies to optionalDependencies.They can be omitted from installion when using npm i --no-optional.Refactored frontend reload implementation.check-dependencies now only runs in dev mode.API changes:Removed separateProcess from htmlValidator.Removed port from htmlValidator.Removed showWarnings from htmlValidator.Added validatorConfig to htmlValidator which respresents a set of rules for the validator to check for.Rules can also be set in a .htmlValidate.json placed in the app root.Removed verbose from frontendReload.These logs are now controlled by the general verbose logging param.Removed ROOSEVELT_VALIDATOR environment variable.Removed ROOSEVELT_AUTOKILLER environment variable.Removed --attach-validator and -a cli flags.Removed --background-validator and -b cli flags.Removed --disable-validator-autokiller, --no-autokiller, and -n cli flags.Removed --enable-validator-autokiller, --html-validator-autokiller, and -k cli flags.Removed dependencies:execafkillhtml-validatorprismjsps-nodetampervnu-jarVarious dependencies bumped.0.17.1Fixed a CSS bug where CSS files were still not being written due to a file existence check.Fixed a CSS bug where empty CSS files were being written because their LESS equivalent would never generate CSS in that particular file.Various dependencies bumped.0.17.0Breaking: Replaced staticsSymlinksToPublic with symlinks.Breaking: Replaced routers param with a simplified routePrefix param which defines a subfolder to mount the app to.Breaking: Renamed multipart param to formidable.Added ability to configure Roosevelt via a rooseveltConfig.json config file placed in app root instead of from a rooseveltConfig object in package.json.Added router Express variable that opens up access to internally used router instance.Added routePrefix Express variable that exposes currently used routePrefix or an empty string if not used.Fixed bug where changes to CSS files were not being written to the output directory.Refactored internal fsr module.Updated internal usage of formidable API.Internal changes to stabilize the automated tests.Various dependencies bumped.0.16.2Added deprecation check for old compiler sub modules.Various dependencies bumped.0.16.1Stopped the config auditor from complaining about obsolete scripts.Fixed cases where some CLI flags weren't being applied to config.Test fixes.Various dependencies bumped.0.16.0Replaced browserify with webpack. This has significant breaking API changes. You will need to totally rewrite your JS bundles from browserify bundles to webpack bundles to upgrade to this version of Roosevelt. It is also recommended that you remove all references to old build artifacts such as .build and .bundled in your application as well from package.json, .gitignore, etc.Eliminated concept of separate JS compilers in favor of declaring this via your webpack config. Note: webpack defaults to minifying JS using terser.Eliminated concept of CSS preprocessor middleware modules in favor of built-in support for LESS, Sass, and Stylus. Other CSS preprocessors can be used as well with a bit of extra configuration.API changes:Removed symlinkToPublic, compiler, output, whitelist, and blacklist params from js.Replaced js.bundles with js.webpack.Removed css.symlinkToPublic.Replaced css.compiler.params.cleanCSS with css.minifier.Added css.compiler.enable.Replaced css.compiler.nodeModule with css.compiler.module.Replaced css.compiler.params with css.compiler.options.css.output is now relative to publicFolder instead of staticsRoot.clientViews.output is now relative to publicFolder instead of staticsRoot.Removed cleanTimer (Obsolete in absense of .build).App cleaner has been removed.source-configs integration is now more tightly knit.Config auditor no longer complains about missing params.Auditor now checks config params on a case-by-case basis.ES6 style variables can now be used in rooseveltConfig referencing other rooseveltConfig entries.Introduced views bundler: An API that allows you to expose view code to frontend JS for client-side templating.Added a button to the validation error page to display the page anyway and another button to disable the validator entirely until the server restarts.Fixed bug with frontend reload causing it to inject the script tag in the wrong location in some situations.Fixed bug where router would cause app routes to fail when no controller files exist.Fixed bug where auto build scanner would crash the app when generateFolderStructure is false.Fixed bug which resulted in a cryptic error if a Roosevelt app was moved to another directory.Fixed bug where symlink failed errors would appear when generateFolderStructure is false.Complete rewrite of HTML validator and related helper scripts.Refactored multipart middlware.Various dependencies bumped.CI improvements.Many rewritten tests.0.15.1Fixed bug causing apps to crash in dev mode.Various dependencies bumped.0.15.0Moved CSS minification from roosevelt-less to Roosevelt using clean-css as a direct dependency. The clean-css library had an update with breaking changes so the rooseveltConfig params in advanced and aggressiveMerging in cleanCSS are now outdated.New default script npm run proddev: Runs the app in production mode, but with the public folder hosted by the Roosevelt app. This is useful for doing development in production mode without having to stage a complex simulation of your production environment, which would likely include hosting static files via another web server better-suited to serving statics like Apache or nginx.Roosevelt now sources configs internally using source-configs.Validator will now be disabled if HTTP_PROXY or HTTPS_PROXY are set but localhost is not in NO_PROXY.Fixed a bug where not having devDependencies or dependencies objects in your app's package.json would throw errors when installing dependencies. Accordingly re-reverted most changes in 0.14.1 to fix buggy behavior with devDependencies in npm installs.The check-dependencies call will now only apply to production dependencies.Some internal refactoring to clean things up.Various dependencies bumped.0.14.6Fixed a bug that caused devDependencies of Roosevelt to be removed if npm i was run more than once.Fixed a bug that caused the automated testing to break if your clone of Roosevelt was not named \"roosevelt.\"Various dependencies bumped.0.14.5staticsSymlinksToPublic will now create missing subdirectories necessary to create a symlink in a target location.Fixed a bug which caused Java hserrpid error logs to pile up in your app directory under certain conditions.Fixed a bug which caused frontend reload to not work on the various error pages.Added code comment above frontend reload script tag to explain that it is injected by Roosevelt.Did some copyediting on frontend reload logging.Various dependencies bumped.0.14.4Added automatic browser reloading when your frontend code changes (via reload).A console warning will now appear explaining why public static assets don't load in prod mode when alwaysHostPublic is set to false (the default).New Express variable added: routes containing a list of all routes loaded in the application.Various dependencies bumped.CI improvements.0.14.3Restored move of several things to devDependencies to shrink production builds. Feature is now activated using ROOSEVELT_DEPLOYMENT environment variable. There are also new corresponding npm run commands dev-install and dev-prune to manage this. See README for more details.Copyediting on several logs to improve clarity.Various dependencies bumped.CI improvements.0.14.2Reverted most changes in 0.14.1 to fix #713, but preserved modularization of htmlValidator.js so that if any devDependencies are missing, the app will not crash in production mode.Various dependencies bumped.0.14.1Moved several things to devDependencies to shrink production builds.Various dependencies bumped.0.14.0Replaced internal logger with roosevelt-logger. Note: this removes the winston Express variable that was previously provided, but it is still indirectly accessible by drilling down through the logger Express variable now. See roosevelt-logger member variable documentation.If custom routers are being used, the res.redirect() method will now prepend the prefix to redirects that are relative to the hostname. To override this setting pass true as the last argument.HTML validator exceptions param will now accept an array of values instead of just a single string value.Various dependencies bumped.CI improvements.0.13.0Roosevelt will now warn you if your CSS/JS compile directory is getting stale and might need to be cleaned with npm run clean. A new cleanTimer param has been added to configure or disable this check.Added new param routers to add support for Express Routers.Added new feature to create custom CSS/JS preprocessors on the fly.Added environment variable to enable/disable the HTML validator autokiller.Added OpenJDK support to the Java HTML Validator.Various dependencies bumped.CI improvements.0.12.2Introduced changelog.Autokiller now sends human-readable GET.Fixed bug which caused the config auditor to report false errors in the case of third party module params being set to configurations other than the default.Fixed bug related to HTTPS cert parsing.Disabled option in HTML minifier which removes HTML comments by default.Various dependencies bumped.CI improvements.0.12.1 and belowHere be dragons…"})
window.siteTexts.push({file: "docs/latest/coding-apps/index.html", title: "coding apps (latest)", text: "Making model filesPlace a file named dataModel.js in mvc/models.Here's a simple example dataModel.js data model:// dataModel.js module.exports = () => {   return { some: 'data' } }In more complex apps, you might query a database to get your data instead.Making view filesViews by default are Teddy templates. See the Teddy documentation for information about how to write Teddy templates.You can also configure Roosevelt to use any templating system supported by Express for your views.Making controller filesController files are places to write Express routes. A route is the term Express uses for URL endpoints, such as https://yoursite/blog or https://yoursite/about.Controllers bind models and views together.To make a new controller, make a new file in the controllers directory, then follow one of the examples below.Example GET route// someController.js module.exports = (router, app) => {   // router is an Express router   // and app is the Express app created by Roosevelt    // standard Express route   router.route('/about').get((req, res) => {     // load a data model     const model = require('models/dataModel')()      // render a template and pass it the model     res.render('about', model)   }) }Example POST routeIn Roosevelt, Cross-Site Request Forgery protection is enabled by default. That means in order to make requests to any POST route, you will need to pass a CSRF token from the server to the browser, and then return that token when making a request from the browser to the server.To do that, include the CSRF token in your HTML form as a hidden input _csrf:// someController.js module.exports = (router, app) => {   router.route('/form').get((req, res) => {     const model = require('models/dataModel')()     model.csrfToken = req.csrfToken() // add CSRF token to the model     res.render('about', model)   }) }<!-- form that include the token in a request body --> <form action=\"/some-protected-endpoint\" method=\"post\">   <input type=\"hidden\" name=\"_csrf\" value=\"{csrfToken}\"> </form>You can also add the token as a request header when performing fetch requests by setting the x-csrf-token header:// request that includes the token in headers const response = await fetch('/some-protected-endpoint', {   method: 'POST',   headers: {     'X-CSRF-TOKEN': csrfToken // extract it from the DOM or something   } })You can also exempt certain routes from CSRF protection or disable the feature entirely by configuration. See configuration section for details.Reusable controllersSometimes it is also useful to separate controller logic from your routing. This can be done by creating a reusable controller module. Reusable controller modules differ from standard controller modules in that they are meant to be called from within other controllers and do not define routes.To create a reusable controller, put a file in your controllers directory that accepts app, req, and res arguments with logic that is meant to execute from within a predefined route.An example of when this might be needed would be having a reusable controller for \"404 Not Found\" pages:// notFound.js — reusable controller module.exports = (app, req, res) => {   const model = { content: 'Cannot find this page' }   res.status(404)   res.render('404', model) }You can then call the reusable controller in any other controller when needed:// someController.js module.exports = (router, app) => {   router.route('/whatever').get((req, res) => {     // test some logic that could fail     // thus triggering the need for the 404 controller     if (something) {       // logic didn't fail       // so render the page normally       let model = require('models/dataModel')       res.render('whatever', model)     }     else {       // logic failed       // so throw the 404 by executing your reusable controller       require('controllers/notFound')(app, req, res)     }   }) }Any controller file that has no arguments or more than two arguments will be considered a reusable controller.Making static pagesYou can also generate static files from templates and models as well.Templates for static pages go in your statics folder (staticsRoot) under the HTML source path (html.sourcePath), which is statics/pages by default.Data models for the templates will be merged from different possible locations to source them from in the following order of precedence:* model in htmlModels.File-level override in htmlModels.Model file.Setting static page modelsTo declare a global model in htmlModels, use the * character:// build.js (async () => {   await require('roosevelt')({     html: {       models: {         '*': {           hello: 'world!'         }       }     }   }).init() })()To declare a model for a specific file in htmlModels:// build.js (async () => {   await require('roosevelt')({     html: {       models: {         'index.html': {           hello: 'world!'         }       }     }   }).init() })()You can also declare a model for a specific page by placing a JS file with the same name alongside the template.For example if an index.js file exists next to index.html, the JS file will be used to set the model so long as it exports either an object or a function that returns an object."})
window.siteTexts.push({file: "docs/latest/configuration/index.html", title: "configuration (latest)", text: "App nameRoosevelt will determine your app's name by examining \"name\" in package.json. If none is provided, it will use Roosevelt Express instead.The rooseveltConfig APIRoosevelt is highly configurable and you can configure it from the following hierarchy of sources in increasing order of precedence:A rooseveltConfig section in your package.json.A roosevelt.config.json file.A rooseveltConfig.json file.Constructor parameters.Environment variables.Command line flags.What \"increasing order of precedence\" means is that command line flags will override environment variables, environment variables will override constructor parameters, constructor parameters will override config files, etc.File path optionsappDir [String]: Root directory of your application. Default: The directory where your app's package.json is located.buildFolder [String]: Where build artifacts will be placed such as the output from preprocessed views, preprocessed statics, the views bundler feature, or the controllers bundler feature. Default: \".build\".You should .gitignore this folder.Not all build artifacts will go into this folder. Some notable exceptions include:.npm-cache: Generated by npm.node_modules: Generated by npm.package-lock.json: Generated by npm.public: This is a separate folder for files generated by Roosevelt that should be exposed publicly as static files. The name of this folder is configurable with the publicFolder param.secrets: Directory that stores certs, keys, and secrets. The name of this folder is configurable with the secretsPath param.controllersPath [String]: Relative path on filesystem to where your controller files are located. Default: \"mvc/controllers\".errorPages [Object]: Relative path on filesystem to where your various error page controller files are located. If you do not supply them, Roosevelt will use its default ones instead:forbidden [String]: Your 403 Forbidden error page. Default: \"403.js\".notFound [String]: Your 404 Not Found error page. Default: \"404.js\".internalServerError [String]: Your 5xx Internal Server Error error page. Default: \"5xx.js\".serviceUnavailable [String]: Your 503 Service Unavailable error page. Default: \"503.js\".modelsPath [String]: Relative path on filesystem to where your model files are located. Default: \"mvc/models\".preprocessedStaticsPath [String]: Relative path on filesystem to where your preprocessed static files will be written to. Preprocessed static files are static files that have been preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled. This feature will only be active if minifyHtmlAttributes is enabled. Default: \".build/preprocessed_statics\".preprocessedViewsPath [String]: Relative path on filesystem to where your preprocessed view files will be written to. Preprocessed view files are view files that have had their uses of web components progressively enhanced using the progressively-enhance-web-components module. To disable this feature, set the value to false. Default: \".build/preprocessed_views\".publicFolder [String]: All files and folders in this directory will be exposed as static files in development mode or when hostPublic is enabled. You should .gitignore this folder. Default: \"public\".secretsPath [String]: Directory that stores certs, keys, and secrets. You should .gitignore this folder. Default: secrets.staticsRoot [String]: Relative path on filesystem to where your source static assets are located. By default this folder will not be made public, but is instead meant to store unprocessed or uncompressed source assets that will later be preprocessed and exposed in public. Default: \"statics\".viewsPath [String]: Relative path on filesystem to where your view files are located. Default: \"mvc/views\".Development mode optionsThese features are only available in development mode.frontendReload [Object]: Settings to use for the browser reload feature which automatically reloads your browser when your frontend code changes.Options:enable [Boolean]: Whether or not to enable this feature.exceptionRoutes [Array of Strings]: List of routes to exclude from this feature.expressBrowserReloadParams [Object]: Params to pass to express-browser-reload. This feature will only be active on pages with a <body> tag.Default: [Object]{   \"enable\": true,   \"exceptionRoutes\": [],   \"expressBrowserReloadParams\": {     \"skipDeletingConnections\": true   } }htmlValidator [Object]: Parameters to send to express-html-validator.enable [Boolean]: Enables or disables the built-in HTML validator.exceptions [Object]: A set of params that can be used to prevent validation in certain scenarios.header [String]: A custom header that when set will disable the validator on a per request basis.modelValue [String]: An entry in your data model passed along with a res.render that when set will disable validation on the rendered HTML.validatorConfig [Object]: html-validate configuration that determines what errors the validator looks for.The full list of available validator rules can be found here.This configuration can also be set by a .htmlValidate.json file placed in your app root directory.mode [String]: Decides whether your app starts in production mode or development mode by default. Default: production.Default: [Object]{   \"enable\": true,   \"exceptions\": {     \"requestHeader\": \"Partial\",     \"modelValue\": \"_disableValidator\"   },   \"validatorConfig\": {} }HTTP optionshttp [Object]: Parameters for configuring the HTTP server.enable [Boolean]: Enable HTTP server.port [Number]: The HTTP port your app will run on.Default when an app is created manually: [Object]{   \"enable\": true,   \"port\": 43763 }Default when an app is created with the app generator: [Object]{   \"enable\": false,   \"port\": 43763 }https [Object]: Parameters for configuring the HTTPS server.enable [Boolean]: Enable HTTPS server.port [Number]: The port your app will run the HTTPS server on.autoCert [Boolean]: Will create self-signed HTTPS certificates in development mode as long as they don't already exist.options [Object]: Configuration that gets passed directly to the HTTPS server instance. Accepts all native settings. For convenience, the ca, cert, key, and pfx params can take file path strings or arrays of file path strings relative to your secretsPath in addition to the native strings and buffers.Default when an app is created manually: [Object]{   \"enable\": false,   \"port\": 43711,   \"autoCert\": true,   \"options\": {} }Default when an app is created with the app generator: [Object]{   \"enable\": true,   \"port\": 43711,   \"autoCert\": true,   \"options\": {     \"cert\": \"cert.pem\",     \"key\": \"key.pem\"   } }App behavior optionsdeprecationChecks: [String] or [Boolean]: Whether or not to run the deprecation checker in Roosevelt. The deprecation checker is a script that runs when your app starts to determine if you have code targeting an older version of Roosevelt that needs to be refactored. Default: 'developmemnt-mode' which will run the checks in development mode only. Set to false to disable it entirely.expressVersion: [Number]: Which version of Express to use. Choose between either 4 or 5. This option exists because there are significant differences between Express 4 and Express 5. Default: 5.bodyParser [Object]: Parameters to supply to the body-parser module which handles POST requests.urlEncoded [Object]: Parameters to supply to body-parser.urlencoded.json [Object]: Parameters to supply to body-parser.json.Default: [Object]{   \"urlEncoded\": {     \"extended\": true   },   \"json\": {} }csrfProtection [Boolean or Object]: Whether to enable Cross-Site Request Forgery protection. Default: true.Requires expressSession to be enabled.To disable the feature, set it to false. To exempt certain routes from protection, supply an object as your config with an array of exemptions.See the CSRF Protection section for more information.Example of exemptions list: [Object]{   \"exemptions\": [     \"/foo\",     \"/bar\",     \"/baz\"   ] }expressSession [Boolean or Object]: Parameters to pass to the express-session module. Default: true.Default if expressSession is set to true: [Object]{   \"secret\": [an auto-generated secret],   \"resave\": false, // usually a bad idea to set to true   \"saveUninitialized\": false, // usually a bad idea to set to true   \"cookie\": {     \"secure\": false, // will automatically be set to true if https is enabled     \"sameSite\": \"strict\", // adds same site enforcement     \"maxAge\": 347126472000 // sets expiration very far in the future (~11 years) to basically never expire   }   \"store\": [the expressSessionStore.instance Roosevelt param] }expressSessionStore [Object]: Define a custom session store to use with express-session instead of the default one provided by Roosevelt. This is recommended if you plan to shard your app across multiple separate processes or scale it to multiple servers.filename [String]: Name of the session file.instance: [Object] A store instance. See this list for compatible stores.preset [String]: Available presets provided by Roosevelt. Only used if instance is not provided.Available options:\"default\": Use Roosevelt's default session store, which is better-sqlite3-session-store.\"express-session-default\": Use express-session's default session store (not recommended).presetOptions [Object]: Options to pass to the preset session store if one is selected. Only used if instance is not provided.checkPeriod [Number]: How long, in milliseconds, the memory store will check for expired items.ttl [Number]: How long, in milliseconds, before a session is expired. If not set, it will default to the value of checkPeriod.max [Number]: The maximum size of the cache, checked by applying the length function to all values in the cache. If not set, there will be no maximum.Either instance or preset must be set for this param to work properly.Default: [Object]{   \"filename\": \"sessions.sqlite\",   \"instance\": null,   \"preset\": \"default\",   \"presetOptions\": {     \"checkPeriod\": 86400000, // one day     \"ttl\": null,     \"max\": null   } }formidable: Parameters to pass to formidable using formidable's API for multipart form processing (file uploads). Access files uploaded in your controllers by examining the req.files object. Roosevelt will remove any files uploaded to the upload directory when the request ends automatically. To keep any, be sure to move them before the request ends.Default: [Object]{   \"multiples\": true // enables multiple files to be uploaded simultaneously }To disable multipart forms entirely, set formidable to false.helmet [Object]: Parameters to pass to the helmet module. This module helps secure Express apps by setting HTTP response headers.The default options are specified in the helmet docs, with the following exceptions that Roosevelt makes to the default Content-Security-Policy settings:The upgrade-insecure-requests directive has been removed. This change prevents this bug.The script-src directive has been set to \"unsafe-inline\". This makes it possible to use inline scripts.The form-action directive has been set to null. This makes it possible to submit forms to other domains.You can reverse any of these changes by configuring helmet yourself.To disable helmet entirely, set the param to false.logging: Parameters to pass to roosevelt-logger. See roosevelt-logger parameters documentation for configuration options.Default: [Object]{   \"methods\": {     \"http\": true,     \"info\": true,     \"warn\": true,     \"error\": true,     \"verbose\": false   } }makeBuildArtifacts [Boolean or String]: When enabled Roosevelt will generate user-specified directories, CSS/JS bundles, etc.Defaults to false for apps created manually.Will be set to true in apps generated with the app generator.Can also accept a value of \"staticsOnly\" which will allow Roosevelt to create static files but skip the creation of the MVC directories.routePrefix [String]: A prefix prepended to your application's routes. Applies to all routes and static files. Default: null.Example: When set to \"foo\" a route bound to / will be instead be bound to /foo/.This prefix is exposed via the routePrefix Express variable which should be used for resolving the absolute paths to statics programmatically.Example: An image located at /images/teddy.jpg can be resolved in a prefix-agnostic way via ${app.get('routePrefix')/images/teddy.jpg}.viewEngine [String]: What templating engine to use, formatted as \"fileExtension: nodeModule\".Defaults to \"none\" for apps created manually.Will be set to \"html: teddy\" in apps generated with the app generator.Also by default when using the app generator, the teddy module is marked as a dependency in package.json.To use multiple templating systems, supply an array of engines to use in the same string format. Each engine you use must also be marked as a dependency in your app's package.json. Whichever engine you supply first with this parameter will be considered the default.Example configuration using multiple templating systems: [Object]{   \"viewEngine\": [     \"html: teddy\",     \"php: php\",     \"ejs: ejs\"   ] }Isomorphic (single page app) optionsclientControllers [Object]: Allows you to expose controller (route) file code to frontend JS for client-side routing.enable [Boolean]: Whether or not to bundle controller files.exposeAll [Boolean]: Option to expose all templates.blocklist [Array of Strings]: List of files or folders to exclude when exposeAll is enabled.Can also be set declaratively by putting a // roosevelt-blocklist comment at the top of any controller file.allowlist [Object of Arrays]: List of JS files to create mapped to which controller files to expose.Example: { \"mainPages.js\": [\"index.js\", \"about.js\"] }Can also be set declaratively by putting a // roosevelt-allowlist file_path comment at the top of any controller file.defaultBundle [String]: File name for the default JS controller bundle.output [String]: Subdirectory within buildFolder to write JS controller bundles to.Default: [Object]\"clientControllers\": {   \"enable\": false,   \"exposeAll\": false,   \"blocklist\": [],   \"allowlist\": {},   \"defaultBundle\": \"controllers.js\",   \"output\": \"js\" }clientViews [Object]: Allows you to expose view (template) file code to frontend JS for client-side templating.enable [Boolean]: Whether or not to bundle view files.exposeAll [Boolean]: Option to expose all templates.blocklist [Array of Strings]: List of files or folders to exclude when exposeAll is enabled.Can also be set declaratively by putting a <!-- roosevelt-blocklist --> tag at the top of any template.allowlist [Object of Arrays]: List of JS files to create mapped to which view files to expose.Example: { \"mainPages.js\": [\"baseLayout.html\", \"footer.html\"] }Can also be set declaratively by putting a <!-- roosevelt-allowlist file_path --> tag at the top of any template.defaultBundle [String]: File name for the default JS view bundle.output [String]: Subdirectory within buildFolder to write JS view bundles to.minify [Boolean]: Option to minify templates that are exposed via this feature.Be careful with this feature because it can break your templates depending on which templating system you use, and as such it is off by default. You may need to make liberal use of the minifyOptions param to make it work right with your templating system.minifyOptions [Object]: Parameters to supply to html-minifier's API.Uses the params you set in html.minifier.options if empty.Default: [Object]\"clientViews\": {   \"enable\": false,   \"exposeAll\": false,   \"blocklist\": [],   \"allowlist\": {},   \"defaultBundle\": \"views.js\",   \"output\": \"js\",   \"minify\": false,   \"minifyOptions\": {} }Static file optionscopy [Array of Objects]: Declare one or more files or folders to copy at runtime. Default: [].source [String]: Path to be copied from.Roosevelt will not attempt to copy files or folders that do not exist.dest [String]: Path to place the copy.If this destination path already exists it will be overwritten.html [Object]: Generate static HTML pages:sourcePath [String]: Subdirectory within staticsRoot where your static HTML files are located. By default this folder will not be made public, but is instead meant to store unminified / unprocessed HTML template source files which will be rendered by your templating system, minified, and written to the public folder when the app is started.allowlist: [Array of Strings] List of templates to render, minify, and write to the public folder when the app is started. If the list is empty, all templates in your sourcePath will be sourced. Supports wildcard matching, e.g. dir/*.blocklist: [Array of Strings] List of templates in your sourcePath to skip. Supports wildcard matching, e.g. dir/*.You can also block a file from being exposed by adding a comment on the first line of the file with the string roosevelt-blocklist anywhere on the line.models [Object]: Data to pass to templates by file path / file name.Example: { \"index.html\": { \"some\": \"data\" } }You can also pass a global model using a * catch-all character: { \"*\": { \"some\": \"data\" } }If this data is not supplied by configuration, Roosevelt will try to automatically load a model from a JS file with the same name alongside the template if it exists instead. For example if an index.js file exists next to index.html and the model is not defined by configuration like in the example above, then the index.js file will be used to set the model so long as it exports either an object or a function that returns an object.output [String]: Subdirectory within publicFolder where parsed and minified HTML files will be written to.folderPerPage [Boolean or String]: Make a folder for each page and place the page within it.Example values:true: Given a page called example.html, this feature will create a folder called \"example\" in the public folder and place \"example.html\" within it.\"index.html\": Given a page called example.html, this feature will create a folder called \"example\" in the public folder and place \"index.html\" within it. This is useful for creating \"pretty URLs\" with static sites.false: Disables the feature.minifier [Object]: How you want Roosevelt to minify your HTML:enable [Boolean]: Whether or not to minify HTML.Can also be disabled by the minify param.Minification is automatically disabled in development mode.exceptionRoutes [Array of Strings]: List of controller routes that will skip minification entirely. Set to false to minify all URLs.options [Object]: Parameters to supply to html-minifier's API.Default: [Object]{   \"sourcePath\": \"pages\",   \"allowlist\": null,   \"blocklist\": null,   \"models\": {},   \"output\": \"\",   \"folderPerPage\": false,   \"minifier\": {     \"enable\": true,     \"exceptionRoutes\": false,     \"options\": {       \"removeComments\": true,       \"collapseWhitespace\": true,       \"collapseBooleanAttributes\": true,       \"removeAttributeQuotes\": true,       \"removeEmptyAttributes\": true     }   } }css [Object]: How you want Roosevelt to configure your CSS preprocessor:sourcePath [String]: Subdirectory within staticsRoot where your CSS files are located. By default this folder will not be made public, but is instead meant to store unminified CSS source files which will be minified and written to the public folder when the app is started.compiler [Object]: Which CSS preprocessor (if any) to use.enable [Boolean]: Whether or not to use a preprocessor.module [String]: Node module name of the CSS preprocessor you wish to use.Currently less, sass, and stylus are supported.Your chosen CSS preprocessor module must also be marked as a dependency in your app's package.json.options [Object]: Parameters to send to the CSS preprocessor if it accepts any.minifier [Object]: Params pertaining to CSS minifcation.enable [Boolean]: Whether or not to minify CSS. Can also be disabled by the minify param.options [Object]: Parameters to pass to the CSS minifier clean-css, a list of which can be found in the clean-css docs.allowlist [Array of Strings]: List of CSS files to allow for compiling. Leave undefined to compile all files. Supply a : character after each file name to delimit an alternate file path and/or file name for the minified file.Example array member: \"example.less:example.min.css\" compiles example.less into example.min.css.output [String]: Subdirectory within publicFolder where compiled CSS files will be written to.versionFile [Object]: If enabled, Roosevelt will create a CSS file which declares a CSS variable containing your app's version number from package.json. Enable this option by supplying an object with the member variables fileName and varName. Versioning your static files is useful for resetting your users' browser cache when you release a new version of your app.Example usage (with SASS): { \"fileName\": \"_version.scss\", \"varName\": \"appVersion\" }Assuming the default Roosevelt configuration otherwise, this will result in a file statics/css/_version.scss with the following content: /* do not edit; generated automatically by Roosevelt */ $appVersion: '0.1.0';Some things to note:If there is already a file there with that name, this will overwrite it, so be careful!It's generally a good idea to add this file to .gitignore, since it is a build artifact.Default: [Object]{   \"sourcePath\": \"css\",   \"compiler\": {     \"enable\" : false,     \"module\": \"less\",     \"options\": {}   },   \"minifier\": {     \"enable\": true,     \"options\": {}   },   \"allowlist\": null,   \"output\": \"css\",   \"versionFile\": null }cssCompiler [Function]: Use this param to supply a custom CSS preprocessor function.To do so, supply a function which accepts argument app, which is a reference to the Express app created by Roosevelt.The function should return an object with the following members:versionCode(app) [Function]: Function to return the version of your app. This is needed to support the versionFile feature of Roosevelt's CSS preprocessor API.app [Object]: The Express app created by Roosevelt.parse(app, fileName) [Function]: Function to preprocess CSS.app [Object]: The Express app created by Roosevelt.filePath [String]: The path to the file being preprocessed.When a custom preprocessor is defined in this way it will override the selected preprocessor specified in css.compiler.module.This param can only set via Roosevelt's constructor, like this:(async () => {   await require('roosevelt')({     cssCompiler: app => {       return {         versionCode: app => {           // write code to return the version of your app here           // generally you should return a css variable with your app version         },         parse: (app, filePath) => {           // write code to preprocess CSS here           return {             css: 'write code to output css here',             sourceMap: 'write code to output source map here (optional)'           }         }       }     }   }).startServer() })()favicon [String]: Location of your favicon file. Default: \"none\".Will be set to \"images/favicon.ico\" in apps generated with the app generator.js [Object]: How you want Roosevelt to handle module bundling and minifying your frontend JS:sourcePath [String]: Subdirectory within staticsRoot where your JS files are located. By default this folder will not be made public, but is instead meant to store unminified JS source files which will be minified and written to the public folder when the app is started.[bundler name] [String]: Parameters related to bundling JS the specified bundler module:Values you can supply to [bundler name]:webpack: See Webpack site for more details about Webpack configuration.customBundler: Allows you to define your own custom bundler.Params you can pass to your chosen bundler:enable [Boolean]: Enable the bundler.bundles: [Array of Objects] Declare one or more JavaScript bundle files.env: [String] Bundle only in development or production mode.Accepted values:\"development\": Development mode.\"production\": Production mode.If no value is set, it will bundle in both modes.config: [Object or String] The config to send to the module bundler. Can also be a path to a config file relative to the app directory.customBundlerFunction: [Function] A custom async function to execute for this bundler instead of executing the default one supplied by Roosevelt. This param is required if your bundler is set to customBundler.Arguments provided:bundle: The bundle object supplied by Roosevelt.config: The config object after it has been postprocessed by Roosevelt.app: The Roosevelt app.verbose [String]: Enable verbose error handling.Accepted values:true: Will print verbose logs to the console.\"file\": Will print verbose logs to the console and write them to a file for debugging.Default when an app is created manually: [Object]{   \"sourcePath\": \"js\",   \"webpack\": {     \"enable\": false,     \"bundles\": [],     \"customBundlerFunction\": null   },   \"customBundler\": {     \"enable\": false,     \"bundles\": [],     \"customBundlerFunction\": null   },   \"verbose\": false }Default when an app is created with the app generator: [Object]{   \"sourcePath\": \"js\",   \"webpack\": {     \"enable\": true,     \"bundles\": [       {         \"config\": {           \"entry\": \"${js.sourcePath}/main.js\",           \"devtool\": \"source-map\",           \"output\": {             \"path\": \"${publicFolder}/js\"           },           \"resolve\": {             \"alias\": {               \"fs\": false,               \"path\": false             },             \"modules\": [\"${js.sourcePath}\", \"${publicFolder}/js\", \"${appDir}\", \"node_modules\"]           }         }       }     ],     \"customBundlerFunction\": null   },   \"customBundler\": {     \"enable\": false,     \"bundles\": [],     \"customBundlerFunction\": null   },   \"verbose\": false }If you're using webpack, Roosevelt will also postprocess your webpack config to do the following things:If your config does not set mode, then Roosevelt will set mode to development if Roosevelt is in development mode.If your config does not set devtool, then Roosevelt will set devtool to source-map if Roosevelt is in development mode.If Roosevelt's prodSourceMaps feature is enabled, then Roosevelt will set devtool to source-map if Roosevelt is in production mode.If your config does not set optimization, then Roosevelt will set optimization to the following:optimization = {   minimize: true,   minimizer: [     new TerserPlugin({       extractComments: false // disable LICENSE.txt file generation     })   ] }minify [Boolean]: Enables HTML and CSS minification. This feature is automatically disabled during development mode. Minification for JS files is handled by the js params above. Default: true.minifyHtmlAttributes [Object]: Settings to pass to minify-html-attributes.enable [Boolean or String]: Whether or not to enable minify-html-attributes.Available options:\"production\": Enable only in production mode.\"development\": Enable in all modes.true: Will be taken to mean \"production\".minifyHtmlAttributesParams: Params to pass to minify-html-attributes.Note: Roosevelt will always override 3 params from minify-html-attributes:htmlDir will always be set to Roosevelt's preprocessedViewsPath.cssDir will always be set to Roosevelt's preprocessedStaticsPath.jsDir will always be set to Roosevelt's preprocessedStaticsPath.Default: [Object]{   \"enable\": false,   \"minifyHtmlAttributesParams\": {} }prodSourceMaps [Boolean]: Enables source maps for minified CSS and JS files in production mode. Default: false.symlinks [Array of Objects]: Declare one or more symlinks to be generated at runtime. Default: [].source [String]: Path to be linked to.Roosevelt will not attempt to generate a symlink to a source path that does not exist.dest [String]: Path to place symlink.If this destination path already exists it will not be overwritten.Will be set to the following in apps generated with the app generator:[   {     \"source\": \"${staticsRoot}/images\",     \"dest\": \"${publicFolder}/images\"   } ]versionedPublic [Boolean]: If set to true, Roosevelt will prepend your app's version number from package.json to your public folder. Versioning your public folder is useful for resetting your users' browser cache when you release a new version. Default: false.Deployment optionshostPublic [Boolean]: Whether or not to allow Roosevelt to host the public folder. By default in production-proxy mode Roosevelt will not expose the public folder. It's recommended instead that you host the public folder through another web server, such as Apache or nginx that is better optimized for hosting static files. Default: false.localhostOnly [Boolean]: Listen only to requests coming from localhost in production mode. This is useful in environments where it is expected that HTTP requests to your app will be proxied through a more traditional web server like Apache or nginx. This setting is ignored in development mode. Default: true.shutdownTimeout [Number]: Maximum amount of time in milliseconds given to Roosevelt to gracefully shut itself down when sent the kill signal. Default: 30000 (30 seconds).Template literals in rooseveltConfig valuesAll config values support template literal style variable syntax that you can use to refer to other Roosevelt parameters. For example:{   \"css\": {     \"sourcePath\": \"css\",     \"output\": \".build/${css.sourcePath}\"   } }Resolves to:{   \"css\": {     \"sourcePath\": \"css\",     \"output\": \".build/css\"   } }EventsRoosevelt provides a series of events you can attach code to by passing a function to the desired event as a parameter to Roosevelt's constructor like so:(async () => {   await require('roosevelt')({     onServerStart: (app) => { /* do something */ }   }).startServer() })()Event listThese are sorted in order of when they are executed during the lifecycle of a Roosevelt app.onBeforeMiddleware(app): Fired when the app begins initializing, prior to any middleware being loaded into the app.app: The Express app created by Roosevelt.onBeforeControllers(app): Fired during initialization, prior to any routes being loaded.app: The Express app created by Roosevelt.onBeforeStatics(app): Fired during initialization, prior to any statics being written.app: The Express app created by Roosevelt.onClientViewsProcess(template): Fired to preprocess templates before being exposed to the client.template: A string containing a template written in any JS-based templating engine (e.g. Teddy, Pug, ejs, etc).onServerInit(app): Fired when the server is fully initialized and all middleware has been loaded but before the server has started.app: The Express app created by Roosevelt.onServerStart(app): Fired when the server starts.app: The Express app created by Roosevelt.onAppExit(app): Fired when the app recieves a kill signal.app: The Express app created by Roosevelt.Express variables exposed by RooseveltRoosevelt supplies several variables to Express that you may find handy. Access them using app.get('variableName').appDir: The directory the main module is in.appName: The name of your app derived from package.json. Uses \"Roosevelt Express\" if no name is supplied.appVersion: The version number of your app derived from package.json.controllersPath: Full path on the file system to where your app's controllers folder is located.clientControllersBundledOutput: Full path on the file system to where your app's client-exposed controllers folder is located.clientViewsBundledOutput: Full path on the file system to where your app's client-exposed views folder is located.cssCompiledOutput: Full path on the file system to where your app's minified CSS files are located.cssPath: Full path on the file system to where your app's CSS source files are located.debugMarkup: HTML you can add to your custom error pages if you define any that will print server errors if any exist, display the route list, and add some inline JavaScript that will serialize the request's err, req, and res objects so you can interactively examine them in the browser's developer tools. Only available in development mode.env: Either development or production.express: The Express module.expressSession: The express-session module Roosevelt uses internally. Session middleware.expressSessionStore: The session store instance used by express-session module Roosevelt uses internally.htmlPath: Full path on the file system to where your app's HTML static page source files are located.htmlRenderedOutput: Full path on the file system to where your app's rendered and minified static HTML files are located.httpServer: The http server created by Roosevelt.httpsServer: The https server created by Roosevelt.jsPath: Full path on the file system to where your app's JS source files are located.logger: The roosevelt-logger module Roosevelt uses internally. Used for console logging.modelsPath: Full path on the file system to where your app's models folder is located.package: The contents of package.json.params: The parameters you sent to Roosevelt.preprocessedStaticsPath or preprocessedStatics: Full path on the file system to where your app's preprocessed statics folder is located.preprocessedViewsPath or preprocessedViews: Full path on the file system to where your app's preprocessed views folder is located.publicFolder: Full path on the file system to where your app's public folder is located.roosevelt:state: Application state, e.g. disconnecting if the app is currently being shut down.router: Instance of router module used by Roosevelt.routePrefix: Prefix appended to routes via the routePrefix param. Will be '' if not set.routes: List of all routes in the app.staticsRoot: Full path on the file system to where your app's statics folder is located.view engine: Default view engine file extension, e.g. .html.viewEngine e.g. teddy by default: Any view engine(s) you define will be exposed as an Express variable. For instance, the default view engine is teddy. So by default app.get('teddy') will return the teddy module.viewsPath or views: Full path on the file system to where your app's views folder is located.Additionally the Roosevelt constructor returns the following object:expressApp [Object]: The Express app created by Roosevelt.initServer(callback) or init(callback) [async Function]: Starts the HTML validator, sets up some middleware, runs the CSS and JS preprocessors, and maps routes, but does not start the HTTP server. Call this method manually first instead of startServer if you need to setup the Express app, but still need to do additional setup before the HTTP server is started. This method is automatically called by startServer once per instance if it has not yet already been called. Takes an optional callback.startServer() or start() [async Function]: Calls the listen method of http, https, or both (depending on your configuration) to start the web server with Roosevelt's config.stopServer(params) or stop(params) [Function]: Stops the server from accepting new connections before exiting and takes an optional argument stopServer({ persistProcess: true }) which will allow the process to remain active after the server has closed.Recognized environment variablesThe following is a list of environment variables that Roosevelt listens for.NODE_ENV:Set to production to force the app into production mode.Set to development to force the app into development mode.NODE_PORT: Default HTTPS port to run your app on.Will set HTTP port instead if HTTPS is disabled.HTTP_PORT: Default HTTP port to run your app on. Takes precedence over NODE_PORT.HTTPS_PORT: Default HTTPS port to run your app on.DISABLE_HTTPS: When set to true, the HTTPS server will be disabled and the app will revert to HTTP regardless of what is set in the rooseveltConfig.MAKE_BUILD_ARTIFACTS: Lets you set Roosevelt's makeBuildArtifacts param via environment variable.Environment variable precedence:Environment variables supersede your app's rooseveltConfig.Environment variables can be overridden with command line arguments.Command line usageAvailable npm scriptsRoosevelt apps created with the app generator come with the following notable npm scripts prepopulated in package.json:npm run production: Runs the app in production mode.Default shorthands:npm run prodnpm run pnpm startScript is short for: nodemon app.js --production-modenpm run development: Runs the app in development mode.Default shorthands:npm run devnpm run dScript is short for: nodemon app.js --development-modenpm run production-proxy: Runs the app in production mode, but with localhostOnly set to true and hostPublic set to false. This mode will make it so your app only listens to requests coming from localhost and does not serve anything in the public folder. This mode is useful when you want to host your app behind a reverse proxy from a web server like Apache or nginx and is considered a best practice for Node.js deployments.Default shorthands:npm run prodproxynpm run xScript is short for: nodemon app.js --production-proxy-modenpm run generate-certs: Generates self-signed HTTPS certs for your app.Script is short for: node ./node_modules/roosevelt/lib/scripts/certsGenerator.jsSupports command line flags --appDir somewhere --secretsPath somewhere to override those default locations.npm run generate-session-secret: Generates a secret key for the express-session module.Script is short for: node ./node_modules/roosevelt/lib/scripts/sessionSecretGenerator.jsSupports command line flags --appDir somewhere --secretsPath somewhere to override those default locations.npm run generate-secrets: Runs the above three scripts.Supports command line flags --appDir somewhere --secretsPath somewhere to override those default locations.Available command line argumentsnode app.js --production-mode: Runs the app in production mode.Default shorthands:--prod-pnode app.js --development-mode: Runs the app in development mode.Default shorthands:--dev-dnode app.js --build: Only runs the build scripts and doesn't start the app.Default shorthands:-bnode app.js --jsbundler=verbose: Prints verbose errors from the JS bundler to the console.Default shorthands:--jsb=verbose-j=verbosenode app.js --jsbundler=verbose-file: Prints verbose errors from the JS bundler to the console as well as write a jsBundlerError.txt file to the app's root directory containing the full error.Default shorthands:--jsb=verbose-file-j=verbose-filenode app.js --production-proxy-mode: Runs the app in production mode, but with localhostOnly set to true and hostPublic set to false. This mode will make it so your app only listens to requests coming from localhost and does not serve anything in the public folder. This mode is useful when you want to host your app behind a reverse proxy from a web server like Apache or nginx and is considered a best practice for Node.js deployments.Default shorthands:--prodproxy-xnode app.js --enable-validator: Forces the HTML validator to be enabled.Default shorthands:--html-validator-hnode app.js --disable-validator: Forces the HTML validator to be disabled.Default shorthands:--raw-rCombining npm scripts and command line argumentsThe npm scripts can be combined with the command line flags.For example, running npm run dev -- --disable-validator will run your app in development mode and force the HTML validator to be disabled."})
window.siteTexts.push({file: "docs/latest/deployment/index.html", title: "deployment (latest)", text: "If you want to deploy a Roosevelt multi-page app or single-page app live to the internet, there are some things you should do to harden it appropriately if you expect to take significant traffic.Run the app behind a reverse proxy and use all the CPU coresTo do this, use the production-proxy-mode command line flag and run the process on multiple cores using a tool like pm2.Then host your app behind a reverse proxy from a web server like Apache or nginx, which is considered a best practice for Node.js deployments.Running the app in production-proxy mode runs the app in production mode, but with localhostOnly set to true and hostPublic set to false. This mode will make it so your app only responds to requests coming from the proxy server and does not serve anything in the public folder. You will then need to serve the contents of the public folder directly via Apache or nginx.Use HTTPSSetting up HTTPS can be tricky to configure properly especially for novices, so it can be tempting not do it to simplify deployment, but your website won't be seen as professional if it isn't served up via HTTPS. It's worth the effort to set it up.Use a caching service or a database to store sessionsRoosevelt's default session store for express-session works great if your app only needs a single process, but if you're spreading your app across multiple processes or servers, you will need to reconfigure express-session to use a caching service that supports replication like redis or a database that supports replication like PostgreSQL in order to scale your app.Use Roosevelt's static site generator instead if you canNot all sites need to execute logic dynamically on the backend. If you can get away with making a site using a static site generator, then that will dramatically simplify deployment. rooseveltframework.org is itself a static site generated with Roosevelt's static site generator, and you can view its source code here."})
window.siteTexts.push({file: "docs/latest/get-started/index.html", title: "get started (latest)", text: "🧸 roosevelt PrerequisitesFirst you will need to install Node.js. Both the current and LTS version of Node.js are supported. It is recommended that you have both the current and LTS versions of Node.js installed on your system. To do that, it is recommended that you install Node.js using a Node.js version manager like nvm or nvm-windows rather than the official installer, as a version manager will allow you to switch between multiple versions of Node.js easily.Make a Roosevelt app🏭🧸 mkroosevelt The simplest way to make a Roosevelt app is to simply run the following command:npx mkrooseveltThen follow the prompts to decide whether to make a multi-page app, static site generator, or a single page app.Other ways to make Roosevelt apps🏭🧸 generator-roosevelt What the mkroosevelt command does under the hood is call the Roosevelt app generator, a command line script based on Yeoman, to create a sample Roosevelt app for you. You could also install the app generator to your system if you like. To do that, first globally install Yeoman and the Yeoman-based Roosevelt app generator:npm i -g yo generator-rooseveltThen create a Roosevelt app using the Roosevelt app generator:yo rooseveltThen follow the prompts.Create a Roosevelt app manuallyIt is also possible to create a Roosevelt app without using the app generator. This will result in a more minimalist default configuration (e.g. no CSS or JS preprocessors enabled by default).To do that:First create a new folder and cd into it.Then npm i roosevelt. This will create a node_modules folder with Roosevelt and its bare minimum dependencies.Create a file named app.js.Put this code in app.js:(async () => {   await require('roosevelt')({     makeBuildArtifacts: true   }).startServer() })()Then node app.js. If the makeBuildArtifacts parameter is set to true like the above code example, an entire Roosevelt app with bare minimum viability will be created and the server will be started.Default directory structureBelow is the default directory structure for an app created using the Roosevelt app generator.Application logicapp.js or build.js: Entry point to your application. Feel free to rename this, but make sure to update package.json's references to it. It defaults to app.js when building a multi-page app or a single page app. It defaults to build.js when building a static site generator.lib: A folder for any includable JS files that don't belong in any of the other directories. It has been added to the require stack so you can simply require('lib/someFile').mvc: Folder for models, views, and controllers.controllers: Folder for controller files; the \"C\" in MVC. This is where your HTTP routes will go.models: Folder for model files; the \"M\" in MVC. This is where you will get data to display in your views e.g. by querying a database or do other business logic.views: Folder for view files; the \"V\" in MVC. This is where your HTML templates will go.Static filesstatics: Folder for source CSS, image, JS, and other static files. By default some of the contents of this folder are symlinked to the public folder, which you can configure via params.css: Folder for source CSS files.images: Folder for source image files.js: Folder for source frontend JS files.pages: Folder for HTML templates that get rendered as static pages and deposited into the public folder.Build artifacts.build: Folder for build artifacts.preprocessed_statics: Static files that have been preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled.preprocessed_views: View files that have had their uses of web components progressively enhanced using the progressively-enhance-web-components module and/or preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled.The output JS files from the clientControllers or clientViews features.public: All contents within this folder will be exposed as static files. For the most part, the contents of this folder will be populated from the statics folder. This folder is added to .gitignore by default because it is considered a build artifact.Application infrastructure.gitignore: A standard file which contains a list of files and folders to ignore if your project is in a git repo. Delete it if you're not using git. The default .gitignore file contains many common important things to ignore, however you may need to tweak it to your liking before committing a fresh Roosevelt app to your git repo.node_modules: A standard folder created by Node.js where all modules your app depends on (such as Roosevelt) are installed to. This folder is created when installing dependencies using the npm i command. It is added to .gitignore by default because it is considered a build artifact.package.json: A file common to most Node.js apps for configuring your app.package-lock.json: An auto-generated file common to most Node.js apps containing a map of your dependency tree. This is created after you run npm i for the first time. Once the file exists within your project, you can run npm ci instead of npm i when installing dependencies, which will be more performant and will result in reproducible builds that always have the same versions of every dependency, including downstream dependencies.rooseveltConfig.json: Where your Roosevelt config is stored and what your params are set to. These values can be overridden when calling Roosevelt's constructor.secrets: A folder for \"secret\" files, e.g. session keys, HTTPS certs, passwords, etc. It is added to .gitignore by default because it contains sensitive information, so it should not be committed to git."})
window.siteTexts.push({file: "docs/minify-html-attributes/latest/index.html", title: "HTML attribute minifier (latest)", text: "💫 minify-html-attributes A Node.js module that will minify HTML attribute class names, IDs, and data-* attributes in a coordinated fashion across your HTML, CSS, and JS files. This is useful if you want to minify your code even more than standard minifiers do, or if you want to obfuscate your code and make it harder to read, reverse engineer, or repurpose.This module is a pre-minifier that focuses only on HTML class names, IDs, and data-* attributes. It will not minify the rest of your code. As such, this tool should be run on your code before you run it through your standard minifier(s). You could do it in the opposite order if you like, but the outputs from this module will not be minified even if the inputs were.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well.Specific modificationsThis module renames:class attribute values.id attribute values.data-* attribute names.Any other attributes you specify using the extraAttributes param.The new names will be renamed to the shortest possible value, e.g. a, b, c, etc.This module then updates:In HTML files:Attributes that reference any IDs that have been renamed. Attributes that reference IDs are: for, form, headers, itemref, list, usemap, aria-activedescendant, aria-controls, aria-describedby, aria-labelledby, and aria-owns.Inline CSS code in <style> tags that references any renamed attributes.Inline JS code in <script> tags that references any renamed attributes.Inline JS code in event handler attributes like onclick, onmouseover, etc that references any renamed attributes.In CSS files and inline CSS code:Selectors that reference any renamed attributes.CSS properties with attr() function calls that reference any renamed attributes.CSS variables that store references to any renamed attributes.In JS files and inline JS code:JS code that references any renamed attributes.Inline HTML in the JS that references any renamed attributes.Inline CSS in the JS that references any renamed attributes.CaveatsThis module works by running your HTML, CSS, and JS files through a series of parsers that generate abstract syntax trees of your code for analysis.That means it will work best when:Your HTML code is either plain HTML or using a templating system that doesn't break the DOM parser.Your CSS code is either plain CSS or written in a CSS-compatible superset language that doesn't break the CSS parser.For HTML and CSS those limitations shouldn't present a major problem in most web app architectures, but JavaScript is where things might get messy.This module does its best to detect when you reference any classes, IDs, or data-* attributes in your JavaScript — including when you're doing this by assembling the reference from a series of variables — and will update the references accordingly. But there are probably edge cases this module doesn't handle yet.For best results, simplify any DOM manipulation code you write that references classes, IDs, or data-* attributes as much as possible. If you find an edge case this module doesn't handle yet, file an issue, or better yet submit a pull request with a failing test for the scenario you would like to work. Or even better submit a PR with the code fix too!"})
window.siteTexts.push({file: "docs/multi-db/latest/index.html", title: "Multi-DB (latest)", text: "🐙 multi-db-driver A thin abstraction around selected Node.js database drivers to normalize their APIs to one simplified common API. This makes it possible to write a Node.js app that supports multiple databases by configuration with minimal additional boilerplate needed per additional database.Multi-DB currently supports MariaDB, MySQL, PostgreSQL, PGlite, and SQLite.Features and design philosophySwitch to another database without code changesSuppose you use pg to connect your app to a PostgreSQL database but later want to reconfigure your app to use a MariaDB database instead using the mariadb module. To switch to the new database, you're looking at significant code changes to your app because there are significant API differences between the two database driver modules. But if you use Multi-DB instead of working with the database driver directly, you can switch databases with a simple configuration change, similar to an ORM.Support multiple databases at the same time without committing to the heavy abstractions of an ORMIf you want the deployer of your app to be able to choose which database to use (e.g. some prefer PostgreSQL, others prefer MySQL, etc), you're often stuck with coding your app using an ORM, but ORMs are too heavy for many use cases. Most SQL queries are fairly universal and will execute in any SQL-based database with little to no modification. For example, every SQL database supports select * from some_table with no syntax differences. Why abstract that around an ORM? As such, developers should be able to support multiple databases while still being able to just write SQL instead of committing to an ORM's entire set of abstractions that take the ability to directly write SQL queries away from you.The most common syntax difference between the most common SQL queries is the query parameter syntax difference between PostgreSQL and other databases. Both PostgreSQL and PGlite requires you to use the $1 $2 $3 etc syntax for parameterized queries, but other databases permit the use of ? for parameterized queries instead. To resolve that syntax difference, this module adds support for ? query parameter syntax to PostgreSQL and PGlite to make it easier to write universal queries that can execute against all supported databases.There will of course be unavoidable syntax differences for advanced queries. So by default Multi-DB will encourage you to write universal queries, but in cases where you need to call out a separate query for a specific database, you can do so with minimal boilerplate so that you only need to add additional complexity to your queries as-needed.Multi-DB also normalizes the top level query result object structure to one format as well so the way you get the result rows is the same across all database drivers.Reduce boilerplate, even if you only want to support one databaseThis module also makes life easier for you when you're using only one database too by automating the database connection procedure, pooling procedure, and providing a set of command line scripts to automate common setup and teardown tasks.Automatic common credential guessing to ease developmentA common problem on development teams with developers that use different operating systems is the default admin credentials on their local instance of PostgreSQL, MySQL, etc might be slightly different on a per instance basis, so no single default config will successfully connect to everyone's local database unless every developer on the team manually resets their admin credentials to something everyone on the team agrees to use. Multi-DB bypasses this problem by attempting to connect with the specified config first, but then if that fails it will attempt to connect with a series of common defaults instead.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/node-php-runner/latest/index.html", title: "Node.js PHP runner (latest)", text: "🐘 php This module allows you to run PHP code in Node.js in various ways:Run PHP scripts.Run PHP scripts and pass them JSON data from Node.js.Use PHP as a view engine (templating system) for Express framework applications.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/progressively-enhance-web-components/latest/index.html", title: "SSR web components (latest)", text: "🕸️ progressively-enhance-web-components A template file preprocessor for progressively enhancing web components in Node.js.It works by reading a directory of HTML templates for your web application, identifying any web components, and replacing custom element invocations with fallback markup that will work if JavaScript is disabled which will then be progressively enhanced into the desired web component when the JavaScript loads.This allows you to use web components in server-side templating the same way you would with client-side templating without creating a hard dependency on JavaScript for rendering templates with web components and without having to write two different templates for each context.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well.TechniqueTo leverage this module's progressive enhancement technique, you will need to follow some simple rules when authoring your web component:Always define the markup structure using a <template> element. The definition can exist anywhere in any of your templates, but the definition must exist.The template element you create to define your web component must have an id matching the name of the web component. So <my-component> must have a corresponding <template id=\"my-component\"> somewhere in your templates.Use ${templateLiteral} values for values in your <template> markup. See \"Usage\" for more details."})
window.siteTexts.push({file: "docs/roosevelt-logger/latest/index.html", title: "Roosevelt logger (latest)", text: "🧸🪵 roosevelt-logger Intuitive, attractive logger for Node.js applications based on Winston.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/semantic-forms/latest/index.html", title: "Semantic Forms (latest)", text: "🎯 semantic-forms A pattern library of attractive forms for your website with the following design goals:Attractive, modern float label visual design.Responsive layout based on modern CSS grid technique.Clear fields.Light and dark mode.Invalid field styling.Good accessibility.Semantic HTML (no div soup).Uses a progressive enhancement approach so that core functionality and most of the features still work with JavaScript disabled.Sets no global styles and is scoped by a single class name semanticForms applied to <form> elements.No dependencies.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/single-page-express/latest/index.html", title: "Single Page Express (latest)", text: "📄 single-page-express A client-side implementation of the Express route API. It works by hijacking links and form submits, then providing a direct imitation of the Express route API to handle \"requests\" (click or submit events) and issue \"responses\" in the form of DOM updates.When a single-page-express route is triggered, it will update the browser history state to match the route accordingly, update the scroll position appropriately, set focus appropriately, will start a view transition to animate the DOM updates, and there are hooks available to customize the animations as well. If view transitions are not supported in the browser, the page will transition, but it will not animate unless you set a custom animation using another animation technique.This allows you to write isomorphic (aka universal, amphibious, etc) router code that can be shared verbatim on the client and the server in your Express application.When you combine this with a JS-based templating system that can run on the client and server as well, that will enable you to write Express-based single page apps that support both server-side and client-side rendering while maximizing code re-use in both contexts without having to use a big JS framework to accomplish the task instead.You can also use this module in purely frontend contexts without an Express server behind it (e.g. an Electron app).This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well.Why this instead of…single-page-express has several benefits over other popular single page app architecture approaches, such as:All routes can very easily be either server-rendered or rendered client-side without duplicating efforts since all the route and template code can be shared with both the server and client.Unlike other SPA framework approaches that support server-rendering, this approach yields a very small dependency tree and thus very small frontend bundle sizes. Hello world will be measured in tens of kilobytes, not hundreds, and certainly not megabytes.Likewise there is very little complexity to the architecture. If you know how to use Express, then it won't take you long to learn how to use this module on the frontend too.Like Express, this module is unopinionated about what templating engine you use for rendering HTML templates. Use any templating engine that supports Express.The default render method includes many smart defaults, including easy hooks for setting the page title, updating children of the <head> tag, automatic support for announcing template renders as new pages to screen readers, setting browser focus to the correct element, and more. The specifics of the default render method's behavior are detailed below, and you can replace the default render method with your own if you prefer different behavior.Don't build a SPA (single page app), build a SPE (single page Express) app!"})
window.siteTexts.push({file: "docs/source-configs/latest/index.html", title: "Source Configs (latest)", text: "🎛 source-configs A Node.js module that allows you to declaratively define a hierarchy of configuration values for your app from command line arguments, environment variables, or defaults based on a JSON schema you define within your app.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/teddy/latest/index.html", title: "Teddy templating engine (latest)", text: "🧸 teddy Teddy is the most readable and easy to learn templating language there is!Or put a more technical way, Teddy is an easy to read, HTML-inspired, mostly logic-less DOM templating engine with support for both server-side and client-side templating.It uses HTML-like <tags> for rudimentary templating logic and Teddy Roosevelt's facial hair for {variables}.Why yet another templating engine?Good question.Here's why:Other popular templating engines are too crypticAre you tired of all those unnecessarily cryptic templating systems out there that look like this?<h1>{{header}}</h1> {{#bug}} {{/bug}}  {{#items}}   {{#first}}     <li><strong>{{name}}</strong></li>   {{/first}}   {{#link}}     <li><a href=\"{{url}}\">{{name}}</a></li>   {{/link}} {{/items}}  {{#empty}}   <p>The list is empty.</p> {{/empty}}...Or this?{{#each comments}} <h2><a href=\"/posts/{{../permalink}}#{{id}}\">{{title}}</a></h2> <div>{{body}}</div> {{/each}}...Or this?{#names}{.}{@idx}{.}{/idx}{@sep}, {/sep}{/names}Want something simpler and more readable so you can stop wasting time memorizing what all those funky symbols do so you can focus more on getting actual work done?Well you're not the only one.Teddy, symbol-buster extraordinaireTeddy the trust-buster was a man of the people, curtailing the abuse of monopolists. As the most badass President of all-time, there's no way he'd put up with all this indecipherable templating nonsense.As such, Teddy the templating engine is an engine of the people, curtailing the abuse of indecipherable templating systems. Teddy trust-buster extraordinaire is now symbol-buster extraordinaire.Here's how:More concise {variable} syntax. One curly bracket. Not two, not three, no pound signs, no question marks, no backticks, no gang signs, and no hieroglyphs.An <include> tag for layout templates and partials which accepts arguments via child <arg> elements.Flow control tags: <if>, <unless>, <elseif>, <elseunless>, and <else> for basic templating logic.A <loop> tag for looping.Server-side comments using <!--! this syntax --> or {! this syntax !} which are stripped out at the template compilation stage.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/check-if-CSS-is-disabled/latest/changelog/index.html", title: "Check if CSS is disabled — changelog (latest)", text: "2.0.2Fixed a bug that would prevent the module from detecting new <link> tags inserted into the page after the DOM loads.Fixed a bug that would cause the module to remove CSS files overly aggressively.2.0.1Fixed docs issues.Fixed bundling issue.Updated dependencies.2.0.0Added feature to detect if stylesheets failed to load. If a CSS file fails to load, this module will emit an event called cssDisabled.Altered default behavior to take action if CSS is disabled:If CSS is disabled at the browser level, this module will throw a JS error to prevent any further JS from executing.If a CSS file fails to load, this module will remove all <link> tags and <style> tags from the DOM and emit the cssDisabled event so that you can undo any DOM manipulations and then stop any further JS from executing yourself.Added a justCheck param to restore the previous default behavior of just checking if CSS is disabled. The new cssDisabled event will still fire if justCheck is set.Refactored the module considerably.Updated dependencies.1.0.0First version."})
window.siteTexts.push({file: "docs/check-if-CSS-is-disabled/latest/usage/index.html", title: "Check if CSS is disabled — usage (latest)", text: "Installnpm install check-if-css-is-disabledThe package is distributed with the following builds available:dist/check-if-css-is-disabled.cjs: CommonJS bundle: const cssIsDisabled = require('check-if-css-is-disabled')dist/check-if-css-is-disabled.js: Standalone bundle that can be included via <script> tags. Declares a global variable called: checkIfCssIsDisableddist/check-if-css-is-disabled.min.js: Minified standalone bundle that can be included via <script> tags. Declares a global variable called: checkIfCssIsDisableddist/check-if-css-is-disabled.mjs: ES module: import cssIsDisabled from 'check-if-css-is-disabled'dist/check-if-css-is-disabled.min.mjs: Minified ES module: import cssIsDisabled from 'check-if-css-is-disabled/min'UsePlace this <script> tag with a small amount of inline JS before any <link> tags in your HTML:<script>window.addEventListener('error', (event) => { if (event?.target?.tagName === 'LINK') { window.linkTagError = true } }, true)</script>That will make it possible for this library to listen for any CSS files that fail to load.It's important for that script to be inlined before any <link> tags so that if any <link> tag fails to load, this module will be made aware of that even if this module is initialized after the CSS files are loaded or fail to load.Then in your JavaScript, include this module before any other JS executes. Here's an example using the CommonJS version:// this will stop the JS from executing if CSS is disabled or a CSS file fails to load; it will also remove any existing CSS from the DOM require('check-if-css-is-disabled')()By default, this module will take the following actions in response to CSS being disabled or any <link> tag failing to load:If CSS is disabled at the browser level, this module will throw a JS error to prevent any further JS from executing.If a CSS file fails to load at any time during your application's execution, this module will remove all <link> tags and <style> tags from the DOM and emit the cssDisabled event so that you can undo any DOM manipulations and then stop any further JS from executing yourself.You can exempt certain <link> or <style> tags from being removed by supplying a list of IDs to params, e.g. { exemptedIds: ['someTagToKeepById', 'someOtherTagToKeepById', 'etc'] } where an example tag to not remove would be <style id=\"someTagToKeep\">...</style>.To listen for the cssDisabled event, do this:window.addEventListener('cssDisabled', (event) => {   // undo any DOM manipulations and then stop any further JS from executing   document.body.classList.replace('js', 'no-js') // example DOM manipulation to undo   throw new Error('A CSS file failed to load at some point during the app\\'s usage. It is unsafe to execute any further JavaScript if the CSS has not loaded properly.') })You can prevent any of the above actions from being taken by supplying a justCheck flag to params e.g. { justCheck: true }, after which you can handle responding to CSS being disabled or a <link> tag not loading entirely yourself like this:const checkIfCssIsDisabled = require('check-if-css-is-disabled') const cssIsDisabled = checkIfCssIsDisabled({ justCheck: true }) // the constructor will return `true` if CSS is disabled and `false` if it is not; all params are optional if (cssIsDisabled) {   // do things if CSS is disabled }(The cssDisabled event will be emitted regardless of whether the justCheck flag is set to true or not.)"})
window.siteTexts.push({file: "docs/crossplatform-killport/latest/changelog/index.html", title: "Crossplatform killport — changelog (latest)", text: "1.0.1Made the script a bit more aggressive in its attempt to kill the process.Updated dependencies.1.0.0Initial version."})
window.siteTexts.push({file: "docs/crossplatform-killport/latest/usage/index.html", title: "Crossplatform killport — usage (latest)", text: "First make sure Node.js is installed on your system.Then, to install crossplatform-killport to your system:npm i -g crossplatform-killportKill whatever process is using port 8080:killport 8080Windows users may need to run Set-ExecutionPolicy Unrestricted on their terminal to permit the script to run. See docs from Microsoft for more information.Use via npx (this will allow you to use it without installing it to your system by downloading it from npm temporarily):npx crossplatform-killport 8080Use from within a Node.js project's root directory:node_modules/.bin/killport 8080Use from within Node.js code:const { spawnSync, } = require('child_process') spawnSync('node_modules/.bin/killport', ['8080', '--silent'], { env: process.env, shell: false, stdio: ['ignore', 'pipe', 'pipe'] })"})
window.siteTexts.push({file: "docs/express-browser-reload/latest/changelog/index.html", title: "Express browser reloader — changelog (latest)", text: "4.0.0Breaking: Forked reload to express-browser-reload which focuses exclusively on the Express use case, as opposed to reload which is a more generalized tool with more features beyond the Express world.Breaking: Altered the architecture to attach the WebSocket server to an existing Express server rather than creating a new server to run alongside it.Breaking: Removed support for some older browsers as well as checks to see if you're running an older browser to simplify the code and make it easier to maintain.Breaking: Removed all params except for route.Added a new param skipDeletingConnections which will skip purging HTTP connections on the Express server when it restarts. If you're already handling this on your Express server yourself, set this param to true to prevent errors.Refactored the code to make it simpler and easier to maintain.Updated dependencies.Previous updates before the hard fork of reload to express-browser-reload are below. The original project can be found at https://github.com/alallier/reload3.3.0 / 2024-08-14Reload command line quality of life enhancementsReload command line now supports serving .html files when only / is present in the browser. See: https://github.com/alallier/reload/pull/326Reload command line now uses supervisor instead of nodemon for server side file watching - See: https://github.com/alallier/reload/pull/367Reload command line now watches sub-directories - See: https://github.com/alallier/reload/pull/367Reload command line now supports ignoring directories and files. See: https://github.com/alallier/reload/pull/370Reload command line now shows help if invalid flag is provided. See: https://github.com/alallier/reload/pull/369Refactored how file serving works in reload-server to make it more performant and easier to read. See: https://github.com/alallier/reload/pull/326Removed codecov dependency for coverage reporting in favor of native GitHub Action. See: https://github.com/alallier/reload/pull/3663.2.2 / 2024-08-12A bunch of dependency updates and some project maintenanceFixed tests and updated CI (drop 14.x and 16.x | added 20.x and 22.x) - See: https://github.com/alallier/reload/pull/356Updated actions/setup-node action to v4 - See: https://github.com/alallier/reload/pull/350Updated actions/checkout action to v4 - See: https://github.com/alallier/reload/pull/347Updated ws from ~8.11.0 to ~8.18.0 - See: https://github.com/alallier/reload/pull/354 and https://github.com/alallier/reload/pull/360Updated sinon from 15.0.1 to 18.0.0 - See: https://github.com/alallier/reload/pull/343 and https://github.com/alallier/reload/pull/364Updated standard from 17.0.0 to 17.1.0 - See: https://github.com/alallier/reload/pull/345Updated mocha from 10.2.0 to 10.7.3 - See: https://github.com/alallier/reload/pull/359Updated codecov from 3.8.2 to 3.8.3 - See: https://github.com/alallier/reload/pull/358Updated open from 8.4.0 to 8.4.2 - See: https://github.com/alallier/reload/pull/358Updated minimist from 1.2.7 to 1.2.8 - See: https://github.com/alallier/reload/pull/341Updated commander from ~9.4.0 to ~12.1.0 - See: https://github.com/alallier/reload/pull/351Updated cli-color from 2.0.3 to 2.0.4 - See: https://github.com/alallier/reload/pull/357Updated express from 4.18.2 to 4.19.2 - See: https://github.com/alallier/reload/pull/352Updated nyc from 15.1.0 to 17.0.0 - See: https://github.com/alallier/reload/pull/3623.2.1 / 2023-01-02Happy New Year!Drop 12.x and add 18.x on CI - See: https://github.com/alallier/reload/pull/328Update CI actions/checkout to v3 - See: https://github.com/alallier/reload/pull/318Update CI actions/setup-node to v3 - See: https://github.com/alallier/reload/pull/319Dependency UpdatesUpdate ws from ~7.4.0 to ~8.11.0 - See: https://github.com/alallier/reload/pull/307Update express from 4.17.1 to 4.18.2 - See: https://github.com/alallier/reload/pull/315Update finalhandler from ~1.1.1 to ~1.2.0 - See: https://github.com/alallier/reload/pull/316Update serve-static from ~1.14.0 to ~1.15.0 - See: https://github.com/alallier/reload/pull/317Update commander from ~7.2.0 to ~9.4.0 - See: https://github.com/alallier/reload/pull/332Update mocha from 9.0.0 to 10.2.0 - See: https://github.com/alallier/reload/pull/333Update sinon from 11.1.1 to 15.0.1 - See: https://github.com/alallier/reload/pull/334Update standard from 16.0.3 to 17.0.0 - See: https://github.com/alallier/reload/pull/335Remove url-parse dependency in favor of built in function - See: https://github.com/alallier/reload/pull/3253.2.0 / 2021-06-09CI UpdatesDropped Node 10.x and added 16.x from CI - See: https://github.com/alallier/reload/pull/298Update actions/checkout action to v2 - See: https://github.com/alallier/reload/pull/276Update actions/setup-node action to v2 - https://github.com/alallier/reload/pull/282Dependency UpdatesUpdate commander from ~6.1.0 to ~7.2.0 - See: https://github.com/alallier/reload/pull/283Update url-parse from ~1.4.4 to ~1.5.0 - See: https://github.com/alallier/reload/pull/291Update open from ^7.0.0 to ^8.0.0 - See: https://github.com/alallier/reload/pull/292/filesUpdate ws from ~7.3.0 to ~7.4.6 - See: https://github.com/alallier/reload/pull/294Update sinon from 9.1.0 to 11.1.1 - See: https://github.com/alallier/reload/pull/295/filesUpdate mocha from 8.4.0 to 9.0.0 - See: https://github.com/alallier/reload/pull/297/filesUpdate downstream y18n from 4.0.0 to 4.0.1 - See: https://github.com/alallier/reload/pull/2883.1.1 / 2020-09-29Updated mocha from 7.1.2 to 8.1.3 - See: https://github.com/alallier/reload/pull/255Updated codecov from 3.7.0 to 3.7.2 - See: https://github.com/alallier/reload/pull/258 and https://github.com/alallier/reload/pull/266Updated commander from 5.1.0 to 6.1.0 - See: https://github.com/alallier/reload/pull/259 and https://github.com/alallier/reload/pull/265Updated sinon from 9.0.2 to 9.1.0 - See: https://github.com/alallier/reload/pull/2643.1.0 / 2020-06-10Changed passphrase option from https.p12.passphrase to https.passphrase so it can be used for certAndKey configurations as well - See: https://github.com/alallier/reload/pull/251Tweaked CI configuration file so GitHub Actions CI will also run on pull requests - See: https://github.com/alallier/reload/pull/250Updated nyc from 15.0.1 to 15.1.0 - See: https://github.com/alallier/reload/pull/249Fix the repository URL in package.json - See: https://github.com/alallier/reload/pull/2523.0.6 / 2020-06-10Contains the changes from 3.1.0 but was semantically versioned incorrectly. It is recommended not to use this version and upgrade to 3.1.03.0.5 / 2020-05-25Fixed bug where command line Reload where reload was writing to a file properly that broke on Node 14.x - See: https://github.com/alallier/reload/pull/245GitHub Actions - See: https://github.com/alallier/reload/pull/247Added Node 14.x to GitHub Actions CIRemoved Node 13.x from GitHub Actions due to end of lifeDependency UpdatesUpdated codecov from 3.6.1 to 3.7.0 - See: https://github.com/alallier/reload/pull/235 and https://github.com/alallier/reload/pull/246Updated commander from 4.1.0 to 5.1.0 - See: https://github.com/alallier/reload/pull/246Updated minimist from 1.2.0 to 1.2.3 (Security package-lock.json) - See: https://github.com/alallier/reload/pull/236Updated mocha from 7.0.0 to 7.1.2 - See: https://github.com/alallier/reload/pull/233Updated sinon from 8.0.4 to 9.0.2 - See: https://github.com/alallier/reload/pull/231 and https://github.com/alallier/reload/pull/234Updated standard from 14.3.1 to 14.3.4 - See: https://github.com/alallier/reload/pull/238Updated nyc from 15.0.0 to 15.0.1 - See: https://github.com/alallier/reload/pull/242Updated ws from 7.2.0 to 7.3.0 - See: https://github.com/alallier/reload/pull/2443.0.4 / 2019-01-13Migrated CI to GitHub Actions - See: https://github.com/alallier/reload/pull/222Moved sample app to a new project - See: https://github.com/alallier/reload/pull/229Updated nyc from 14.1.1 to 15.0.0 - See: https://github.com/alallier/reload/pull/224Updated sinon from 7.5.0 to 8.0.4 - See: https://github.com/alallier/reload/pull/225Updated mocha from 6.2.2 to 7.0.0 - See: https://github.com/alallier/reload/pull/226Updated commander from ~3.0.0 to ~4.1.0 - See: https://github.com/alallier/reload/pull/220Removed tree-kill dependency - See: https://github.com/alallier/reload/pull/2233.0.3 / 2019-10-20Updated cli-color from ~1.4.0 to ~2.0.0 - See: https://github.com/alallier/reload/pull/212Updated open from ^6.1.0 to ^7.0.0 - See: https://github.com/alallier/reload/pull/213Updated mocha from 6.2.1 to 6.2.2 - See: https://github.com/alallier/reload/pull/214Updated ws from ~7.1.0 to ~7.2.0 - See: https://github.com/alallier/reload/pull/2153.0.2 / 2019-10-06Updated express sample app's body-parser from 1.18.3 to 1.19.0 - See: https://github.com/alallier/reload/pull/193Updated ws from ~6.2.1 to ~7.1.0 - See: https://github.com/alallier/reload/pull/194Updated nyc from 14.0.0 to 14.1.1 - See: https://github.com/alallier/reload/pull/195Updated serve-static from ~1.13.2 to ~1.14.0 - See: https://github.com/alallier/reload/pull/196Updated codecov from 3.3.0 to 3.6.1 - See: https://github.com/alallier/reload/pull/197Updated express in reload and sample from 4.16.4 to 4.17.1 - See: https://github.com/alallier/reload/pull/198Updated mocha from 6.1.4 to 6.2.1 - See: https://github.com/alallier/reload/pull/203Updated sinon from 7.3.2 to 7.5.0 - See: https://github.com/alallier/reload/pull/204Updated commander from ~2.20.0 to ~3.0.0 - See: https://github.com/alallier/reload/pull/205Updated standard from 12.0.1 to 14.3.1 - See: https://github.com/alallier/reload/pull/206Use package.json files instead of .npmignore. See: https://github.com/alallier/reload/pull/209Update CONTRIBUTING.md file for collaborators to ensure the sample app's reload version matches reload upstream. See: https://github.com/alallier/reload/pull/2103.0.1 / 2019-04-20Version 3.0.1AddedRenovate for auto dependency updatinghttps://github.com/alallier/reload/pull/173https://github.com/alallier/reload/pull/178Codecov for coverage reportshttps://github.com/alallier/reload/pull/174npmignorehttps://github.com/alallier/reload/pull/176Contributing Documenthttps://github.com/alallier/reload/pull/177FixedUpdated documentation to better reflect new API with promiseshttps://github.com/alallier/reload/pull/189Added reload as dependency to sample apphttps://github.com/alallier/reload/pull/188Moved Mocha to dev dependencieshttps://github.com/alallier/reload/pull/187Updatedmocha to v6.1.4https://github.com/alallier/reload/pull/179nyc to v14https://github.com/alallier/reload/pull/183sinon to v7.3.2https://github.com/alallier/reload/pull/1843.0.0 / 2019-04-07Version 3.0.0Consult Migration Guide for help with updating from Version 2.x to 3.xBreaking/RemovedRemoved deprecated parameters (Reload no longer takes the server argument and will error if you provide it)Removed support for Node versions 4, 5, 6, 7, 8, and 9Breaking/AddedReload now returns a promiseFunctions in the return API also return promisescloserServerstartWebSocketServerReload returns errors in promisesAddedAdded unit tests. (See: https://github.com/alallier/reload/issues/42)Added coverage analyzerCoverage 100% on reload.js fileAdded node 10 and 11 to the official supported listAdded support for HTTPSCert and Key or PFX/P12Note: This was available in version 1 and then was dropped in Version 2Added sample app README (See: https://github.com/alallier/reload/issues/45)Added MIGRATION_GUIDE to help with migrating across major versions of reloadAdded force wss optionCI jobs now use npm ci isntall (See: https://github.com/alallier/reload/issues/158)ChangedUpdates dependenciesClosed these issuesHTTPS - https://github.com/alallier/reload/issues/143Unit tests - https://github.com/alallier/reload/issues/42Document Fallback flag - https://github.com/alallier/reload/issues/169Drop Node 4 support - https://github.com/alallier/reload/issues/156Documentation on how to use sample app - https://github.com/alallier/reload/issues/45Use npm ci install - https://github.com/alallier/reload/issues/1582.4.0 / 2018-12-02Added new -f or --fallback command-line flag. See: MR https://github.com/alallier/reload/pull/167. Issue: https://github.com/alallier/reload/issues/164Allow HTML pages to be routed with .html. See: MR https://github.com/alallier/reload/pull/167. Issue: https://github.com/alallier/reload/issues/1662.3.1 / 2018-08-06Fixed url-parse vulnerability. See: https://github.com/alallier/reload/pull/1602.3.0 / 2018-06-11Added wss to return API. See: https://github.com/alallier/reload/pull/148Added watch flag to command line. See: https://github.com/alallier/reload/pull/155Security updatesUpdated finalhandler from ~1.0.3 to ~1.1.1. See: https://github.com/alallier/reload/pull/154Replaced open with opn. See: https://github.com/alallier/reload/pull/154Updated serve-static from ~1.12.3 to 1.13.2. See: https://github.com/alallier/reload/pull/154Updated ws from ~3.0.0 to ~5.2.0. See: https://github.com/alallier/reload/commit/3310a66f80e04e48247e5c2ca4a2f4f12780294fUpdated standard from ^10.0.2 to ^11.0.1. See: https://github.com/alallier/reload/commit/073e91b33a00dcb37c7eb5fa7601cd71f7ea34e92.2.2 / 2017-08-20Fixed bug that caused HTML files to not be served when using directory flag (reload command line). See: https://github.com/alallier/reload/pull/1392.2.1 / 2017-08-05Fixed regression causing reload command line to only serve HTML files. See: https://github.com/alallier/reload/pull/1342.2.0 / 2017-07-27Dropped express as a dependency (in reload command line). Reload now uses a vanilla node http server to achieve the same result. This update for the command line offers no changes to the end user and simply modifies the underlying code. See: https://github.com/alallier/reload/pull/1322.1.0 / 2017-07-25Added the ability to have the WebSocket server start wait. (For more information read about the webSocketServerWaitStart parameter) See: https://github.com/alallier/reload/pull/1302.0.1 / 2017-07-20Adjusted wording in README. See: https://github.com/alallier/reload/pull/123Removed MacOS Travis Building. See: https://github.com/alallier/reload/pull/125Fixed bug when running command line on port 80. See: https://github.com/alallier/reload/pull/1282.0.0 / 2017-07-09See V2.0.0 PR https://github.com/alallier/reload/pull/118AddedAdded object based parameters (Issue #77 / Originally solved in PR #101 and refactored in #104)Added port configuration (Issue #60 / Originally solved in PR #68 and refactored in #104)Added timestamp to reload command line reloading (Issue #7 / PR #78)Added node 8 support (Issue #106 / PR #119)Added table of contents to README (Issue #103 / PR #105)Added return API to README (PR #121)ModifiedAbstracted reload call to an index.js file. Index file now calls reload.js source file. This is to abstract the reload command line calling with a third argument that is now private and not apart of the public API (PR #117)Update dependencies to latest and add package-lock.json files (PR #109)Audited and refactored return API (Issue #120 / PR #121)RemovedDrop support for server and just use ports (Issue #102 / PR #104)Removed support of node 0.1 and 0.12 (Issue #73 / PR #86)Separate server and app initialization into two parts. (This was originally fixed in PR #71 but was reversed in PR #104 when the decision to drop server was made.)API Breaking ChangesThis version makes breaking changes to the reload API. The only required argument to reload now is app. This makes reload a lot easier to use. Reload takes a maximum of two arguments app and an opts (options) object with the following optional parameters, port, route, and verbose. Reload runs on default port 9856 unless otherwise specified in the opts object.How to upgrade from Version 1 to Version 2Before Version 2 reload always attached to your server's port by passing the server in a argument to reload. We have now dropped support for server and reload runs on ports only. Reload now has one required parameter app and one optional parameter opts an object of reload options. Below are two upgrade examples for the only two possible 1.x configurations.Upgrade with required arguments: reload(server, app) becomes reload(app)Upgrade with both required arguments and the one optional argument: reload(server, app, true) becomes reload(app, {verbose: true})It is important to note that reload only uses ports now. So upgrading using the examples above will have reload run on it's default port 9856. If you want to run reload on a different port you need to specify a port in the opts object like: reload(app, {port: 9852})Most people can just use the default settings, allowing reload(app) to work in most cases.Please refer to the full API in the README.1.1.7 / 2017-06-28Repository ownership was transfered from jprichardson to alallierUpdated Travis badge after ownership change. See: https://github.com/alallier/reload/pull/116Updated AppVeyor badge after ownership change. See: https://github.com/alallier/reload/pull/112Updated README after owernship change. See: https://github.com/alallier/reload/pull/115Changed style of npm badge to match the others. See: https://github.com/alallier/reload/pull/1111.1.6 / 2017-06-18Add Mac building in Travis. See https://github.com/jprichardson/reload/pull/981.1.5 / 2017-05-13Fixed standard call so that our bin file also got tested. See https://github.com/jprichardson/reload/pull/851.1.4 / 2017-05-13Added AppVeyor to build our tests in an Windows environment. See https://github.com/jprichardson/reload/pull/921.1.3 / 2017-04-28Upgrade Standard to ~10.0.2 in order for the build to pass node 0.1 and 0.12 Also removed depricated fs.exists and replaced with fs.access See: https://github.com/jprichardson/reload/pull/751.1.2 / 2017-04-16Fix multiple websockets at once when using reload.reload(); See: https://github.com/jprichardson/reload/pull/571.1.1 / 2017-01-28Fixed undefined error log on send message. See: https://github.com/jprichardson/reload/pull/591.1.0 / 2016-11-12Added client end web socket support for https. See: https://github.com/jprichardson/reload/pull/541.0.2 / 2016-10-31Added error handling to websocket send. See: https://github.com/jprichardson/reload/pull/491.0.1 / 2016-07-15Fixed onbeforeunload event not firing in reload-client See: https://github.com/jprichardson/reload/pull/461.0.0 / 2016-06-24AddedTwo new badges to the README (code-style and npm version)Verbose mode as option for both Express and command line usageA sample app for expressModifiedRe-wrote the README to reflect all of these changesUpdated dependencies to their latest version’sFixed race condition that caused reload to spam the server when using sockets for automatic reloadingRemovedAll delays (wait, normal, and socket) (Reload is now all automatic using web sockets (no delays at all))Client side sockjs web sockets (removed sockjs) (Now using native web sockets on the client side and ws on server side)See: https://github.com/jprichardson/reload/pull/410.8.2 / 2016-06-24Fixed regression caused by Windows line endings. See: https://github.com/jprichardson/reload/pull/400.8.1 / 2016-06-05Allow reload from node server. See: https://github.com/jprichardson/reload/pull/380.8.0 / 2015-12-21fixed hostname flag. See: https://github.com/jprichardson/reload/pull/34use exts from command line. See: https://github.com/jprichardson/reload/pull/320.7.0 / 2015-10-21fixed wait flag: https://github.com/jprichardson/reload/pull/270.6.0 / 2015-10-12added hostname/ -h flag. See: https://github.com/jprichardson/reload/issues/14 and https://github.com/jprichardson/reload/pull/280.5.0 / 2015-09-28renamed delay flag to reloadDelay. See: https://github.com/jprichardson/reload/pull/26added wait flag. See: https://github.com/jprichardson/reload/pull/260.4.0 / 2015-08-17add true option to delay so that it waits indefinitely until server is up https://github.com/jprichardson/reload/pull/21express 4 routes, https://github.com/jprichardson/reload/pull/240.3.0 / 2015-07-17added option for start page. See: https://github.com/jprichardson/reload/pull/200.2.0 / 2015-06-29Added Express 4 Support0.1.0 / 2013-09-30silence sockjscreated reload bin that is useful for browser/html development0.0.2 / 2013-03-14fixed bug that caused failure on hashbang urlsset proper mime type on reload.js client side script0.0.1 / 2013-03-13Initial release."})
window.siteTexts.push({file: "docs/express-browser-reload/latest/configuration/index.html", title: "Express browser reloader — configuration (latest)", text: "APIThese are the parameters you can pass to the constructor.route [String]: What Express route to put the client-side JS file on. Default: /express-browser-reload.js.skipDeletingConnections [Boolean]: Whether to skip purging HTTP connections on the Express server when it restarts. If you're already handling this on your Express server yourself, set this param to true to prevent errors. Default: false."})
window.siteTexts.push({file: "docs/express-browser-reload/latest/usage/index.html", title: "Express browser reloader — usage (latest)", text: "Here's a full sample app:const express = require('express') const app = express()  app.get('/', (req, res) => {   res.type('text/html')   res.send(`<!doctype html> <html>   <head>     <title>express-browser-reload express sample</title>   </head>   <body>     <p>express-browser-reload express sample</p>     <!-- all you have to do is include the reload script and have it be on every page of your project -->     <!-- you do not create this route, reload creates it for you automatically -->     <script src=\"/express-browser-reload.js\"></script>   </body> </html>`) })  const server = app.listen(3000, () => console.log(`🎧 express-browser-reload express sample app server is running on http://localhost:3000`))  // params for express-browser-reload (currently set to the defaults) const params = {   route: '/express-browser-reload.js',   skipDeletingConnections: false }  require('express-browser-reload')(app, server, params)"})
window.siteTexts.push({file: "docs/express-html-validator/latest/changelog/index.html", title: "Express HTML validator — changelog (latest)", text: "1.0.1Fixed a possible crash that can happen with some variety of request objects.Updated various dependencies.1.0.0Added a new type of exceptions param called routes.Refactored the code.Updated various dependencies.0.2.5Fixed possible race condition.Updated various dependencies.0.2.4Updated various dependencies.0.2.3Updated various dependencies.0.2.2Bumped various dependencies.0.2.1Added feature to run the validator on arbitrary strings in addition to the direct Express render integration.Bumped various dependencies.0.2.0Bumped various dependencies.0.1.3Bumped various dependencies.0.1.2Changed default rules to focus less on best practices enforcement and more on validation only.Bumped various dependencies.0.1.1Changed default rules to focus less on best practices enforcement and more on validation only.Bumped various dependencies.0.1.0Released initial version."})
window.siteTexts.push({file: "docs/express-html-validator/latest/configuration/index.html", title: "Express HTML validator — configuration (latest)", text: "Optionally you can pass this module a set of configs:exceptions [Object]: A set of params that can be used to prevent validation in certain scenarios:routes [Array]: An array of routes to exclude from validation. Supports wildcard * syntax. Default: [].header [String]: A custom header that when set will disable the validator on a per request basis. Default: 'Partial'.modelValue [String]: An entry in your data model passed along with a res.render that when set will disable validation on the rendered HTML. Default: '_disableValidator'validatorConfig [Object]: html-validate configuration that determines what errors the validator looks for. The full list of available validator rules can be found here. This configuration can also be set by a .htmlValidate.json file placed in your app root directory.Default for validatorConfig:{   \"extends\": [\"html-validate:standard\"] }"})
window.siteTexts.push({file: "docs/express-html-validator/latest/usage/index.html", title: "Express HTML validator — usage (latest)", text: "First declare express-html-validator as a dependency in your app.Then require the package into your application and call its constructor, passing along your Express app:const express = require('express') const expressValidator = require('express-html-validator') const app = express() const config = {}  // generally this would be used in development mode if (process.env.NODE_ENV === 'development') {   expressValidator(app, config) }  // expressValidator should be called before defining routes app.get('/', (req, res) => {   // this html response will be validated in real time as it's sent   res.sendFile(path.join(publicDir, 'index.html')) })You can also run the validator on arbitrary strings outside of the Express context:const config = {} const expressValidator = require('express-html-validator')(config)  const someHtml = `<!DOCTYPE html> <html lang=\"en\"> <head>   <meta charset=\"UTF-8\">   <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">   <title>Some HTML that will not validate</title> </head> <body>   <p>hello world</p></p> </body> </html>`  const validationResult = expressValidator(someHtml)Since the example HTML is not valid, if you display the contents of validationResult in a browser, you will see validation errors."})
window.siteTexts.push({file: "docs/fallback-dependencies/latest/changelog/index.html", title: "Fallback dependencies — changelog (latest)", text: "1.0.3Fixed bug that resulted in hard to understand errors if git wasn't functioning properly on your system.Updated various dependencies.1.0.2Fixed bug causing old dependencies to be removed unnecessary.Fixed fallbacks not working.Updated various dependencies.1.0.1Refactored some code to tighten some things up.Updated various dependencies.1.0.0Altered fallbackDependencies to no longer install devDependencies of a given repo. You can restore this behavior by declaring it in fallbackDevDependencies instead.Added support for FALLBACKDEPENDENCIESPREFERRED_WILDCARD environment variable to move a preferred domain up to the top of list of fallback dependencies to try regardless of the order specified in the app's config.Updated various dependencies.0.1.6Backed out --omit=dev change from 0.1.5 that prevented fallback-dependencies from installing devDependencies of a given repo.0.1.5fallback-dependencies will now detect if your clone is out of date in the case of -b versioned entries. If it's out of date, it will remove the old clone and re-clone it.fallback-dependencies will no longer install devDependencies of a given repo.0.1.4You can now prevent a fallback-dependency from being installed in a situation where the repo is not a direct dependency of the root project by appending the :directOnly flag to the end of the dependency name.Various dependencies updated.0.1.3You can now skip installing dependencies of a fallback-dependency by appending the -skip-deps flag to the end of the dependency.Various dependencies updated.0.1.2Added some detection of clones sourced from specific git tags to display a more helpful error message when trying to update non-updatable clones.Various dependencies updated.0.1.1Added feature to source repo locations from a separate, external file.Various dependencies updated.0.1.0Initial version."})
window.siteTexts.push({file: "docs/fallback-dependencies/latest/configuration/index.html", title: "Fallback dependencies — configuration (latest)", text: "Clone a specific version of your fallback-dependencyTo version your fallback-dependencies, you should use git tags to stamp versions onto your commits. To clone a specific git tag, add -b tag_name to the URL, e.g. \"https://some.private.git.repo.somewhere -b 1.0.5\".Fetch devDependencies of your fallback-dependenciesBy default, fallback-dependencies will not install the devDependencies of a given repo that is cloned. If you want to do so for any repo, put it in a fallbackDevDependencies block instead of a fallbackDependencies block in your package.json.Prevent installing dependencies of fallback-dependenciesTo skip installing dependencies for a specific fallback-dependency, add -skip-deps to the end of the URL string, e.g. \"https://some.private.git.repo.somewhere -b 1.0.5 -skip-deps\".Prevent a fallback-dependency from installing its own fallback-dependenciesTo prevent a fallback-dependency from being installed in a situation where the repo is not a direct dependency of the root project, append the :directOnly flag to the end of the dependency name, e.g. \"some-private-dependency:directOnly\": [ ... ]. This will prevent repos with nested fallback-dependencies from installing their own fallback-dependencies.Let users prioritize URL list differentlyTo move a preferred domain up to the top of the list of fallback-dependencies to try regardless of the order specified in the app's config, set the environment variable FALLBACK_DEPENDENCIES_PREFERRED_WILDCARD to a string to match in the URL list."})
window.siteTexts.push({file: "docs/fallback-dependencies/latest/usage/index.html", title: "Fallback dependencies — usage (latest)", text: "First declare fallback-dependencies as a dependency of your app.Declare fallback-dependenciesNext, add a fallbackDependencies entry to your package.json alongside your dependencies, devDependencies, etc, e.g.:\"fallbackDependencies\": {   \"dir\": \"lib\",   \"repos\": {     \"some-private-dependency\": [       \"https://some.private.git.repo.somewhere\",       \"https://some.private.git.repo.somewhere.else\"     ],     \"some-other-private-dependency\": [       \"https://some.other.private.git.repo.somewhere\",       \"https://some.other.private.git.repo.somewhere.else\"     ]   } }APIdir [String]: What directory to deposit fallback-dependencies into. Default: fallback_dependencies.repos [Object of Arrays of Strings]: A list of dependencies similar to the dependencies field in package.json, but instead of supplying a string for where to fetch it, you supply an array of strings of possible locations to fetch it from. This script will attempt to fetch it from the first location, then if that fails will fallback to the second possible place to get it from, and so on until it runs out of places to try. Default: {}.reposFile [String]: Relative path to a JSON file that contains a list of repos formatted the same as the repos entry. If both repos and reposFile are supplied, the two lists will be merged. Default: {}.Example of reposFile usage:// fallback-dependencies.json {   \"some-private-dependency\": [     \"https://some.private.git.repo.somewhere\",     \"https://some.private.git.repo.somewhere.else\"   ],   \"some-other-private-dependency\": [     \"https://some.other.private.git.repo.somewhere\",     \"https://some.other.private.git.repo.somewhere.else\"   ] }All params are optional, but the module won't do anything unless you supply at least repos or reposFile.Fetch fallback-dependencies with a postinstall scriptLastly, add a postinstall script to your npm scripts to execute the fallback-dependencies script after you install other dependencies:\"scripts\": {   \"postinstall\": \"node node_modules/fallback-dependencies/fallback-dependencies.js\" },You can also write your postinstall script to fail silently if the fallback-dependencies.js file is not found for whatever reason, e.g.:\"scripts\": {   \"postinstall\": \"node -e \\\"try { require('child_process').spawnSync('node', ['node_modules/fallback-dependencies/fallback-dependencies.js'], { shell: false, stdio: 'ignore' }) } catch (e) {}\\\"\" },Writing the postinstall script that way might be a little ugly, but it's useful to do it this way if fallback-dependencies is a devDependency of your app and you don't want the postinstall script to fail when you do a production dependencies-only build."})
window.siteTexts.push({file: "docs/minify-html-attributes/latest/changelog/index.html", title: "HTML attribute minifier — changelog (latest)", text: "1.0.2Fixed a crash caused by not populating the exemptNames param.1.0.1Added option to exempt specific values from being renamed.Fixed a bug that caused name attributes to be improperly renamed.1.0.0Initial commit."})
window.siteTexts.push({file: "docs/minify-html-attributes/latest/configuration/index.html", title: "HTML attribute minifier — configuration (latest)", text: "APIIn the examples on the usage page, you can see that minify-html-attributes is called with the following params:const editedFiles = require('minify-html-attributes')({   htmlDir: './mvc/.preprocessed_views', // where your html files to process are located   cssDir: './.preprocessed_statics', // where your css files to process are located   jsDir: './.preprocessed_statics' // where your js files to process are located })Here is a breakdown of all the available params:htmlDir [String]: Location where your source HTML files are. If no HTML files are detected, this module will do nothing.cssDir [String]: Location where your source CSS files are. (Optional.)jsDir [String]: Location where your source JS files are. (Optional.)extraAttributes [Array of Strings]: Any additional HTML attributes you want to rename besides class, id, and data-*. Default [].exemptNames [Array of Strings]: Any names you want exempt from renaming. Default [].disableClassReplacements [Boolean]: Don't rename class attributes. Default: false.disableIdReplacements [Boolean]: Don't rename id attributes. Default: false.disableDataReplacements [Boolean]: Don't rename data-* attributes. Default: false.The returned editedFiles object is structured as follows:Key: the relative path of the file that was edited.type [String]: One of the following values: html, css, or js.contents [String]: The edited code."})
window.siteTexts.push({file: "docs/minify-html-attributes/latest/usage/index.html", title: "HTML attribute minifier — usage (latest)", text: "UsageInstall minify-html-attributes from npm and include it in your Node.js-based build script.Copy all your source HTML, CSS, and JS files to a location of your choice that is safe for editing.Run them through minify-html-attributes. minify-html-attributes will return an object that is a list of files that it modified. Files that were not modified will not be included in the object.Update the copied files with the new changes.Run any additional minifiers you like against the modified files as normal.Sample appHere's a full example that implements minify-html-attributes prior to running webpack and starting an Express server:const fs = require('fs-extra')  // copy all source html, css, and js to locations that are safe for editing fs.copySync('mvc/views', 'mvc/.preprocessed_views') // copy unmodified html to a modified templates directory fs.copySync('styles.css', '.preprocessed_statics/styles.css') // copy css file to the public folder fs.copySync('browser.js', '.preprocessed_statics/browser.js') // copy css file to the public folder  // load minify-html-attributes const editedFiles = require('minify-html-attributes')({   htmlDir: './mvc/.preprocessed_views', // where your html files to process are located   cssDir: './.preprocessed_statics', // where your css files to process are located   jsDir: './.preprocessed_statics' // where your js files to process are located })  // update any file that was postprocessed for (const fileName in editedFiles) {   const editedFile = editedFiles[fileName]   fs.writeFileSync(fileName, editedFile.contents) }  // copy preprocessed assets to final location  // html: no need for html files because they are edited in-place in ./mvc/.preprocessed_views  // css: just copy the file to the public folder; you could also do something fancier like run it through a preprocessor fs.copySync('.preprocessed_statics/styles.css', 'public/styles.css') // copy css file to the public folder  // js: bundle preprocessed js after it is preprocessed const webpack = require('webpack') const path = require('path') const webpackConfig = {   mode: 'production',   entry: './.preprocessed_statics/browser.js',   output: {     filename: 'bundle.js',     path: path.resolve(__dirname, 'public'),     libraryTarget: 'umd'   },   devtool: 'source-map' } const compiler = webpack(webpackConfig) compiler.run((err, stats) => {   if (err || stats.hasErrors()) {     console.error('Webpack build failed:', err || stats.toJson().errors)   } else {     // configure express     const express = require('express')     const app = express()     app.use(require('body-parser').urlencoded({ extended: true })) // populates req.body on requests     app.engine('html', require('teddy').__express) // set teddy as view engine that will load html files     app.set('views', 'mvc/.preprocessed_views') // set template dir     app.set('view engine', 'html') // set teddy as default view engine     app.use(express.static('public')) // make public folder serve static files      // load express routes     require('./mvc/routes')(app)      // start express server     const port = 3000     app.listen(port, () => {       console.log(`🎧 express sample app server is running on http://localhost:${port}`)     })   } })Here's how to run the sample app:cd sampleApps/expressnpm cicd ../../npm run express-sampleOr npm run sampleOr cd into sampleApps/express and run npm ci and npm startGo to http://localhost:3000"})
window.siteTexts.push({file: "docs/multi-db/latest/changelog/index.html", title: "Multi-DB — changelog (latest)", text: "1.0.2Altered the logic of the query method to perform a transaction if params is supplied an array of objects or an array of arrays.Fixed a CLI text alignment issue.Updated dependencies.1.0.1Fixed README typo regarding the npm package name.1.0.0Initial commit."})
window.siteTexts.push({file: "docs/multi-db/latest/configuration/index.html", title: "Multi-DB — configuration (latest)", text: "Creating a Multi-DB configThe following params are available when creating your Multi-DB config file or passing params via the constructor:Required paramsdefault [String]: Which database your app will use by default.Available options:mariadbmysqlpostgrespglitesqlite[mariadb|mysql|postgres|pglite|sqlite] [Object]: Configs specific to each database.config [Object]: Which config to attempt to connect to your database with by default. This object will be passed directly to the database driver, so the values should be set to whatever the database driver expects you to use to connect (e.g. host, username, password, database, other database configuration options).It is recommended that you set the user to a less privileged user, typically meaning this user should be able to insert and delete data, but not create, alter, or drop tables.If the credentials you specify do not exist, they can be created from the CLI scripts, which will use the adminConfig to connect in order to create the less privileged credentials.adminConfig [Object]: Same as config but you should configure it to use more privileged credentials, e.g. an account that is authorized to create tables, drop tables, administrate other users, etc. This config will be used for the CLI scripts for setup and teardown tasks. The regular, typically less-privileged config will be used for your app's business logic.Optional paramsadmin [Boolean]: Force the use of adminConfig for your database instead of the regular config. Default: false.schema [String]: Relative path to a file with what set of SQL statements you want to execute against your database when it is freshly created, if any. Default: undefined.loggerConfig [Object]: Options to suppress various kinds of logging.Default:loggerConfig: {   log: true, // regular logs   error: true, // logging errors   verbose: true // verbose logging }questionMarkParamsForPostgres [Boolean]: Automatically convert parameterized query placeholders from ? to $ + number within Multi-DB for PostgreSQL queries so you can use the ? syntax in PostgreSQL queries, which isn't possible in native PostgreSQL queries. Default: true.mergeConfig [Boolean]: Merge config values passed via constructor or environment variable with any .multi-db-config.json file detected in your app's directory structure. Default: true.Example configsExample for MariaDB:{   \"default\": \"mariadb\",   \"mariadb\": {     \"config\": {       \"host\": \"localhost\",       \"port\": 3306,       \"user\": \"app_name\",       \"password\": \"app_password\",       \"database\": \"app_name\"     },     \"adminConfig\": {       \"host\": \"localhost\",       \"port\": 3306,       \"user\": \"root\",       \"password\": \"password\",       \"database\": \"mariadb\"     },     \"schema\": \"db/schema.sql\"   } }Example for MySQL:{   \"default\": \"mysql\",   \"mysql\": {     \"config\": {       \"host\": \"localhost\",       \"port\": 3306,       \"user\": \"app_name\",       \"password\": \"app_password\",       \"database\": \"app_name\"     },     \"adminConfig\": {       \"host\": \"localhost\",       \"port\": 3306,       \"user\": \"root\",       \"password\": \"password\",       \"database\": \"mysql\"     },     \"schema\": \"db/schema.sql\"   } }Example for PostgreSQL:{   \"default\": \"postgres\",   \"postgres\": {     \"config\": {       \"host\": \"localhost\",       \"port\": 5432,       \"user\": \"app_name\",       \"password\": \"app_password\",       \"database\": \"app_name\"     },     \"adminConfig\": {       \"host\": \"localhost\",       \"port\": 5432,       \"username\": \"admin\",       \"password\": \"admin_password\",       \"database\": \"postgres\"     },     \"schema\": \"db/schema.sql\"   } }Example for PGlite:{   \"default\": \"pglite\",   \"pglite\": {     \"config\": {       \"database\": \"pg-data\"     },     \"schema\": \"db/schema.sql\"   } }Example for SQLite:{   \"default\": \"sqlite\",   \"sqlite\": {     \"config\": {       \"database\": \"db.sqlite\"     },     \"schema\": \"db/schema.sql\"   } }You could also create a single config that has configs for multiple databases or all of them if you like, but only one can be connected to per instance of Multi-DB.Multi-DB APIWhen you connect to a database using Multi-DB like in the below example, the constructor will return a db object.const db = await require('multi-db-driver')(config)This is the structure of the db object that Multi-DB returns:db.query(...) [Function]: Universal database query method that works on all supported databases.Arguments you can pass:query [String or Object]:When supplied a string as an argument, it will execute the query string against the default driver.When supplied an object as an argument, you can supply the following keys:default: A query string to execute against whichever database is the default.mariadb: A query string that will only execute against MariaDB databases.mysql: A query string that will only execute against MySQL databases.postgres: A query string that will only execute against PostgreSQL databases.pglite: A query string that will only execute against SQLite databases.sqlite: A query string that will only execute against SQLite databases.disableQuestionMarkParamsForPostgres: Set to true to prevent the query from attempting to normalize parameterized query placeholders from ? syntax to $1 $2 $3 etc syntax for PostgreSQL and PGlite queries.params [Array]: Optional array of parameters to supply values to the query.When supplied an array of strings, it will perform a normal query.When supplied an array of objects or an array of arrays, it will perform a transaction.next(db, result) [Function]: Optional callback function to execute when the query is finished.Arguments provided:db [String]: Which database the query was executed against.result [Object]: The resulting object from the query the database driver gives you.db.config [Object]: Object representing the config loaded.db.driver [Object]: The object the default database driver module returns in case you need to interact with it directly.db.drivers [Object]: Object collection of all the driver modules currently loaded.db.mariadb [Object]: MariaDB-specific APIs.driver [Object]: The object the mariadb module returns in case you need to interact with it directly.pool [Object]: The pool instance returned by mariadb's createPool method once instantiated.conn [Object]: The connection instance returned by the pool instance's getConnection method once instantiated.username [String]: Username of the current active connection, if a connection is active.database [String]: Which database the currently active connection is connected to, if a connection is active.query(queryString) [Function]: Function that takes a query string and executes it against the mariadb driver.db.mysql [Object]: MySQL-specific APIs.driver [Object]: The object the mysql2 module returns in case you need to interact with it directly.pool [Object]: The pool instance returned by mysql2's createPool method once instantiated.conn [Object]: The connection instance returned by the pool instance's getConnection method once instantiated.username [String]: Username of the current active connection, if a connection is active.database [String]: Which database the currently active connection is connected to, if a connection is active.query(queryString) [Function]: Function that takes a query string and executes it against the mysql2 driver.db.postgres [Object]: PostgreSQL-specific APIs.driver [Object]: The object the pg module returns in case you need to interact with it directly.pool [Object]: The instance of pg.Pool created by Multi-DB once instantiated.client [Object]: The instance of pg.Client created by Multi-DB once instantiated.username [String]: Username of the current active connection, if a connection is active.database [String]: Which database the currently active connection is connected to, if a connection is active.query(queryString) [Function]: Function that takes a query string and executes it against the pg driver.db.pglite [Object]: PGlite-specific APIs.driver [Object]: The object the @electric-sql/pglite module returns in case you need to interact with it directly.db [Object]: The database instance returned by @electric-sql/pglite's Database constructor once instantiated.query(queryString) [Function]: Function that takes a query string and executes it against the @electric-sql/pglite driver.db.sqlite [Object]: SQLite-specific APIs.driver [Object]: The object the better-sqlite3 module returns in case you need to interact with it directly.db [Object]: The database instance returned by better-sqlite3's Database constructor once instantiated.query(queryString) [Function]: Function that takes a query string and executes it against the better-sqlite3 driver."})
window.siteTexts.push({file: "docs/multi-db/latest/usage/index.html", title: "Multi-DB — usage (latest)", text: "InstallFirst mark your desired database drivers as dependencies in your app.List of currently-supported database drivers:mariadb for MariaDB.mysql2 for MySQL.pg for PostgreSQL.pglite for PGlite.better-sqlite3 for SQLite.Then mark the multi-db-driver npm package as a dependency in your app as well. Multi-DB is generally designed to work with the latest version of each supported database driver.Then you can configure Multi-DB and connect to your database.Connect to a database using Multi-DBconst db = await require('multi-db-driver')(config)If you do not supply a config object in the constructor, Multi-DB will attempt to load your config from a .multi-db-config.json file that should most commonly be placed in the root directory of your app.Multi-DB will look for that file in up to 3 directories above where the Multi-DB module is located (e.g. looking at parent directories starting with node_modules). You can change this behavior by setting the MULTI_DB_CONFIG_FILE_SEARCH_ATTEMPTS environment variable to a number other than 3. The default value of 3 will in most circumstances include the root directory of your app as one of the locations that will be searched for your Multi-DB config, which is why it's the default value.If you want to set a location for the config file manually, then set the MULTI_DB_CONFIG_LOCATION environment variable to the absolute path on your filesystem to where your config is.It is recommended that you add .multi-db-config.json to your .gitignore as well because it will typically contain database credentials.See \"Configuration\" for information about how to set up a Multi-DB config.Performing database queriesThe below examples show how to use Multi-DB to query your database(s) from the simplest usage to the most complex, demonstrating how this module focuses on adding complexity only when needed as a progressive enhancement atop simpler, more concise syntax.Example of one universal query that works with any database you set in your configconst simpleQuery = await db.query('select * from some_table')This usage is basically as concise as any standalone database driver would be, except it will work with any database that uses the same SQL syntax for this specific query and similar basic ones.Universal query but with parametersconst noNormalizingNeeded = await db.query('select * from some_table where something = ?', ['some value'])The second argument is optional if you don't need params.Universal query with parameters and a callback function for post-processingconst normalizedDataUniversalQuery = await db.query('select * from some_table where something = ?', ['some value'], function (db, result) {   switch (db) {     case 'mysql':       // do stuff if it was a mysql query       return result     default:       // do stuff if it was a query to any other kind of database       return result   } })The third argument is optional if you don't need a post-processing function.The post-processing function is useful if you need to call out specific post-processing behaviors for certain databases.Default query with special query for a specific databaseconst normalizedDataMultipleQueries = await db.query(  // queries object {   default: 'select * from some_table where something = ?',   mysql: 'some mysql-specific version of the query where something = ?' },  // values array ['some value'],  // postprocess function function (db, result) {   switch (db) {     case 'mysql':       // do stuff if it was a mysql query       return result     default:       // do stuff if it was any other kind of query       return result   } })This supplies an object instead of a string to the query argument.It also combines all the other above features too, showing a maximally featureful and flexible version of the query method.By default Multi-DB will rewrite the query under the hood to use $1 instead of ? for queries being executed against PostgreSQL and PGlite. You can disable this behavior by setting questionMarkParamsForPostgres to false in your Multi-DB config, or by setting disableQuestionMarkParamsForPostgres to true at the query level in the query object.CLI scriptsThis module also comes with a cli.js file to automate common database setup and teardown tasks. It will load your Multi-DB config and connect to the database using the adminConfig to perform these tasks.The cli.js file supports the following commands:cli.js --create: Creates the user and database specified in your config if it does not already exist.cli.js --destroy: Drops the user and database specified in your config.cli.js --file file.sql: Executes the SQL statements in the specified SQL file. Will attempt to do so using the regular less privileged config by default and will escalate to the admin config only if the less privileged config is unable to connect.cli.js --dump-schema path/to/schema.sql: Dumps the connected database's schema to specified SQL file path. Will create file in specified path if it does not already exist.cli.js --dump-data path/to/schema.sql: Dumps the connected database's schema and data to specified SQL file path. Will create file in specified path if it does not already exist.For the dump commands to work, you will need to ensure pg_dump, mysqldump, and sqlite3 are in your PATH.OptionsSkip the prompts with --yes.Suppress logs and warnings with --suppress-logs.Suppress errors with --suppress-errors.Enable verbose logging with --enable-verbose.Integrating the CLI scripts into your appIt is recommended that you create npm scripts in your app's package.json file to run those commands. Example usage of those scripts if you create them would look something like this:npm run create-db: Executes node [...]/cli.js --create.npm run destroy-db: Executes node [...]/cli.js --destroy.npm run db-file -- file.sql: Executes node [...]/cli.js --file file.sql.npm run db-schema-dump -- path/to/schema.sql: Executes node [...]/cli.js --dump-schema path/to/schema.sql.npm run db-data-dump -- path/to/schema.sql: Executes node [...]/cli.js --dump-data path/to/schema.sql.Replace the [...] part in the above examples with the path to where your copy of this module resides, e.g. in node_modules, lib, git_modules, or wherever it happens to be in your app."})
window.siteTexts.push({file: "docs/node-php-runner/latest/changelog/index.html", title: "Node.js PHP runner — changelog (latest)", text: "1.1.0Added run and runWithData methods so this module can be used as a general purpose PHP runner.Updated various dependencies.1.0.2Added TypeScript definitions.Various dependencies bumped.1.0.1Renamed package from express-php-view-engine to php. Thanks to Elmer Bulthuis for transferring the package name.Various dependencies bumped.1.0.0Initial version of superseding project.express-php-view-engine notably does not attempt to finish the work of the old php module. Instead it allows the native PHP parser to execute as a child process within Express applications.0.0.1Initial version of original project.Originally the php module on npm was used by a separate project that attempted to implement a PHP parser in JavaScript for Node.js, but was never finished. One work in progress version was published, then the project remained stale for 8 years."})
window.siteTexts.push({file: "docs/node-php-runner/latest/configuration/index.html", title: "Node.js PHP runner — configuration (latest)", text: "This module will register values from the data model you pass to the PHP script as global variables in your PHP script by default when you use PHP as an Express view engine or when you call runWithData. You can disable this behavior if desired in the following ways:Disable registering globally:const php = require('php') php.disableRegisterGlobalModel() // can be reenabled by calling php.enableRegisterGlobalModel()Disable registering on a per render basis in Express:app.get('/', (req, res) => {   res.render('index.php', {     _REGISTER_GLOBAL_MODEL: false,     hello: 'world'   }) })Disable registering on a per render basis in runWithData (though if you're doing this, you probably should just use php.run() instead, as that method was written to use simpler logic that doesn't support passing data to PHP):const output = await php.runWithData('some_php_script.php', {   _REGISTER_GLOBAL_MODEL: false,   hello: 'world' })"})
window.siteTexts.push({file: "docs/node-php-runner/latest/usage/index.html", title: "Node.js PHP runner — usage (latest)", text: "To use this module, you must have PHP installed and in your PATH.Run a PHP script in Node.jsconst php = require('php') const output = await php.run('some_php_script.php')Run a PHP script in Node.js and pass it dataconst php = require('php') const output = await php.runWithData('some_php_script.php', { hello: 'world' })Then, assuming your some_php_script.php file looks like this:<p><?=$hello?></p>The output will be:<p>world</p>Use with Expressconst express = require('express') const app = express() const php = require('php')  // setup PHP templating engine app.set('views', path.join(__dirname, 'templates')) app.set('view engine', 'php') // set PHP as a view engine in your Express app app.engine('php', php.__express)  // define a route app.get('/', (req, res) => {   res.render('index.php', {     hello: 'world'   }) })Then, assuming your templates/index.php looks like this:<p><?=$hello?></p>The output will be:<p>world</p>"})
window.siteTexts.push({file: "docs/progressively-enhance-web-components/latest/changelog/index.html", title: "SSR web components — changelog (latest)", text: "1.0.4Fixed a bug that would cause the module to crash if the file list provided by the user wasn't a directory.Updated various dependencies.1.0.3Fixed another bug that caused errors to print to the console if inline CSS existed in a scanned template.1.0.2Fixed a bug that could cause templates to be significantly altered by this preprocessor due to having been fully ingested by a DOM parser and then re-serialized back into a string. As of this version, only the custom elements that are progressively enhanced will be ingested by the DOM parser and re-serialized back into a string.Fixed a bug that caused errors to print to the console if inline CSS existed in a scanned template.Updated various dependencies.1.0.1Fixed a bug that prevented camelCase attribute names from replacing ${templateLiteral} values for values inmarkup.Updated various dependencies.1.0.0Initial commit."})
window.siteTexts.push({file: "docs/progressively-enhance-web-components/latest/configuration/index.html", title: "SSR web components — configuration (latest)", text: "When you call:const editedFiles = require('progressively-enhance-web-components')({   templatesDir: './mvc/views' })There are other params you can pass to it besides templatesDir.The full list of params available is:templatesDir [String]: What folder to examine. This is required.disableBeautify [Boolean]: If set to true, this module will not beautify the HTML in the outputted markup. Default: false.beautifyOptions [Object]: Options to pass to js-beautify. Default: { indent_size: 2 }."})
window.siteTexts.push({file: "docs/progressively-enhance-web-components/latest/usage/index.html", title: "SSR web components — usage (latest)", text: "We will demo this technique end-to-end using a <word-count> component that counts the number of words a user types into a <textarea>.Suppose the intended use of the <word-count> component looks like this:<word-count text=\"Once upon a time... \" id=\"story\">   <p slot=\"description\">Type your story in the box above!</p> </word-count>And suppose also that you have an Express application with templates loaded into mvc/views.To leverage this module's progressive enhancement technique, you will need to define this component using a <template> element in any one of your templates as follows:<template id=\"word-count\">   <style>     div {       position: relative;     }     textarea {       margin-top: 35px;       width: 100%;       box-sizing: border-box;     }     span {       display: block;       position: absolute;       top: 0;       right: 0;       margin-top: 10px;       font-weight: bold;     }   </style>   <div>     <textarea rows=\"10\" cols=\"50\" name=\"${id}\" id=\"${id}\">${text}</textarea>     <slot name=\"description\"></slot>     <span class=\"word-count\"></span>   </div> </template>Note: Any ${templateLiterals} present in the template markup will be replaced with attribute values from the custom element invocation. More on that below.Then, in your Express application:const fs = require('fs-extra')  // load progressively-enhance-web-components.js const editedFiles = require('progressively-enhance-web-components')({   templatesDir: './mvc/views' })  // copy unmodified templates to a modified templates directory fs.copySync('mvc/views', 'mvc/.preprocessed_views')  // update the relevant templates for (const file in editedFiles) {   fs.writeFileSync(file.replace('mvc/views', 'mvc/.preprocessed_views'), editedFiles[file]) }  // configure express const express = require('express') const app = express() app.engine('html', require('teddy').__express) // set teddy as view engine that will load html files app.set('views', 'mvc/.preprocessed_views') // set template dir app.set('view engine', 'html') // set teddy as default view engine  // start the server const port = 3000 app.listen(port, () => {   console.log(`🎧 express sample app server is running on http://localhost:${port}`) })Note: The above example uses the Teddy templating system, but you can use any templating system you like.In the above sample Express application, the mvc/views folder is copied to mvc/.preprocessed_views, then any template files in there will be updated to replace any uses of <word-count> with a more progressive enhancement-friendly version of <word-count> instead.So, for example, any web component in your templates that looks like this:<word-count text=\"Once upon a time... \" id=\"story\">   <p slot=\"description\">Type your story in the box above!</p> </word-count>Will be replaced with this:<word-count text=\"Once upon a time... \" id=\"story\">   <div>     <textarea rows=\"10\" cols=\"50\" name=\"story\" id=\"story\">Once upon a time... </textarea>     <span class=\"word-count\"></span>   </div>   <p slot=\"description\">Type your story in the box above!</p> </word-count>The fallback markup is derived from the <template> element and is inserted into the \"light DOM\" of the web component, so it will display to users with JavaScript disabled.Because the <template> element has ${templateLiteral} values for the name attribute, the id attribute, and the contents of the <textarea>, those values are prefilled properly on the fallback markup.Any tag in the <template> element that has a slot attribute will be moved to the top level of the fallback markup DOM because that is a requirement for the web component to work when JavaScript is enabled. That's why the <p> tag is not a child of the <div> in the replacement example like it is in the <template>. That is done intentionally by this module's preprocessing.Then, once the frontend JavaScript takes over, the web component can be progressively enhanced into the JS-driven version.Here's an example implementation for the frontend JS side:class WordCount extends window.HTMLElement {   connectedCallback () { // called whenever a new instance of this element is inserted into the dom     this.shadow = this.attachShadow({ mode: 'open' }) // create and attach a shadow dom to the custom element     this.shadow.appendChild(document.getElementById('word-count').content.cloneNode(true)) // create the elements in the shadow dom from the template element      // set textarea attributes     const textarea = this.shadow.querySelector('textarea')     textarea.value = this.getAttribute('text') || ''     textarea.id = this.getAttribute('id') || ''     textarea.name = this.getAttribute('id') || ''      // function for updating the word count     const updateWordCount = () => {       this.shadow.querySelector('span').textContent = `Words: ${textarea.value.trim().split(/\\s+/g).filter(a => a.trim().length > 0).length}`     }      // update count when textarea content changes     textarea.addEventListener('input', updateWordCount)     updateWordCount() // update it on load as well   } }  window.customElements.define('word-count', WordCount) // define the new elementOnce that JS executes, the \"light DOM\" fallback markup will be hidden and the JS-enabled version of the web component will take over and behave as normal.Sample appSee an end-to-end demo of this by running the sample app:cd sampleApps/expressnpm cicd ../../npm run express-sampleOr npm run sampleOr cd into sampleApps/express and run npm ci and npm startGo to http://localhost:3000The page with the web component is located at http://localhost:3000/pageWithForm"})
window.siteTexts.push({file: "docs/roosevelt-logger/latest/changelog/index.html", title: "Roosevelt logger — changelog (latest)", text: "1.0.1Fixed crash.1.0.0Refactored the code.Updated dependencies.0.2.3Dropped Node 10 and Node 12 supportUpdated various dependenciesMigrated colors to @colors/colorsMigrated from Travis to GitHub Actions0.2.2Fixed bug which caused whitespace at the end of a log to be removed.Better docs.CI improvements.Various dependencies bumped.0.2.1Fixed bug where disabling prefix would chop off more than the prefix.CI improvements.Various dependencies bumped.0.2.0Module fully refactored, including some breaking API changes, such as:Changed to class-based instantiation:Added enableLogger() and disableLogger() methods.Added enablePrefix() and disablePrefix() methods.Added createLogMethod() method.Other smaller changes to the API as well. See README.0.1.0Initial version."})
window.siteTexts.push({file: "docs/roosevelt-logger/latest/configuration/index.html", title: "Roosevelt logger — configuration (latest)", text: "ParamsThe following params can be passed when creating a new instance of roosevelt-logger:methods [Object]: A set of configs that represent logger methods that are available to use. Each config type that maps to a default log type can be set to either a boolean to enable / disable the log or an object:info [Boolean]: Enable regular logs. Default: true.warn [Boolean]: Enable logging of warnings. Default: true.verbose [Boolean]: Enable verbose (noisy) logging. Default: false.[custom log name] [Object]: You can also define your own log types and specify what native log type it maps to.API:enable [Boolean]: Enable this custom log. Default: true.type [String]: What type of native log this custom log maps to. Default: info.Allowed values: info, warn, or error.prefix: [String]: The string that prefixes any log entry. If not set or set to a falsy value (e.g. null, an empty string, etc), the prefix will be disabled.Default for warnings: ⚠️.Default for errors: ❌.color: [String]: The color that the text will be set to using @colors/colors npm package. If not set, it will use whatever the default color is for the native type selected.Custom type example:{   \"dbError\": {     \"type\": \"error\",     \"prefix\": \"🗄\",     \"color\": \"cyan\"   } }The above example would create a custom log type called dbError. It will log errors with a 🗄 prefix and cyan text color.params: Configuration that applies to all logger methods:disable [Array of Strings]: Disable all logging in certain environments. Each entry can be either an environment variable or the value of the NODE_ENV environment variable. Default: [].Example usage:['LOADED_MOCHA_OPTS']: Disables logger when app is being run by Mocha.['production']: Disables logger when NODE_ENV is set to production.enablePrefix [Boolean]: Enable prefixes which can contain emojis or other strings to be prepended to logs. This can also be toggled with the ROOSEVELT_LOGGER_ENABLE_PREFIX environment variable. Default: true.APIWhen you create an instance of roosevelt-logger, the following properties will be available on the logger instance:winston [Object]: The Winston module that roosevelt-logger uses internally.winstonInstance [Object]: The specific Winston object instance instantiated by roosevelt-logger.transports [Object]: The default Winston transports enabled by roosevelt-logger.enableLogging() [Function]: Enable the logger.disableLogging() [Function]: Disable the logger.enablePrefix() [Function]: Enable all log prefixes.disablePrefix() [Function]: Disable all log prefixes.createLogMethod(config) [Function]: Programmatically create a new logger method.config argument [Object]:name [String]: New logger method name.type [String]: What type of native log this custom log maps to.Default: info.Allowed values: info, warn, or error.prefix: [String]: The string that prefixes any log entry. If not set or set to a falsy value (e.g. null, an empty string, etc), the prefix will be disabled.Default for warnings: ⚠️.Default for errors: ❌.color: [String]: The color that the text will be set to using colors npm package. If not set, it will use whatever the default color is for the native type selected.Example createLogMethod usage:logger.createLogMethod({   name: 'dbError',   type: 'error'   prefix: '💥',   color: 'red' })  logger.dbError('Our whole stack is in crisis mode!') // => 💥 Our whole stack is in crisis mode!"})
window.siteTexts.push({file: "docs/roosevelt-logger/latest/usage/index.html", title: "Roosevelt logger — usage (latest)", text: "InstallFirst declare roosevelt-logger as a dependency in your app.Useconst Logger = require('roosevelt-logger') const logger = new Logger()  logger.log('some info') // => some info  logger.warn('a warning') // => ⚠️  a warning  logger.error('an error') // => ❌  an error  logger.verbose('noisy log only displayed when verbose is enabled') // =>  logger.log('✅', 'log prepended with a custom emoji or other string') // => ✅  log prepended with a custom emoji or other stringUse with custom configsconst Logger = require('roosevelt-logger') const logger = new Logger({   methods: {     verbose: true, // enables verbose logging     dbError: { // create custom error called dbError       type: 'error',       prefix: '🗄'     }   },   params: {     disable: ['LOADED_MOCHA_OPTS'] // disable logging during Mocha tests   } })  logger.log('some info') // => some info  logger.warn('a warning') // => ⚠️  a warning  logger.error('an error') // => ❌  an error  logger.verbose('noisy log only displayed when verbose is enabled') // => noisy log only displayed when verbose is enabled  logger.dbError('custom log for database errors') // => 🗄  custom log for database errorsSee \"Configuration\" for more info about how to configure roosevelt-logger."})
window.siteTexts.push({file: "docs/semantic-forms/latest/changelog/index.html", title: "Semantic Forms — changelog (latest)", text: "5.1.5Added no-float-label class to disable float labels on a per input basis.Updated dependencies.5.1.4Fixed clipped help icon on Firefox.Updated dependencies.5.1.3Added support for range inputs that display their value as you slide it around.Updated dependencies.5.1.2Added a search icon to search inputs.Added support for select elements with the multiple attribute.Added styling to tables within a form, or tables with the semanticForm class.Fixed missing styles on single radios.Fixed a bug that caused additional text labels to not work on checkbox groups, single checkboxes, and radios.Fixed alignment issues on checkbox and radio groups.Updated dependencies.5.1.1Fixed broken low flow styling.Fixed a visual bug on button gradients in Firefox.Fixed background styling on nested fieldsets within <detail> elements.Updated dependencies.5.1.0Added ability to more conveniently override default CSS via additional CSS variables.Updated all CSS variables to be prefixed with semanticForms (i.e. --semanticFormsFontFamily) to minimize the chance of naming collisions with the rest of your CSS.Fixed bug that prevented input label ellipses from being responsive to the input width.Updated dependencies.5.0.10Fixed bug causing active styles to apply to focused buttons.Updated dependencies.5.0.9Fixed bug causing native clear field to appear on search inputs.Updated dependencies.5.0.8Altered dark mode support so that it does not apply if the <html> or <body> tag has a class of \"light\".Updated dependencies.5.0.7Fixed a bug where the responsive grid layout would not always line up correctly.Fixed a bug that prevented text from being longer than input element, causing graphical errors.Updated dependencies.5.0.6Added slicker live demo docs.Fixed a bug causing dark mode not to respect OS preference.Updated dependencies.5.0.5Added better error handling to the JS.Updated dependencies.5.0.4Fixed a periodic JS error.5.0.3Fixed a bug that prevented semantic-forms from detecting when you inserted new forms into the page.Updated dependencies.5.0.2Fixed a bug that would cause errors when reinitialize() was called.Fixed a bug that caused nested selects to lose their dropdown icon.Fixed a bug where required single checkboxes would not show an asterisk.Added a help text icon beside labels with a title attribute on their respective inputs, or on labels for checkboxes and radios. Enabled with a data-show-help-icon attribute.Updated various dependencies.5.0.1Fixed a bug that caused some devDependencies to end up in the production build.Updated various dependencies.5.0.0Breaking: Added JS module bundling to make it possible for you to import CJS, ESM, or a standalone version of the JavaScript in this library to your project. However you will need to change your imports to match the new file names. See README for details.Added show/hide toggle to password fields which can be disabled with a data-no-reveal attribute.Added hover text for the clear field button and the show/hide password button.Added ability to customize clear field button hover text and show/hide password button hover text using data attributes as well.Added support for undo/redo keyboard commands when pressing the clear field.Added test suite.Fixed some accessibility issues.Updated various dependencies.4.0.4Fixed a bug that caused menu items with buttons to appear as a list.Updated various dependencies.4.0.3Fixed bug in which a form entry consisting of a single checkbox would be misaligned.Fixed bug that prevented some inputs from expanding to the width of its container.Fixed bug in which CSS reset for elements within a semantic forms form was overly aggressive, making it harder to style unrelated content within such a form.Updated various dependencies.4.0.2Fixed a visual bug that occurred when single checkbox elements had extra elements included.Updated various dependencies.4.0.1Added invalid help text support.Fixed a bug that caused float labels to break when certain browser extensions were enabled.4.0.0Breaking: Overhauled entire codebase to drive it using mostly CSS grid instead of flexbox. This makes everything more flexible overall and fit more designs better. However the CSS and markup changes will likely cause breaking changes to previous integrations, so when upgrading make some time to visually test all your pages to alter any CSS overrides you had in place accordingly. You also might want to make some markup changes to make use of new available classes to tweak the fit of individual form fields on specific forms.Altered fields to fit available space better at various screen sizes.Added multiple utility classes that define how wide inputs will span in the responsive layout.Added support for input type=image.Added support for secondary labels.Added styling for invalid form fields.Added asterisk that appears on required inputs.Improved accessibility considerably. Now has 100% Lighthouse score.Added feature to progressively nest fieldsets with progressively darker/lighter background colors.Fixed bug causing clear button appearing on disabled inputs.Fixed bug causing clear button to overlap with scrollbars on textareas.Fixed bug causing nested fieldset to have incorrect padding and margins.Fixed various other small bugs.Replaced the less CSS preprocessor with sass.Updated various dependencies.3.2.1Fixed a bug that could cause checkboxes and radio buttons to not submit their values to the server properly.Updated various dependencies.3.2.0Added a reinitialization method to re-scan existing forms. Called with window.semanticForms.reinitialize(formName).Altered logic to enhance forms so that it now ignores inputs that have already been enhanced.Updated dependencies.3.1.0Added dark mode support.Deprecated \"reset\" versions and \"no images\" versions.Added mutation observer that monitors changes to the DOM and will enhance any additional semanticForms forms you insert, but the monitoring may not be perfect. If you want to re-scan for new forms to enhance manually, you may still need to call window.semanticForms().Fixed a bug that caused DOM events to be duplicated when DOM elements are added dynamically after the first page load.Updated dependencies.3.0.8Fixed main export on case-sensitive file systems.Updated dependencies.3.0.7Fixed Chrome issue for forms with no placeholder.3.0.6Fixed missing files in npm package.3.0.5Added \"reset\" versions of the CSS files that set all: unset; before applying any semantic forms styles to help avoid conflicts with other CSS. There is a performance degradation to using this technique, so you should only use this if absolutely necessary.3.0.4Reduced size of select box text.3.0.3Fixed issue that prevented id selectors from allowing dots in the string.Fixed issue that prevented the clear field from dispatching an input event.3.0.2Added support for a single checkbox rather than a group of checkboxes.3.0.1Fixed alignment issue.3.0.0Removed default two column layout. Now defaults to as many columns as the container is wide.Added x2 class you can put on dd elements to double the width of a form. Does not apply on small screens.2.1.2Added a function to the JS files's global scope called semanticForms that you can call to initialize new forms that have been added to the DOM since the initial initialization.Updated dependencies.2.1.1Fixed a situation that could lead to a JS error.Fix minor alignment issue.2.1.0Added all input types.Fixed clear field.Fixed markup mistakes in the examples.Fixed CSS to support <menu> elements correctly.Refactored the JavaScript to modernize it.Updated dependencies.2.0.0Replaced <div class=\"buttonGroup\"> with a <menu> element. You will need to refactor your HTML accordingly.Fixed alignment issue caused by browser engines changing their alignment calculations since the first release.Various other refactoring.Pinned deps.Updated dependencies.1.0.5Restricted JS events to target elements within semanticForms class form elements.Switched font sizes to % in case someone finds 16px too small and changes the default font size in the browser, these form fields will no longer stay fixed.Published to npm.Started CHANGELOG.Updated dependencies.1.0.4 and belowHere be dragons…"})
window.siteTexts.push({file: "docs/semantic-forms/latest/fullDemo/index.html", title: "Semantic Forms (latest)", text: "Semantic FormsA pattern library of forms based on semantic HTML enhanced with a modern UX.High flow (JavaScript enabled) stylingNamePrefilled fieldNo placeholderPassword fieldPassword should be at least 8 characters long.Don't show password fieldPassword should be at least 8 characters long.Customize clear/show buttonsPassword should be at least 8 characters long.Single form inputFieldset legendInputsEmail fieldTelephone fieldURL fieldSearch fieldNo float labelNumberInput with label help text Some help textInput with help iconRequired input with help iconInvalid fieldValid fieldRequired fieldRequired field (no asterisk)Required field (custom title)Disabled inputDisabled input w/ valueColor fieldDate fieldTime fieldDatetime-local fieldMonth fieldWeek fieldFile fieldRange fieldRange valueSelectsSelect boxItem oneItem twoItem threeItem fourItem fiveItem sixItem seven Some help text regarding the select boxRequired select boxMake a selectionItem oneItem twoItem threeItem fourItem fiveItem sixItem sevenRequired select box (no asterisk)Make a selectionItem oneItem twoItem threeItem fourItem fiveItem sixItem sevenMultiple selectOption 1Option 2Option 3Option 4Option 5CheckboxesCheckboxes One Two ThreeRequired checkboxes One Two ThreeCheckboxes w/ help text One Two ThreeCheckboxes w/ additional text One Two ThreeThis is some additional text.CheckboxCheckbox (required)Checkbox w/ help textCheckbox w/ additional text This is some additional text.RadiosRadios One Two ThreeRequired radios One Two ThreeRadios w/ help text One Two ThreeRadios w/ additional text One Two ThreeThis is some additional text.RadioRadio (required)Radio w/ help textRadio w/ additional text This is some additional text.OtherTextareaTextarea (prefilled)Some prefilled content... Some help text regarding the textarea with some really long text that should overflow and wrapTablesTable with inputs and buttonsTable TitleColumn 1Column 2Column 31Button 1Button 22Button 1Button 23Button 1Button 2Table using colgroups to define column widthTable TitleColumn 1Column 2Column 320%50%30%Nested fieldsetsFieldset 1InputHere is some subtext.Input 2Here's some small subtext.Input 3Here's some bold subtext.Input 4Here is some subtext.Here is some more subtext.Fieldset 2Input 1Input 2SelectHeyFieldset 3Input AInput BInput CInput DColspan classescolspan-1colspan-1colspan-2colspan-4colspan-3colspan-1colspan-fullcolspan-5colspan-1Input AInput BInput CInput Dcolspan-2Input AInput BInput CInput Dcolspan-3Input AInput BInput CInput Dcolspan-fullInput AInput BInput CInput DDetail elementDetail inputDetail inputDetail inputDetail inputAnother detail element with a nested fieldsetDetail inputNested fieldsetNested fieldset input Flexbox button layout pattern with two submit buttons:Button 1Flexbox button layout pattern with three submit buttons:Button 1Button 2P tag elements CheckboxText input Textarea ButtonSome regular text with other elements inside of itNon-form related HTML elementsThis is some regular HTML that should not be affected by any semantic forms stylesThis is a divThis is a block quoteA link to the semantic forms repounordered list 1unordered list 2unordered list 3ordered list 1ordered list 2ordered list 3menu list 1menu list 2menu list 3description list titledescription list valueDetails summarySome detail textTable with semanticForms classTable TitleColumn 1Column 2Column 31Button 1Button 22Button 1Button 23Button 1Button 2Table with a form in a cellTable TitleColumn 1Column 2Some textSubmit buttonUnstyled tableTable TitleColumn 1Column 2Column 31Aa2Bb3CcLow flow (JavaScript disabled) stylingAdding the lowFlow class to the form element removes all JS enhancements.NamePrefilled fieldNo placeholderPassword fieldPassword should be at least 8 characters long.Single form inputFieldset legendEmail fieldTelephone fieldURL fieldSearch fieldNumberInput with label help text Some help textInvalid fieldValid fieldRequired fieldSelect boxItem oneItem twoItem threeItem fourItem fiveItem sixItem seven Some help text regarding the select boxCheckboxes One Two ThreeSingle checkboxRadios One Two ThreeColor fieldDate fieldTime fieldDatetime-local fieldMonth fieldWeek fieldFile fieldRange fieldTextareaTextarea (prefilled)Some prefilled content... Some help text regarding the textarea with some really long text that should overflow and wrapNested fieldsetInputHere is some subtext.Input 2Here's some small subtext.Input 3Here's some bold subtext.Input 4Here is some subtext.Here is some more subtext.Another nested fieldsetInputInput 2SelectHeyColspan classescolspan-1colspan-1colspan-2colspan-4colspan-3colspan-1colspan-fullcolspan-5colspan-1Input AInput BInput Ccolspan-2Input AInput BInput Ccolspan-3Input AInput BInput CInput Dcolspan-4Input AInput BInput CInput DInput Ecolspan-5Input AInput BInput CInput DInput EInput FDetails summaryDetail inputDetail inputDetail inputDetail inputAnother details elementDetail inputP tag elements CheckboxText input Textarea ButtonSome regular text with other elements inside of it Flexbox button layout pattern with two submit buttons:Button 1Flexbox button layout pattern with three submit buttons:Button 1Button 2Non-form related HTML elementsThis is some regular HTML that should not be affected by any semantic forms stylesThis is a divThis is a block quoteA link to the semantic forms repounordered list 1unordered list 2unordered list 3ordered list 1ordered list 2ordered list 3menu list 1menu list 2menu list 3description list titledescription list valueDetails summarySome detail text"})
window.siteTexts.push({file: "docs/semantic-forms/latest/usage/index.html", title: "Semantic Forms — usage (latest)", text: "Installnpm install semantic-formsThe package is distributed with the following builds available:dist/semantic-forms.cjs: CommonJS bundle: const semanticForms = require('semantic-forms')dist/semantic-forms.js: Standalone bundle that can be included via <script> tags. Declares a global variable called: semanticFormsdist/semantic-forms.min.js: Minified standalone bundle that can be included via <p> tags. Declares a global variable called: semanticFormsdist/semantic-forms.mjs: ES module: import semanticForms from 'semantic-forms'dist/semantic-forms.min.mjs: Minified ES module: import semanticForms from 'semantic-forms/min'UseInclude the dist/semantic-forms.css and whichever of the above versions of the JS file you prefer from this repo into your project.Then apply the semanticForms class to your <form> elements:<form class=\"semanticForms\">   <!-- your form here --> </form>Then apply the JavaScript enhancements:semanticForms()Then the CSS/JS enhancements to your forms will apply automatically, assuming the markup structure you use is one of the supported patterns.If you make changes to the DOM after Semantic Forms is activated and want to activate any additional semanticForms forms you insert, you can re-scan for new forms by calling semanticForms.reinitialize() again. If you only want to reinitialize one form instead of all of them, call semanticForms.reinitialize(formElement).FeaturesFloat label inputsThe float label input pattern is notoriously difficult to implement in a fashion that doesn't degrade HTML semantics or accessibility. This pattern library implements a solution that solves that problem. Your label doesn't need to be a sibling of your input like with other implementations. This implementation also has a custom clear button for each input.Example<form class=\"semanticForms\">   <dl>     <dt><label for=\"name\">Name</label></dt>     <dd><input id=\"name\" name=\"name\" type=\"text\" placeholder=\"e.g. John Smith\"></dd>   </dl> </form>NameOr with a <textarea><form class=\"semanticForms\">   <dl>     <dt><label for=\"textarea\">Textarea</label></dt>     <dd><textarea id=\"textarea\" name=\"textarea\" rows=\"5\" cols=\"50\" placeholder=\"e.g. Long string of text\"></textarea></dd>   </dl> </form>TextareaAdd help textInclude a label in the <dd> element with a matching for attribute to place help text beneath the input:<form class=\"semanticForms\" method=\"post\">   <dl>     <dt><label for=\"password\">Password</label></dt>     <dd>       <input id=\"password\" name=\"password\" type=\"password\" placeholder=\"Enter a password\" minlength=\"8\" required autocomplete=\"off\">       <label for=\"password\">Must be at least 8 characters long.</label>     </dd>   </dl> </form>Password Must be at least 8 characters long.Customizing input fieldsBy default, input fields will display an X icon to clear the text and password fields will also display a show/hide toggle for displaying the password in plain text. You can customize this behavior as follows:Customize the hover text of the clear field button by applying a data-clear-field-text=\"your text\" attribute to the input.Customize the hover text of the show password button by applying a data-show-password-text=\"your text\" attribute to the input.Customize the hover text of the hide password button by applying a data-hide-password-text=\"your text\" attribute to the input.Prevent the show/hide toggle from appearing on password fields by applying a data-no-reveal attribute to the input.Show a help text icon next to labels of inputs that contain a title attribute by applying a data-show-help-icon attribute to the label.Note that checkboxes and radios should have a title attribute on the label instead of the inputs.You can also disable float labels on a per-field basis with the no-float-label class:<form class=\"semanticForms\">   <dl>     <dt><label for=\"search-field\">Search</label></dt>     <dd><input id=\"search-field\" name=\"search-field\" type=\"search\" placeholder=\"e.g. cool stuff\" class=\"no-float-label\"></dd>   </dl> </form>SearchResponsive columnsThis feature makes it so the form fields will grow, shrink, expand the number of columns, or reduce the number of columns based on how much space exists in the container. You can customize it by applying various colspan-# classes to various elements in the form markup structure.Set number of columns for a group of formsYou can limit the number of columns on your forms using the colspan-# class on a <dl> element:<form class=\"semanticForms\">   <dl class=\"colspan-2\">     <dt><label for=\"input-a\">Input A</label></dt>     <dd><input type=\"text\" id=\"input-a\" name=\"input-a\"></dd>      <dt><label for=\"input-b\">Input B</label></dt>     <dd><input type=\"text\" id=\"input-b\" name=\"input-b\"></dd>      <!-- wraps to the next row -->     <dt><label for=\"input-c\">Input C</label></dt>     <dd><input type=\"text\" id=\"input-c\" name=\"input-c\"></dd>   </dl> </form>Input AInput BInput CYou can also apply the class to a <fieldset> which will apply that styling to all nested <dl> elements:<form class=\"semanticForms\">   <fieldset class=\"colspan-3\">     <!-- inherits 3 column class -->     <dl>       <dt><label for=\"f-ex-input-a\">Input A</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-a\" name=\"f-ex-input-a\"></dd>        <dt><label for=\"f-ex-input-b\">Input B</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-b\" name=\"f-ex-input-b\"></dd>        <dt><label for=\"f-ex-input-c\">Input C</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-c\" name=\"f-ex-input-c\"></dd>     </dl>      <!-- has 4 columns -->     <dl class=\"colspan-4\">       <dt><label for=\"f-ex-input-d\">Input D</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-d\" name=\"f-ex-input-d\"></dd>        <dt><label for=\"f-ex-input-e\">Input E</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-e\" name=\"f-ex-input-e\"></dd>        <dt><label for=\"f-ex-input-f\">Input F</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-f\" name=\"f-ex-input-f\"></dd>     </dl>   </fieldset> </form>Input AInput BInput CInput DInput EInput FSet number of columns a single input field takes upYou can specify the number of columns an input will span using the colspan-# class on the <dd> element. The inputs are responsive and will shrink according to available space. Available numbered classes are colspan-1 through colspan-5:<form class=\"semanticForms\">   <fieldset>     <dl>       <dt><label for=\"cspan-ex-input-a\">Input A</label></dt>       <!-- 1 column -->       <dd class=\"colspan-1\"><input type=\"text\" id=\"cspan-ex-input-a\" name=\"cspan-ex-input-a\"></dd>        <dt><label for=\"cspan-ex-input-b\">Input B</label></dt>       <!-- 2 columns  -->       <dd class=\"colspan-2\"><input type=\"text\" id=\"cspan-ex-input-b\" name=\"cspan-ex-input-b\"></dd>        <dt><label for=\"cspan-ex-input-c\">Input C</label></dt>       <!-- 5 columns (max) -->       <dd class=\"colspan-5\"><input type=\"text\" id=\"cspan-ex-input-c\" name=\"cspan-ex-input-c\"></dd>     </dl>   </fieldset> </form>Input AInput BInput Ccolspan-full can also be used to force an input to take up the entire width of a form:<form class=\"semanticForms\">   <fieldset>     <dl>       <dt><label for=\"cspanfull-ex-input-a\">Input A</label></dt>       <!-- this spans 2 columns on row 1 -->       <dd class=\"colspan-2\"><input type=\"text\" id=\"cspanfull-ex-input-a\" name=\"cspanfull-ex-input-a\"></dd>        <dt><label for=\"cspanfull-ex-input-b\">Input B</label></dt>       <!-- this spans the full width of row 2 -->       <dd class=\"colspan-full\"><input type=\"text\" id=\"cspanfull-ex-input-b\" name=\"cspanfull-ex-input-b\"></dd>        <!-- this spans 1 column on row 3 -->       <dt><label for=\"cspanfull-ex-input-c\">Input C</label></dt>       <dd><input type=\"text\" id=\"cspanfull-ex-input-c\" name=\"cspanfull-ex-input-c\"></dd>     </dl>   </fieldset> </form>Input AInput BInput CButton groupsYou can align buttons side-by-side, or in left/right/center groups.Non-grouped exampleNothing fancy here:<form class=\"semanticForms\" method=\"post\">   <button type=\"submit\" name=\"submit\">Non-grouped submit button</button>   <button type=\"submit\" name=\"submit\">Another one</button> </form>Non-grouped submit button Another oneButton groupsDriven by flexbox to intelligently align the buttons based on how many are in the group:<form class=\"semanticForms\" method=\"post\">   <!-- aligns left/right -->   <menu>     <li><button type=\"submit\" name=\"submit\">Button 1</button></li>     <li><button type=\"submit\" name=\"submit\">Button 2</button></li>   </menu>    <!-- aligns left/center/right -->   <menu>     <li><button type=\"submit\" name=\"submit\">Button 1</button></li>     <li><button type=\"submit\" name=\"submit\">Button 2</button></li>     <li><button type=\"submit\" name=\"submit\">Button 3</button></li>   </menu> </form>Button 1Button 2Button 1Button 2Button 3Checkboxes and radio buttonsCheckboxes and radio buttons need to follow the following markup structure:A single checkboxNot too different than other inputs:<form class=\"semanticForms\">   <dl>     <dt><label for=\"some_field_name\">Single checkbox</label></dt>     <dd><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name\"></dd>   </dl> </form>Single checkboxCheckbox group<form class=\"semanticForms\">   <dl>     <dt><label data-for=\"some_checkboxes\">Checkboxes:</label></dt>     <dd class=\"checkboxes\">       <ul id=\"some_checkboxes\">         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_one\"> <label for=\"some_field_name_checkboxes_one\">One</label></li>         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_two\"> <label for=\"some_field_name_checkboxes_two\">Two</label></li>         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_three\"> <label for=\"some_field_name_checkboxes_three\">Three</label></li>       </ul>     </dd>   </dl> </form>Checkboxes: One Two ThreeRadio buttons<form class=\"semanticForms\">   <dl>     <dt><label data-for=\"some_radios\">Radios:</label></dt>     <dd class=\"radios\">       <ul id=\"some_radios\">         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_one\"> <label for=\"some_field_name_radios_one\">One</label></li>         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_two\"> <label for=\"some_field_name_radios_two\">Two</label></li>         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_three\"> <label for=\"some_field_name_radios_three\">Three</label></li>       </ul>     </dd>   </dl> </form>Radios: One Two ThreeValidation stylesInputs with the required attribute will result in a visual indicator (*) being added to its label. You can disable this indicator with the data-no-asterisk attribute on the label element:<form class=\"semanticForms\">   <dl>     <dt><label for=\"input\" data-no-asterisk>Input label</label></dt>     <dd><input type=\"text\" name=\"input\" id=\"input\" required>   </dl> </form>Input labelYou can set a paragraph of text below a field to only appear when a field is invalid with the data-invalid-text attribute:<form class=\"semanticForms\" method=\"post\">   <dl>     <dt><label for=\"password_validation\">Password label</label></dt>     <dd>       <input type=\"password\" name=\"password\" id=\"password_validation\" minlength=\"8\" autocomplete=\"off\">       <p data-invalid-text>Password must be at least 8 characters long.</p>     </dd>   </dl> </form>Password labelPassword must be at least 8 characters long.You can adjust the tooltip text of the asterisk with the data-asterisk-text attribute:<form class=\"semanticForms\">   <dl>     <dt><label for=\"input_validation\" data-asterisk-text=\"This is a custom tooltip.\">Input label</label></dt>     <dd><input type=\"text\" name=\"input\" id=\"input_validation\" required>   </dl> </form>Input labelRange inputs that display valuesAdd a class of displayValue to any <input type=\"range\"> element to make its value display on the label:<form class=\"semanticForms\">   <dl>     <dt><label for=\"rangeValue\">Range value</label></dt>     <dd><input id=\"rangeValue\" name=\"rangeValue\" type=\"range\" class=\"displayValue\"></dd>   </dl> </form>Range valueLight mode and dark modeLight mode and dark mode will be detected automatically based on operating system preference. To set it manually, you can apply an additional class of light or dark to your <form> elements to force the mode.Low flow (JavaScript disabled) modeThe low flow will be displayed if JS is disabled.You can also activate the low flow (JavaScript disabled) mode manually by adding the lowFlow class to your <form> element.The low-flow mode reverts the float label pattern to traditional labels and doesn't include other JS-exclusive enhancements, but preserves the other visual design enhancements driven purely by CSS.Overriding default stylesThe most convenient way to override the default styles in Semantic Forms is to override the built-in CSS variables.For example:form.semanticForms {   /* will overwrite the default semantic-forms values */   --semanticFormsFontFamily: monospace;   --semanticFormsTextColor: blue;   --semanticFormsInputMinWidth: 300px; }For a complete list of CSS variables you can override, see the top of semanticForms.scss.MoreSee a page demoing all features here."})
window.siteTexts.push({file: "docs/single-page-express/latest/changelog/index.html", title: "Single Page Express — changelog (latest)", text: "2.0.4Fixed a bug that caused a race condition related to view transitions and afterRender methods and render callbacks.Fixed a bug that caused Single Page Express to trigger on <a> elements that do not have href attributes.Fixed a bug that caused Single Page Express to trigger on <form> elements that do not have action attributes.Fixed a bug that caused history state to be modified in ways that could cause crashes.Updated dependencies.2.0.3Fixed regression that caused after-render actions to break in Chrome in the default render method.Updated dependencies.2.0.2Fixed regression that caused middleware support to break routes without middleware.Updated dependencies.2.0.1Added support for middleware on routes.Updated dependencies.2.0.0Breaking: Changed default Express API version to 5.To migrate:Most apps probably only need to change * routes to *all.Apps that use more complex routing may need other changes.Full list of considerations for migrating to Express 5: https://expressjs.com/en/guide/migrating-5.htmlFixed a bug that caused req.body to populate {} instead of undefined in Express 5 mode.Fixed a bug that caused the default / route to not load in some situations.Fixed a bug that caused extra <head> tags to get inserted into the DOM with the default render method in some situations.Fixed issues in sample app 2.Updated dependencies.1.2.0Added view transition support in the default render method.Added support for multiple DOM update targets in the default render method.Added req.backButtonPressed and req.forwardButtonPressed to app.Added classes backButtonPressed and forwardButtonPressed which will populate on the <html> element if either button was pressed.Added [data-page-title] to the top of the list of accepted query selectors for sourcing content to announce to screen readers when a new page is rendered.Added new params to the res.beforeRender(params), beforeEveryRender(params), res.afterRender(params), and afterEveryRender(params) methods:It now supplies an object with:model: The data model supplied to the template to be rendered.doc: The document object created from the template after it is rendered.markup: The HTML string that will be written to the page.targets: The list of DOM nodes that will be updated.Fixed a bug that caused postRenderCallbacks not to function properly.Fixed a bug related to script tags from the rendered page being executed unnecessarily.Fixed a bug causing unnecessary outlines to appear on page transitions in Safari.Updated dependencies.1.1.1Fixed crash related to unfinished HTML validation feature.Updated dependencies.1.1.0Added feature which will allow single-page-express to remember the scroll position of pages that have been visited. It will also remember the scroll position of child containers on each page as well, but only if those containers have assigned id attributes.Added alwaysScrollTop param which will let you disable this behavior app wide and res.resetScroll which will let you disable this behavior on a per-route basis.Added new behaviors to the default render method. It will now:Update the attributes of the <html> and <head> tags.Add new children to the <head> tag if anything new is in the template render.Delay the DOM update until any new <link> or <script> tags load to prevent a FOUC.Set browser focus appropriately after the DOM update. Also added res.focus to let you set it manually.Announce page changes to screen readers.Added res properties which will let you remove elements from the <head> tag on a per route basis: res.removeMetaTags, res.removeStyleTags, res.removeLinkTags, res.removeScriptTags, res.removeBaseTags, res.removeTemplateTags. There is also res.removeHeadTags to remove all children of the <head> tag except the <title> tag.Added topBarRoutes param to allow restricting the top bar to certain routes.Added req.singlePageExpress which you can use to detect if your route is executing in the single-page-express context.Fixed a bug which caused back/forward buttons to not function properly sometimes.Fixed a bug which would cause the top bar not to ever hide if it was enabled but the default render method was replaced.Fixed a bug in the Express sample app that would cause server-rendering to fail on routes with more than one /.Added a new sample app.Added an automated test suite and a few starter tests.Refactored some code to simplify it.Removed some unneeded dependencies.Updated dependencies.1.0.3Fixed missing exports so you can require/import Single Page Express less verbosely in your projects.Updated docs to clarify what the different builds of Single Page Express are meant to be used for.Updated dependencies.1.0.2Fixed bug causing custom res variables to not be set properly during certain default render method calls.Fixed broken Express 5 support.Updated dependencies.1.0.1Fixed broken postinstall script.1.0.0Initial version."})
window.siteTexts.push({file: "docs/single-page-express/latest/configuration/index.html", title: "Single Page Express — configuration (latest)", text: "APIDefault render method behaviorThe default render method will handle both full page renders as well as rendering partials:If you set res.title, the page's title will be updated with its contents. Alternatively, if the template render output contains a <title> tag, the page's title will be updated with its contents.When the new page is rendered, it will be announced to screen readers. The content to read to screen readers will be sourced from one of the following querySelectors: [data-page-title], h1[aria-label], h1, or title in that order.If the template render contains an <html> or <head> tag and there are new attributes on the <html> or <head> tags that aren't present in the current document, those attributes will be set on the current document. This behavior is additive or replacement-level only. Attributes cannot be removed simply by omitting them in the template render. If you want to remove an attribute, do it with JavaScript, or set it to a different value in your template render.If there are any new children for the <head> in the template render, they will be inserted into the current document's <head> tag if they are not present already.If any of the new tags are <link> or <script> tags, the DOM update will be delayed until those external files load to prevent a flash of unstyled content.If you set res.removeMetaTags, all <meta> tags will be removed from the <head> before adding any new ones.If you set res.removeStyleTags, all <style> tags will be removed from the <head> before adding any new ones.If you set res.removeLinkTags, all <link> tags will be removed from the <head> before adding any new ones.If you set res.removeScriptTags, all <script> tags will be removed from the <head> before adding any new ones.If you set res.removeBaseTags, all <base> tags will be removed from the <head> before adding any new ones.If you set res.removeTemplateTags, all <template> tags will be removed from the <head> before adding any new ones.If you set res.removeHeadTags, all tags except <title> will be removed from the <head> before adding any new ones.If you set res.target, the DOM will be updated at that spot. res.target is a query selector, so an example value you could give it would be #my-container. That would replace the contents of the element with the id \"my-container\" with the output of your rendered template.If the output of your rendered template also has an element matching the same query selector, then the contents of that portion of the output will be all that is used to replace the target.If you do not set res.target and neither app.defaultTarget nor app.defaultTargets is set, then the contents of the <body> tag will be replaced with the output of your rendered template.You can also supply an array of query selectors to res.target. Elements found matching the query selectors in the array will be replaced with the corresponding query selectors from the rendered template.If you set res.appendTargets = true, any new target(s) you add will be in addition to whatever is set by app.defaultTarget or app.defaultTargets.If you set res.focus, the browser's focus will be set to that element after the page is rendered. If you do not set res.focus, then the browser's focus will be set to the first non-inert element in the DOM with the autofocus attribute, or, if none are present, it will be set to whatever the target element was set to for the DOM update. If there are multiple targets, the first target on the list will be what is selected.There are also hooks for setting animations as well. See \"Hooks for setting animations\" below.If this DOM manipulation behavior is undesirable to you, you can supply your own render method instead and do whatever you like. To supply your own render method, see the constructor parameter documentation below.Constructor parametersBasic configurationexpressVersion [Number]: Optionally set which version of the Express API to use for route string parsing. Supports values 4 or 5. Express 3 and below are not supported. Defaults to 5.templatingEngine [String]: Which Express templating system to use. You must include the package in your app and supply the module as an argument to this param. This param is required if you use the default render method and do not supply your own.templates [Object]: Supply an object with keys that are template names and values that are template strings. This param is required if you use the default render method and do not supply your own.renderMethod(template, model callback) [Function]: Optionally supply a function to execute when res.render is called in your routes. If you do not provide one, a default one will be used that will render your template with your chosen templating engine and make appropriate updates to the DOM. See below for details about what the default render method does specifically and how to customize its behavior.disableTopbar [Boolean]: Disable the top bar loading bar. Default: false (the loading bar is enabled by default)topbarConfig [Object]: Options to supply to top bar to customize its aesthetics and behavior. See the site's documentation for a list of options.topBarRoutes [Array of Strings]: Which routes to use top bar on. Defaults to all if this option is not supplied.alwaysScrollTop [Boolean]: Always scroll to the top of the page after every render. Default: false (the default render method will remember the scroll position of each page visited and restore that scroll position when you revisit those pages)Customizing the default render method's behaviorThese constructor params are only relevant if you're not supplying a custom render method.Pre-renderbeforeEveryRender(params) [Function]: Optionally supply a function to execute just before your template is rendered and written to the DOM. Useful for beginning a CSS transition.You can also set res.beforeRender(params) [Function] on a per request basis.The params argument contains:model [Object]: The data model supplied to the template to be rendered.doc [String]: The document object created from the template after it is rendered.markup [String]: The HTML string that will be written to the page.targets [Array of Strings]: The list of DOM nodes that will be updated.defaultTarget [String]: Query string representing the default element to target if one is not supplied by res.target. Defaults to the <body> tag if neither res.target or app.defaultTarget is supplied.defaultTargets [Array of Strings]: Array of query strings representing elements to target for replacement if such an array is not supplied by res.target. Elements found matching the query strings in the array will be replaced with the corresponding query string from the rendered template.updateDelay [Number]: How long to wait in milliseconds between rendering the template and writing its contents to the DOM. This is useful to give your animations time to animate if you're using animations. Default: 0.You can also set res.updateDelay on a per request basis.Post-renderafterEveryRender(params) [Function]: Optionally supply a function to execute just after your template is rendered and written to the DOM. Useful for finishing a CSS transition.You can also set res.afterRender(params) [Function] on a per request basis.The params argument contains:model [Object]: The data model supplied to the template rendered.doc [String]: The document object created from the template after it was rendered.markup [String]: The HTML string that was written to the page.targets [Array of Strings]: The list of DOM nodes that were updated.postRenderCallbacks [Object]: Optionally supply an object with keys that are template names and values that are functions to execute after that template renders. You can also supply * as a key to execute a post-render callback after every template render.Application objectWhen you call the constructor, it will return an app object.PropertiesafterEveryRender(params) [Function]: Function to execute after every template render sourced from the constructor params.alwaysScrollTop [Boolean]: If true, the app will not remember scroll position on a per-page basis.appVars [Object]: List of variables stored via app.set() and retrieved with app.get().beforeEveryRender(params) [Function]: Function to execute before every template render sourced from the constructor params.defaultTarget [String]: Query string representing the default element to target if one is not supplied by res.target.defaultTargets [Array of Strings]: Optional array of query strings representing elements to target for replacement if such an array is not supplied by res.target.expressVersion [Number]: Which version of the Express API to use for route string parsing sourced from the constructor params.postRenderCallbacks [Object]: List of callback functions to execute after a render event occurs sourced from the constructor params.routes [Object]: List of routes registered with single-page-express.routeCallbacks [Object]: List of callback functions executed when a given route is visited.templates [Object]: List of templates loaded into into single-page-express sourced from the constructor params.templatingEngine [String]: The templating engine module loaded into single-page-express sourced from the constructor params.topbarEnabled [Boolean]: Whether or not the top loading bar is enabled.topbarRoutes [Array of Strings]: Which routes to use the top loading bar on; defaults to all if this option is not supplied.updateDelay [Number]: How long to wait before rendering a template sourced from constructor params.urls [Object]: List of URLs that have been visited and metadata about them.Express API implementationsingle-page-express is a partial frontend implementation of the Express API. Below is a full list of Express API methods and the degree to which it is implemented.App constructor methodsNot supported: None from Express are implemented. single-page-express implements its own constructor which is described above.Application objectSettingscase sensitive routing [Boolean]: Supported. Defaults to false.env [String]: Supported. Defaults to production.etag: Not supported because there is no request cycle concept in single page app contexts.jsonp callback name: Not supported because it is not useful in single page app contexts.json escape: Not supported because it is not useful in single page app contexts.json replacer: Not supported because it is not useful in single page app contexts.json spaces: Not supported because it is not useful in single page app contexts.query parser [Boolean]: Partially supported. In Express there are multiple options, but in single-page-express you can set it to either true or false. It defaults to true.strict routing [Boolean]: Supported. Defaults to false.subdomain offset [Number]: Supported. Defaults to 2.trust proxy: Not supported because there is no request cycle concept in single page app contexts.views: Not supported because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.view cache: Not supported because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.view engine: Not supported because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.x-powered-by: Not supported because there is no request cycle concept in single page app contexts.Propertiesapp.locals [Object]: Stubbed out. This will always return {} because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.app.mountpath [String]: Stubbed out. This will always return '' because single-page-express does not have a concept of app mounting in the way that Express does. See feature request.Eventsmount: Stubbed out but does nothing because single-page-express does not have a concept of app mounting in the way that Express does. See feature request.Methodsapp.all(): Supported.app.delete(): Supported.app.disable(): Supported.app.disabled(): Supported.app.enable(): Supported.app.enabled(): Supported.app.engine(): Stubbed out but does nothing because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.app.get(): Supported. (Both versions.)app.listen(): Stubbed out but does nothing because there is no \"server\" concept in single page app contexts.app.METHOD(): Supported.app.param(): Stubbed out but does nothing because this feature has not been implemented yet. See feature request.app.path(): Stubbed out but does nothing because single-page-express does not have a concept of app mounting in the way that Express does. See feature request.app.post(): Supported.app.put(): Supported.app.render(): Supported.app.route(): Supported.app.set(): Supported.app.use(): Stubbed out but does nothing because single-page-express does not have a concept of app middleware in the way that Express does. See feature request.New methods defined by single-page-expressapp.triggerRoute(params): This will activate the route callback registered for a given route, as though a link was clicked or a form was POSTed.Params accepted by app.triggerRoute include:route [String]: Which route you're triggering.method [String]: e.g. GET, POST, etc. (Case insensitive.)body [Object]: What to supply to req.body if you're triggering a POST.Request objectPropertiesreq.app [Object]: Supported, however the app object returned will not have all the same properties and methods as Express itself due to the API differences documented above.req.baseUrl [String]: Stubbed out. This will always be '' because single-page-express does not have a concept of app mounting in the way that Express does. See feature request.req.body [Object]: Supported.req.cookies [Object]: Supported.req.fresh [Boolean]: Stubbed out. This will always be true because there is no request cycle concept in single page app contexts.req.hostname [String]: Supported.req.ip [String]: Stubbed out. This will always be 127.0.0.1 because there is no request cycle concept in single page app contexts.req.ips [Array of Strings]: Stubbed out. This will always be [] because there is no request cycle concept in single page app contexts.req.method [String]: Supported.req.originalUrl [String]: Supported.req.params [Object]: Supported.req.path [String]: Supported.req.protocol [String]: Supported.req.query [String]: Supported.req.res [Object]: Supported.req.route [String]: Supported.req.secure [Boolean]: Supported.req.signedCookies [Object]: Stubbed out. This will always be {} because there is no request cycle concept in single page app contexts.req.stale [Boolean]: Stubbed out. This will always be false because there is no request cycle concept in single page app contexts.req.subdomains [Array of Strings]: Supported.req.xhr [Boolean]: Stubbed out. This will always be true because there is no request cycle concept in single page app contexts.Other req properties from the Node.js API: Not supported. They are uncommonly used in Express applications, so they are not even stubbed out. See feature request.MethodsAll Express request object methods are stubbed out but do nothing because because there is no request cycle concept in single page app contexts and all of the Request methods in Express pertain to the HTTP traffic flowing back and forth between the server and client.Likewise all other req methods from the Node.js API are not supported. They are uncommonly used in Express applications, so they are not even stubbed out. See feature request.New properties defined by single-page-expressreq.backButtonPressed [Boolean]: This will be true when the browser back button was pressed. A class backButtonPressed will also be added to the <html> element.req.forwardButtonPressed [Boolean]: This will be true when the browser forward button was pressed. A class forwardButtonPressed will also be added to the <html> element.req.singlePageExpress [Boolean]: This property will always be set to true. You can use it to detect whether your route is executing in the single-page-express context or not.Response objectPropertiesres.app [Object]: Supported, however the app object returned will not have all the same properties and methods as Express itself due to the API differences documented above.res.headersSent [Boolean]: Stubbed out. This will always be false because there is no request cycle concept in single page app contexts.res.locals [Object]: Stubbed out: This will always return {} because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.res.req [Object]: Supported.Other res properties from the Node.js API: Not supported. They are uncommonly used in Express applications, so they are not even stubbed out. See feature request.New properties defined by single-page-expressres.addTargets [Array of Strings]: If using the default render method, use this variable to set an array of query selectors representing elements to target for replacement in addition to whatever is set by app.defaultTargets. Elements found matching the query strings in the array will be replaced with the corresponding query string from the rendered template.res.afterRender(params) [Function]: If using the default render method, you can set this to a function that will execute after every render.res.beforeRender(params) [Function]: If using the default render method, you can set this to a function that will execute before every render.res.focus [String]: If using the default render method, if you set res.focus, the browser's focus will be set to that element after the page is rendered. If you do not set res.focus, then the browser's focus will be set to the first non-inert element in the DOM with the autofocus attribute, or, if none are present, it will be set to whatever the target element was set to for the DOM update.res.removeBaseTags [Boolean]: If using the default render method, this will remove any <base> tags from the page before doing the DOM update.res.removeHeadTags [Boolean]: If using the default render method, this will remove all children of the <head> tag except the title element from the page before doing the DOM update.res.removeLinkTags [Boolean]: If using the default render method, this will remove any <link> tags from the page before doing the DOM update.res.removeMetaTags [Boolean]: If using the default render method, this will remove any <meta> tags from the page before doing the DOM update.res.removeScriptTags [Boolean]: If using the default render method, this will remove any <script> tags from the page before doing the DOM update.res.removeStyleTags [Boolean]: If using the default render method, this will remove any <style> tags from the page before doing the DOM update.res.removeTemplateTags [Boolean]: If using the default render method, this will remove any <template> tags from the page before doing the DOM update.res.target [String or Array of Strings]: If using the default render method, use this variable to set a query selector or array of query selectors to determine which DOM node contents will be replaced by your template render's contents. If none is supplied, and neither app.defaultTarget nor app.defaultTargets is set, then the contents of the <body> tag will be replaced with the output of your rendered template.res.title [String]: If using the default render method, use this variable to set a page title for the new render.res.updateDelay [Number]: If using the default render method, use this variable to set a delay in milliseconds before the render occurs. If not using the default render method, this property will still allow you to specify a delay before resetting the scroll position.res.resetScroll [Boolean]: Purges the memory of the scroll position for this route so that scroll position is reset to the top for this page and all its child containers.Methodsres.append(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.attachment(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.cookie(): Supported.res.clearCookie(): Supported.res.download(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.end(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.format(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.get(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.json(): Supported, but behaves differently than Express. This method will log the JSON data to the console.res.jsonp(): Stubbed out but does nothing because it is not useful in single page app contexts.res.links(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.location(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.redirect(): Supported.res.render(): Supported.res.send(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.sendFile(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.sendStatus(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.set(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.status(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.type(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.vary(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.Other res methods from the Node.js API: Not supported. They are uncommonly used in Express applications, so they are not even stubbed out. See feature request.Router objectNot supported: See feature request."})
window.siteTexts.push({file: "docs/single-page-express/latest/usage/index.html", title: "Single Page Express — usage (latest)", text: "InstallFirst, install single-page-express from npm.The package is distributed with the following builds available:dist/single-page-express.cjs: CommonJS bundle: const singlePageExpress = require('single-page-express')dist/single-page-express.js: Standalone bundle that can be included via <script> tags. Declares a global variable: singlePageExpressdist/single-page-express.min.js: Minified standalone bundle that can be included via <script> tags. Declares a global variable: singlePageExpressdist/single-page-express.mjs: ES module: import singlePageExpress from 'single-page-express'dist/single-page-express.min.mjs: Minified ES module: import singlePageExpress from 'single-page-express/min'UseThen, in your frontend code:const templatingEngine = require('') // define which templating engine to use here const templates = {} // load some templates hereFor templatingEngine, use something like teddy, mustache, or any other templating system that supports Express and works in the browser.For templates, create an object of key/value pairs where the key is the name of the template and the value is the template code.Once those variables are defined, you can call the single-page-express constructor.Below is an example using Teddy for templating and defining two simple templates.const templatingEngine = require('teddy/client') const templates = {   index: '<p>hello world</p>',   secondPage: '<p>this page has a {variable} in it</p>' } const app = require('single-page-express')({   templatingEngine,   templates })Defining routesThe various methods of defining routes like you would with Express are supported.A simple example:app.route('/').get(function (req, res) {   res.render('index', {}) })  app.route('/secondPage').get(function (req, res) {   res.render('secondPage', {     variable: 'variable with contents: \"hi there!\"' &nbsp;&nbsp;}) })Some more examples:// using the app.METHOD syntax app.get('/routeWithAppDotMethod', function (req, res) {   res.render('someTemplate', { some: 'model' }) })  // using the app.route('route').METHOD syntax app.route('/routeWithAppDotRouterDotMethod').get(function (req, res) {   res.render('someTemplate', { some: 'model' }) })  // route with params app.route('/route/:with/:params').get(function (req, res) {   console.log('req.params:', req.params)   res.render('someTemplate', { some: 'model' }) })  // route with express 4 wildcard syntax app.route('*').get(function (req, res) {   res.render('someTemplate', { some: 'model' }) })  // route with express 5 wildcard syntax app.route('*:all').get(function (req, res) {   res.render('someTemplate', { some: 'model' }) })  // handle a form submit app.route('/routeWithFormSubmit').post(function (req, res) {   console.log('req.body:', req.body)   res.render('someTemplate', { some: 'model' }) })You can also call app.triggerRoute(params) to activate the route callback registered for a given route, as though the link was clicked or a form was POSTed.Params accepted by app.triggerRoute include:route: Which route you're triggering.method: e.g. GET, POST, etc. (Case insensitive.)body: What to supply to req.body if you're triggering a POST.Controlling scroll position behaviorBy default, single-page-express will remember the scroll position of pages that have been visited. It will also remember the scroll position of child containers on each page as well, but only if those containers have assigned id attributes.If you wish to not remember the scroll position on a per route basis, supply res.resetScroll = true in your route. To disable this memory app-wide, set the alwaysScrollTop param to true in the constructor.Running the sample appsThere are 3 sample apps you can run to see demos of how single-page-express can be used:Basic frontend-only sample app:This is a minimalist demo of single-page-express that just demos various kinds of routes working as expected, but does not wire up any templating system or do anything other than log data to the console when the render method is called.To run it:npm cinpm run sample-app-basic-frontend-onlyOr npm run sample1Go to http://localhost:3000Basic frontend-only sample app with templating:Similar to the above demo, but includes a templating engine and demos page navigation in the single page app context.To run it:npm cinpm run sample-app-basic-frontend-only-with-templatingOr npm run sample2Go to http://localhost:3000Express-based sample app:This is a full Express app that demos sharing routes and templates on the backend and frontend.To run it:cd sampleApps/expressnpm cicd ../../npm run express-sampleOr npm run sample3Or cd into sampleApps/express and run npm ci and npm startGo to http://localhost:3000More complex Express-based sample app:Similar to the previous one but tests more features of single-page-express. This app exists mainly for the automated tests, but you can use it as a template for your app too if you like.To run it:cd sampleApps/express-complexnpm cicd ../../npm run express-express-complexOr npm run sample4Or cd into sampleApps/express-complex and run npm ci and npm startGo to http://localhost:3000"})
window.siteTexts.push({file: "docs/source-configs/latest/changelog/index.html", title: "Source Configs — changelog (latest)", text: "1.0.0Breaking: Changed default behavior for configs with no default value to populate the config value's name instead of null by default.Breaking: Removed deployConfig feature.Added new secret schema metadata feature to declare certain configs (e.g. passwords or API keys) sensitive.Added safelyPrintSchema method to return schema with secret configs redacted.Updated dependencies.0.3.6Various dependencies updated.Migrated colors to @colors/colors0.3.5Added a function to make it easy for developers to add a -h or --help command to their applications that will print a summary of supported command line options.Dropped support for Node 12 and below.Various dependencies updated.0.3.4Fixed a bug with command line args. https://github.com/rooseveltframework/source-configs/issues/198Various dependencies updated.0.3.3Fixed a bug where disabling the logger didn't disable all logs.Various dependencies updated.0.3.2Fixed a bug where config value doesn't source properly.Various dependencies updated.0.3.1Fixed broken push to npm.Ensured each usage loads config in isolation.Various dependencies updated.0.3.0Altered the source-configs usage in such a way that an optional configuration param can be passed which includes the following options:logging: Ability to enable/disable logging (Roosevelt will celebrate!)transform: A function that will get called after building the config from the schema but before returning it. Useful for handling various edge cases that the schema cannot on its own.sources: An array of sources in priority order. Can be a combination of built-in sources and custom ones (with object supplied). Notably this also allows built-ins to be omitted entirely if desired.This config object is completely optional and when not passed source-configs will behave exactly the same as it did before, so this should not break any apps currently using it.Added full test coverage.Suppress logs during tests.Various dependencies updated.CI overhauled.0.2.1Fixed bug where certain reserved words would break source-configs.Various dependencies updated.0.2.0Changed deployFile to deployConfigFile and fixed associated typo in the README.Various dependencies updated.0.1.2Updated roosevelt-logger, which fixes some downstream bugs.Various other dependencies updated.CI improvements.0.1.1Fixed main filename for npm package.Various dependencies updated.0.1.0Initial version."})
window.siteTexts.push({file: "docs/source-configs/latest/configuration/index.html", title: "Source Configs — configuration (latest)", text: "APIlogging [Boolean]: Whether or not source-configs will log to console. Default: true.sources [Array of Strings]: An array of sources that can be a mix of built-in sources and custom source objects in order of priority.Built-in sources can be referenced in multiple ways:Command line: \"command line\" or \"commandLineArg\".Environment variable: \"environment variable\" or \"envVar\".Default:[   'command line',   'environment variable' ]Supply an object to add custom sources:[   'command line',   'environment variable',   { custom: 'object' } ]transform(config, commandLineArgs) [Function]: A function that can be used to mutate your config after it has been parsed and sourced but before it gets returned by source-configs.config [Object]: The config after being parsed by source-configs.commandLineArgs [Object]: CLI flags as parsed by yargs-parser.Example:const sourceConfigs = require('source-configs') const schema = require('./your-schema-js-file.json')  const config = sourceConfigs(schema, {   transform: (config, commandLineArgs) => {     // check for a cli flag that wouldn't normally translate into a config     if (commandLineArgs.switchPort === true) {       config.websocket.port = 43711     }     return config // return the config when done   } })  // access that config configs console.log(config.websocket.port) // prints 43711Properties of source-configs moduleIn addition to its constructor, source-configs exposes the following properties:configs [Object]: The resulting configs after running source-config's constructor.commandLineArgs [Array]: All command line arguments passed to your application, including those not listened for by your schema. Powered by yargs-parser.yargsParser [Function]: The instance of yargs-parser that source-configs used to compile all command line arguments passed to your application.printHelp [Function]: A function which will generate a help menu describing the command line arguments defined in the schema. Useful for if you want to define a -h or --help command line argument to print all available supported command line arguments. Just print console.log(config.printHelp()) to print that information to your users.safelyPrintSchema [Function]: A function which will print the fully post-processed schema to the console, but obscure any data that is marked as secret."})
window.siteTexts.push({file: "docs/source-configs/latest/usage/index.html", title: "Source Configs — usage (latest)", text: "First declare source-configs as a dependency in your app.Then create a config schema JSON object to tell source-configs what config values to listen for.Here's a simple example declaring that our application will use a WebSocket with a configurable host, port, and protocol:const sourceConfigs = require('source-configs') const schema = require({   websocket: {     host: {       description: 'WebSocket host URL',       default: 'localhost',       commandLineArg: ['--websocket-host-url', '--ws-host', '-h'],       envVar: ['WEBSOCKET_HOST_URL', 'WS_HOST']     },     port: {       description: 'WebSocket port',       default: 8081,       commandLineArg: ['--ws-port', '-p'],       envVar: 'WS_PORT'     },     protocol: {       description: 'Which WebSocket protocol',       values: ['ws', 'wss'],       commandLineArg: '--ws-protocol',       envVar: 'WS_PROTOCOL'     },     url: 'user-defined function'   } )  // define the user-defined function above schema.websocket.url = (config) => config.protocol + '://' + config.host + ':' + config.port  // run source-configs against the schema const config = sourceConfigs(schema)  // access one of the configs console.log(config.websocket.port)Schema metadataSchemas support the following metadata for each configurable property in order to create constraints if desired or add additional functionality:description [String]: Describe what this config will be used for.default [any]: Set a default value for this config. If not set, the default will be set to the config's name.values [Array]: Enumerated list of values that are valid. If not set, any value will be valid.commandLineArg [String or Array of Strings]: Command line argument(s) to listen for that will set this config. If not set, source-configs will not listen for command line arguments to set the value for this config.envVar [String or Array of Strings]: Environment variable(s) to listen for that will set this config. If not set, source-configs will not listen for an environment variable to set the value for this config.secret [Boolean]: Whether or not this value is sensitive information, like a password.User-defined functionsAdditionally, a schema can be a function which has the parent config passed to it as the first argument. To do this create a key/value pair within the schema object:If the schema is stored in a .js file, set the key as the desired function name and the value as the function.If using a .json file to store the schema, set the key as the desired function name and the value as 'user-defined function'. Once the .json file is required in, override the key's value with the desired function.Custom configurationIn addition to the above instantiation method, source-configs also accepts an optional configuration object that can be passed to the constructor as a second object like so:const sourceConfigs = require('source-configs') const schema = require('./your-schema-js-file.json')  const config = sourceConfigs(schema, {   logging: true,   sources: [     'command line',     'environment variable',     { custom: 'object' }   ] })"})
window.siteTexts.push({file: "docs/teddy/latest/changelog/index.html", title: "Teddy — changelog (latest)", text: "1.1.4Added slicker live demo docs.Added some performance improvements.Fixed a bug when escaping escape tags or escape comments.Updated dependencies.1.1.3Added <!--# escape comments -->.Updated dependencies.1.1.2Added teddy.clearTemplates() method to clear the template cache.Updated dependencies.1.1.1Added support for variables-with-dashes-in-their-names.Updated dependencies.1.1.0Added <escape> tag.Excluded <pre> tags from Teddy parsing. Add a parse attribute to prevent this behavior.Fixed a bug that could cause infinite loops in variable parsing.Updated dependencies.1.0.1Fixed a bug that caused client-side Teddy to try to fetch resources from the server inappropriately while parsing the template.Updated dependencies.1.0.0Added support for a new <!--! server-side comments --> syntax.Changed the behavior of <include> tags to display an error when attempting to include a template that does not exist.Updated various dependencies.0.6.26Fixed a bug that could cause ${templateLiteral} strings to lose their $ character if they were meant to print as strings and not be parsed as Teddy variables.Updated various dependencies.0.6.25Fixed bugs associated with selected-value and checked-value attributes.0.6.24Added  to force hide or {varName} to force display variable. This is a per-var override for:teddy.setEmptyVarBehavior('hide'): Will make it possible for variables which don't resolve to display as empty strings instead of displaying the variable.Default: 'display'.Added support for sourcing most Teddy attribute values dynamically from {variables}.Added boolean logic to one-line if statements.Added selected-value and checked-value attributes for setting what option to select or what checkbox / radio to check in a more concise way than using one-line ifs.Fixed a bug that prevented boolean logic from working if there were multiple and or multiple or attributes on an element.Updated various dependencies.0.6.23Added new <inline> tag for adding inline CSS or JS using Teddy variables. Usage is optional, but it can help you avoid syntax error warnings in your code editor.Fixed a bug preventing <include> args from parsing correctly in certain circumstances.Updated various dependencies.0.6.22Made variable name lookups case insensitive in server-side Teddy to match client-side Teddy so as to match HTML grammar rules.Added some performance improvements to loops and includes.Fixed a bug preventing <noparse> and <noteddy> tags from working in markup passed to include tags.Updated various dependencies.0.6.21Fixed missing exports so you can require/import teddy less verbosely in your projects.Updated docs to clarify what the different builds of Teddy are meant to be used for.Removed minified cjs build since there is no use case for it.Updated various dependencies.0.6.20Fixed double-encoding HTML entity bug in client-side mode.Updated various dependencies.0.6.19Made client-side Teddy parser a bit more tolerant of bad markup.0.6.18Fixed a bug which caused client-side Teddy to rename yet more form elements accidentally.0.6.17Fixed a bug which caused client-side Teddy to handle array length lookups differently from cheerio-driven Teddy.Fixed a bug which caused client-side Teddy to crash if extra spaces were in markup attribute lists.Fixed a bug which caused client-side Teddy to return the wrong data with 2 or more layers of object lookups if the object keys were camelCase.Fixed a bug which caused client-side Teddy to rename some form elements accidentally.Updated various dependencies.0.6.16Fixed a bug which caused client-side Teddy to fail in some situations like putting a <loop> in a <select> element.Deprecated a test that tests for passing numeric arguments to include tags, since this violates HTML grammar and never should've worked to begin with. It may still work with cheerio-driven Teddy because cheerio's parser is more forgiving than a standards-compliant one unless and until cheerio deprecates support for that itself. Client-side Teddy will not support it, so for consistency the test has been removed.Updated various dependencies.0.6.15Fixed a bug which caused the cheerio-driven modules to not work client-side if you choose to use them there.Updated various dependencies.0.6.14Finished work on cheerioPolyfill.js which makes it possible for Teddy to execute in client-side contexts without using cheerio, allowing for a very small bundle size for client-side Teddy (17kb minified).Fixed client-side tests to test Teddy in the browser properly.Refactored tests to improve maintainability.Updated various dependencies.0.6.13Removed xregexp and html-entities dependencies. Also Replaced cheerio with cheerio/slim. These changes have reduced bundle size significantly.Began work on cheerioPolyfill.js which will allow Teddy to execute in client-side contexts without using cheerio. This will result in even smaller bundle sizes (currently around 16kb minified), however the work is unfinished.Updated various dependencies.0.6.12Downgraded cheerio to prevent webpack errors when using Teddy on frontend.Updated various dependencies.0.6.11Added new setting teddy.setEmptyVarBehavior('hide') that will make it possible for variables which don't resolve to display as empty strings instead of displaying the variable.0.6.10Added support for template literal ${templateLiteral} variables.Fixed bug that caused Teddy to crash if you attempted to loop through a Set.Replaced internal HTML entities scanner with the html-entities npm package.Updated various dependencies.0.6.9Fixed issue with rendering variables with empty strings piped through variables with flags.Updated various dependencies.0.6.8Fixed issue with rendering special characters correctly when piped through a teddy noparse flagged variable.Updated various dependencies.0.6.7Fixed issue causing server-side comments to not be stripped from templates parsed as strings instead of as files.Updated various dependencies.0.6.6Fixed issue causing the template caching feature to not work properly in Express apps.Updated various dependencies.0.6.5Fixed scenario where one-line if with only a false condition could crash if it's fed by arguments from an include element.Fixed crash associated with embedding JSON strings in script tags.Fixed bug causing \"{}\" to be inappropriately stripped from templates.Reduced unminified bundle size from 2.4mb to 1.5mb and added a minified bundle that reduces it further to 449kb.Improved logging and refactored the code a bit.Updated various dependencies.0.6.4Fixed crash that could occur in an unusual edge case.Various dependencies bumped.0.6.3Restored template-level caching feature with an improved API.Restored compile method but now with an API similar to other templating systems. It will now take a template string and return a function which when given model data will render HTML from the template and model data.Now hosting the Teddy playground on https://rooseveltframework.github.io/teddy/playground.html. Thanks to jsDelivr for CDN hosting.Various dependencies bumped.0.6.2Significant performance improvements.Added a new <cache> element that can be used to improve template parsing performance further.Various dependencies bumped.0.6.1Fixed memory leak related to the no parse block feature.Various dependencies bumped.0.6.0Breaking: <include> elements will no longer automatically disable escaping content of <arg> variables. Use {var|s} to disable escaping yourself.Breaking: One-line if statements like if-something='' will now evaluate as true if something is present in the model.Breaking: You can no longer apply more than one one-line if statement to the same element.Breaking: Boolean logic will no longer allow you to query the same variable twice in the same if statement or use the same boolean logic operator twice in the same if statement.Breaking: You can no longer use Teddy tags in elements that interpret child text as plain text, e.g. <style>, <script>, <textarea>, etc.Breaking: Removed the noparse and noteddy attribute feature from <include> tags.Breaking: Removed Teddy's internal minifier since third party HTML minifiers are better.Breaking: Removed caching feature. A better-designed one may arrive in the future.Breaking: Server-side comments will now always be removed, even if they are contained in a no-parse block. To preserve them for display, you must manually escape them with HTML entities.Breaking: teddy.compile was removed as a public method. To set a new template, you must now call teddy.setTemplate to create it. Accordingly the teddy.compileAtEveryRender method has been removed as well.Breaking: The |p flag will now also apply the same logic as |s as well. If you have any {variables} written like {variable|s|p}, you can now optionally write it as {variable|p} instead to get identical functionality.Breaking: The in attribute as a synonym for through in <loop> has been removed.Significant stability improvements; lots of bugs fixed.Some performance improvements, some performance downgrades (notably looping through large datasets is slightly slower now).Simplified API.maxPasses default changed from 25000 to 1000.Various dependencies bumped.0.5.10Fixed bug with one-line-ifs. See https://github.com/rooseveltframework/teddy/pull/540Various dependencies bumped.0.5.9Fixed an issue where model content could get printed without being escaped even when the |s flag is not present.Various dependencies bumped.0.5.8Fixed bug in client-side support where file extensions would be inappropriately appended to template names in some cases.Dropped Node 15 support. Added Node 16 support.Various dependencies bumped.0.5.7Closed:https://github.com/rooseveltframework/teddy/issues/446https://github.com/rooseveltframework/teddy/issues/431https://github.com/rooseveltframework/teddy/issues/449https://github.com/rooseveltframework/teddy/issues/426Dropped Node 12 support.Various dependencies bumped.0.5.6Closed https://github.com/rooseveltframework/teddy/issues/404Various dependencies bumped.0.5.5Closed https://github.com/rooseveltframework/teddy/issues/4210.5.4Closed https://github.com/rooseveltframework/teddy/issues/412Closed https://github.com/rooseveltframework/teddy/pull/418Closed many unreported bugs.Wrote a test for https://github.com/rooseveltframework/teddy/issues/404Wrote a test for https://github.com/rooseveltframework/teddy/issues/357 but upon further investigation now consider it a wontfix.Various dependencies bumped.0.5.3Fixed some Windows-exclusive bugs related to how newlines are parsed in Windows vs. other operating systems.Various dependencies bumped.CI improvements.0.5.2Undo accidental removal of package-lock.json.0.5.1Removed postinstall script since it created a problematic prompt to install webpack-cli during npm installs.0.5.0Variables with spaces in them will now be parsed.Fixed issue where one line if statements couldn't use variables as part of the condition.Fixed issue where recursive variable resolution could cause an infinite loop.Significant performance improvements.Total rewrite into a much cleaner codebase:Less reliance on regex and more reliance on character counting in base algorithm.Code now split into separate files for development but bundled into a single JS file with Webpack during deployment.Various dependencies bumped.CI improvements.0.4.28 and belowHere be dragons…"})
window.siteTexts.push({file: "docs/teddy/latest/configuration/index.html", title: "Teddy templating engine — configuration (latest)", text: "APIteddy.getTemplates(): Get the internal cache of templates.teddy.setTemplate(name, template): Add a new template to the template cache.teddy.clearTemplates(): Clear the template cache.teddy.render(template, model): Render a template by supplying either source code or a file name (in Node.js).Returns fully rendered HTML.Removes <!--! teddy comments --> and {! teddy comments !}teddy.setTemplateRoot(path): Set the location of your templates directory. Default is the current directory.teddy.compile(templateString): Takes a template string and returns a function which when given model data will render HTML from the template and model data.Example:const templateFunction = teddy.compile('<p>{hello}</p>') templateFunction({ hello: 'world' }) // returns \"<p>world</p>\"teddy.setVerbosity(n): Sets the level of verbosity in Teddy's console logs. Call teddy.setVerbosity(n) where n equals one of the below values to change the default:0 or 'none': No logging.1 or 'concise': The default. Concise logging. Will usually only log serious errors.2 or 'verbose': Verbose logging. Logs even minor errors.3, 'debug', or 'DEBUG': Debug mode. Very verbose.teddy.setDefaultParams(): Reset all params to default.teddy.maxPasses(n): Sets the maximum number of passes the parser can execute over your template. If this maximum is exceeded, Teddy will stop attempting to render the template. The limit exists to prevent the possibility of teddy producing infinite loops due to improperly coded templates. Default: 1000.teddy.setEmptyVarBehavior('hide'): Will make it possible for variables which don't resolve to display as empty strings instead of displaying the variable. Default: 'display'.{varName|h} to force it to hide or {varName|d}teddy.setIncludeNotFoundBehavior('hide'): Will make it possible for <include> tags which don't resolve to display as empty strings instead of displaying an error. Default: 'display'.teddy.setCache(params): Declare a template-level cache.Params:template: Name of the template to cache.key: Model variable to cache it by. Set to 'none' to cache the first render for all model values.maxAge: How old the cache can be in milliseconds before it is invalidated and will be re-rendered. Default: 0 (no limit).maxCaches: The maximum number of caches that Teddy will be allowed to create for a given template/key combination. If the maximum is reached, Teddy will remove the oldest cache in the stack, where oldest is defined as the least recently created or accessed. Does not apply to caches where key is not also set. Default: 1000.Example:teddy.setCache({   template: 'someTemplate.html',   key: 'city',   maxAge: 1000 })teddy.clearCache(name): If name is a string, it will delete the whole cache at that name.teddy.clearCache(name, keyVal): Deletes just the value at that keyVal. Assumes name will be a string.teddy.clearCache(params): If params is an object, it will delete a whole template-level cache.Params:template: Name of the template to delete the cache of.key: Model variable cache index to delete it by. If key is not provided, it will delete all caches of that template."})
window.siteTexts.push({file: "docs/teddy/latest/usage/index.html", title: "Teddy templating engine — usage (latest)", text: "InstallInstall Teddy with npm: npm i teddy.The package is distributed with builds intended for usage in Node.js and separate builds intended for browser use. The Node.js builds use cheerio for DOM parsing and the browser builds use native DOM parsing instead.Note: Because the Node.js builds include cheerio as a dependency, they are much larger files. As such, you can use the Node.js builds in the browser if you want, but it is not recommended because they will result in much larger bundle sizes. Only do so if you encounter a bug that is exclusive to the browser builds.For use in Node.js:dist/teddy.cjs: CommonJS bundle: const teddy = require('teddy')dist/teddy.mjs: ES module: import teddy from 'teddy'For use in browsers:dist/teddy.client.cjs: CommonJS bundle: const teddy = require('teddy/client')dist/teddy.js: Standalone bundle that can be included via <script> tags.dist/teddy.min.js: Minified standalone bundle that can be included via <script> tags.dist/teddy.client.mjs: ES module: import teddy from 'teddy/client'dist/teddy.min.mjs: Minified ES module: import teddy from 'teddy/client/min'Once Teddy is included in your app, you can then pass source code to Teddy's render method, like so: teddy.render(sourceCode, yourModel). The render method will return a fully rendered template.To use Teddy with with Express:First require or import express and teddy.Then initialize Express and configure it to your liking.In your Express config, make sure to include this line: app.engine('html', teddy.__express).If you're interested in using Teddy with the gulp.js build system for Node apps, check out the gulp-teddy project.VariablesDisplay a variable by simply writing {varName} anywhere in the template. You can also use template literal ${templateLiteral} variables as well.Live demoModel{   \"varName\": \"hello world\" }Template{varName}RenderRendered:<p><strong>JavaScript is disabled in your browser, so you cannot run the live demo.</strong></p>All variable names are case-insensitive, both in {varName} form and when referenced in Teddy tags described below. This is to comply with the rules of HTML grammar which mandate that HTML tags and attributes be case insensitive.Variables escape HTML entities by defaultHTML entities such as <, >, &, ', and \" will be escaped by default as a safeguard against cross-site scripting.If you want to deliberately escape some text or some HTML, then wrap it in an <escape> tag like <escape><p>hello</p></escape> or an escape comment like <!--#<p>hello</p>--> which will output: &lt;p&gt;hello&lt;/p&gt; to render the code as text.Live demoModelTemplate<escape><p>hello</p></escape>RenderRendered:<p><strong>JavaScript is disabled in your browser, so you cannot run the live demo.</strong></p>If you need to suppress this escaping in certain scenarios, write your variable like this: {varName|s}.A note about inline CSS or JS via Teddy variablesIf you want to pass inline CSS or JS code to a <style> or <script> tag via a Teddy variable, you can do so like this:<style>{inlineStyles|s}</style> <script>{inlineScript|s}</script>That will work, but your code editor may complain that this is a syntax error. To avoid that, Teddy also provides a convenience tag called <inline> to let you do it like this instead:<inline css=\"inlineStyles\"></inline> <inline js=\"inlineScript\"></inline>The <inline> tag approach will work the same as the previous examples using <style> or <script> tags manually, but code editors will not consider it a syntax error.IncludesInclude another template:<include src=\"other-template.html\"></include>Or use the no extension shorthand (Teddy will append the .html extension for you):<include src=\"other-template\"></include>Pass arguments to the template:<include src=\"other-template\">   <arg firstArgument>Plain text argument</arg>   <arg secondArgument>     <span>Argument with HTML in it</span>   </arg> </include>The arguments you've defined will be accessible as {firstArgument} and {secondArgument|s} in the child template partial.html. Note you must use the |s flag to suppress escaping HTML entities in order to render the HTML in the second argument.Live demoModelTemplate<include src=\"other-template\">   <arg firstArgument>Plain text argument</arg>   <arg secondArgument>     <span>Argument with HTML in it</span>   </arg> </include>Other template<div>   <p>{firstArgument}</p>   <p>{secondArgument|s}</p> </div>RenderRendered:<p><strong>JavaScript is disabled in your browser, so you cannot run the live demo.</strong></p>ConditionalsCheck for the presence of a variable:<if something>   <p>The variable 'something' is present</p> </if> <else>   <p>The variable 'something' is not present</p> </else>Check a variable's value:<if something=\"hello\">   <p>The variable 'something' is set to 'hello'</p> </if> <else>   <p>The variable 'something' is not set to 'hello'</p> </else>Check for the non-presence of a variable:<unless something>   <p>The variable 'something' is not present</p> </unless> <else>   <p>The variable 'something' is present</p> </else>An <if> statement structure with an <elseif> tag which is evaluated if the first <if> fails:<if something>   <p>The variable 'something' is present</p> </if> <elseif somethingElse>   <p>The variable 'something' is not present, but 'somethingElse' is present</p> </elseif> <else>   <p>The variable 'something' is not present and neither is 'somethingElse'</p> </else>An <unless> statement structure with an <elseunless> tag which is evaluated if the first <unless> fails:<unless something>   <p>The variable 'something' is not present</p> </unless> <elseunless somethingElse>   <p>The variable 'something' is present, but 'somethingElse' is not present</p> </elseunless> <else>   <p>The variables 'something' and 'somethingElse' are both present</p> </else>Note: <if something> and <if something=\"\"> are considered logically equivalent statements in Teddy.Live demoModel{   \"something\": \"hello\" }Template<if something>   <p>The variable 'something' is present</p> </if> <else>   <p>The variable 'something' is not present</p> </else>RenderRendered:<p><strong>JavaScript is disabled in your browser, so you cannot run the live demo.</strong></p>Boolean logicBoolean logic operators are evaluated left to right.or operator:<if something or somethingElse>   <p>This will render if either 'something' or 'somethingElse' is present.</p> </if>and operator<if something and somethingElse>   <p>This will render if 'something' is present and 'somethingElse' is present too.</p> </if>xor operator:<if something xor somethingElse>   <p>This will render if either 'something' is present or 'somethingElse' is present, but it will not render if both are present.</p> </if> <else>   <p>This will render if 'something' is present and 'somethingElse' is present too.</p> </else>not: prefix:<if not:something>   <p>This will render if 'something' is not present.</p> </if>Note: you cannot query the same variable twice in the same if statement or use the same boolean logic operator twice in the same if statement due to the rules of HTML grammar requiring that no HTML attributes appear more than once on the same tag.Live demoModel{ \"something\": \"hello\" }Template<if something or somethingElse>   <p>This will render if either 'something' or 'somethingElse' is present.</p> </if>RenderRendered:<p><strong>JavaScript is disabled in your browser, so you cannot run the live demo.</strong></p>One-line ifsIf you need a more concise conditional to control which attributes are applied to a given element, then use this syntax:<p if-something true='class=\"shown\"' false='class=\"hidden\"'>One-line if.</p>In that structure, the attribute if-something checks to see if the variable something is truthy. This means it will check for either variable presence in the model or the boolean value true. If so, the class declared in the true attribute is written to the element, resulting in the following output:<p class=\"shown\">One-line if.</p>If not, this will check for non-presence in the model or the boolean value false. If so, the class declared in the false attribute is written to the element, resulting in the following output:<p class=\"hidden\">One-line if.</p>Like the <if> tag you can check for both the presence of a variable as well as its value. To check the value of a variable, use this syntax:<p if-something=\"hello\" true='class=\"hello\"' false='class=\"not-hello\"'>One-line if.</p>It's important to note that whichever type of quotes you use on the outside of your true or false attributes must be reversed on the inside. So if you use single quotes on the outside, then you must use double quotes on the inside.Also note you can only have one one-line if statement per element.Live demoModel{ \"something\": \"hello\" }Template<p if-something true='class=\"shown\"' false='class=\"hidden\"'>One-line if.</p>RenderRendered:<p><strong>JavaScript is disabled in your browser, so you cannot run the live demo.</strong></p>LoopsAssume the following JS model:letters = ['a', 'b', 'c'];It can be iterated over like so:<loop through=\"letters\" val=\"letter\">   <p>{letter}</p> <!-- outputs a, b, c --> </loop>In the above example through=\"letters\" defines the JS model being iterated over and val=\"letter\" defines a local variable for the current letter being iterated over.When looping over more complex data structures, sometimes you will need access to both the key and the value of your array or object. For instance, suppose this JS model:names = {jack: 'guy', jill: 'girl', hill: 'landscape'};       It can be iterated over like so:<loop through=\"names\" key=\"name\" val=\"description\">   <p>{name}</p> <!-- outputs jack, jill, hill -->   <p>{description}</p> <!-- outputs guy, girl, landscape --> </loop>We once again define a through attribute which we set to through=\"names\" and a val attribute which we set to val=\"description\" similar to the last example. However this time we've iterated over a JS object with named keys instead of a simple indexed array, so it is useful to define a key attribute in the <loop> tag to gain access to the name of the current iteration variable. We have defined it as key=\"name\" in this example.Even complex, hierarchical data structures can be iterated over. For instance, suppose this JS model:objects = [{a:1, b:2, c:3}, {a:4, b:5, c:6}, {a:7, b:8, c:9}];       For the above array of objects, we can combine the techniques illustrated above to display each member of the hierarchy in sequence:<loop through=\"objects\" key=\"i\" val=\"item\">   <p>{i}</p> <!-- outputs 0, 1, 2 -->   <p>{item.a}</p> <!-- outputs 1, 4, 7 -->   <p>{item.b}</p> <!-- outputs 2, 5, 8 -->   <p>{item.c}</p> <!-- outputs 3, 6, 9 --> </loop>Live demoModel{   \"letters\": [     \"a\",     \"b\",     \"c\"   ] }Template<loop through=\"letters\" val=\"letter\">   <p>{letter}</p> </loop>RenderRendered:<p><strong>JavaScript is disabled in your browser, so you cannot run the live demo.</strong></p>Selecting option elements, checkboxes, or radio buttonsYou could use a one-line if to select <option> elements inside of <select> fields, or to select checkboxes / radio buttons like this:<select>   <option value=\"a\" if-foo=\"a\" true=\"selected\">A</option>   <option value=\"b\" if-foo=\"b\" true=\"selected\">B</option>   <option value=\"c\" if-foo=\"c\" true=\"selected\">C</option> </select>However that is tedious.Teddy also provides a convenience attribute selected-value to automate this process so you can write it like this:<select selected-value=\"b\">   <option value=\"a\">A</option>   <option value=\"b\">B</option> <!-- this will be selected -->   <option value=\"c\">C</option> </select>This also works with checkboxes and radio buttons using checked-value:<div checked-value=\"b\">   <input type=\"checkbox\" name=\"letters\" value=\"a\">   <input type=\"checkbox\" name=\"letters\" value=\"b\"> <!-- this will be selected -->   <input type=\"checkbox\" name=\"letters\" value=\"c\"> </div>  <div checked-value=\"b\">   <input type=\"radio\" name=\"letters\" value=\"a\">   <input type=\"radio\" name=\"letters\" value=\"b\"> <!-- this will be selected -->   <input type=\"radio\" name=\"letters\" value=\"c\"> </div>  <div checked-value=\"b\" checked-value=\"{check-this-value}\"> <!-- you can also supply values -->   <input type=\"checkbox\" name=\"letters\" value=\"a\">   <input type=\"checkbox\" name=\"letters\" value=\"b\"> <!-- this will be selected -->   <input type=\"checkbox\" name=\"letters\" value=\"c\"> <!-- this will be selected --> </div>Live demoModel{   \"check-this-value\": \"c\" }Template<div checked-value=\"b\">   <input type=\"checkbox\" name=\"letters\" value=\"a\">   <input type=\"checkbox\" name=\"letters\" value=\"b\"> <!-- this will be selected -->   <input type=\"checkbox\" name=\"letters\" value=\"c\"> </div>  <div checked-value=\"b\">   <input type=\"radio\" name=\"letters\" value=\"a\">   <input type=\"radio\" name=\"letters\" value=\"b\"> <!-- this will be selected -->   <input type=\"radio\" name=\"letters\" value=\"c\"> </div>  <div checked-value=\"b\" checked-value=\"{check-this-value}\"> <!-- you can also supply values -->   <input type=\"checkbox\" name=\"letters\" value=\"a\">   <input type=\"checkbox\" name=\"letters\" value=\"b\"> <!-- this will be selected -->   <input type=\"checkbox\" name=\"letters\" value=\"c\"> <!-- this will be selected --> </div>RenderRendered:<p><strong>JavaScript is disabled in your browser, so you cannot run the live demo.</strong></p>Non-parsed blocksTo skip teddy parsing a block of code, use a <noteddy> or <noparse> tag:<p><noteddy>{this_var_will_not_be_parsed}</noteddy></p>You can also instruct the contents of a variable to not be parsed after that variable is rendered using the |p flag:<p>{this_var_will_be_parsed_but_its_contents_will_not_be|p}</p>Note: Teddy tags will also not be parsed if they appear inside of elements that interpret child text as plain text, e.g. <style>, <script>, <textarea>, etc. Teddy will also not parse anything in a <pre> tag unless you add a parse attribute to the <pre> tag like <pre parse>.Caching blocksYou can use a <cache> element to prevent Teddy from having to continuously re-render blocks of template code that frequently resolve to the same markup in order to improve template parsing performance.Here's an example:<p>Dynamic: Welcome {user}!</p> <cache name=\"weather\" key=\"city\" maxCaches=\"3\">   <p>Cached: High temperature today in {city} is {value}.</p> </cache>In the above example, assume that there are a large number of values that {user} could resolve to, but there are a limited number of values that {city} and {value} could resolve to. In that case, we can cache the block of code that doesn't need re-rendering as often by enclosing it in a <cache> element to improve the performance of template parsing while still allowing other parts of the template to be parsed dynamically at each render.Here's what the attributes mean:name: What you want to name your cache. The name is necessary so you can manually clear the cache from JavaScript later if you like via teddy.clearCache():teddy.clearCache(name) will delete the whole cache at that name, e.g. all values for {city}.teddy.clearCache(name, keyVal) will delete just the value at that keyVal, e.g. just the cache for when {city} resolves to \"NY\" if you set keyVal to \"NY\".key: The model value to use to index new caches.Example: Suppose city in the above example could resolve to three possible values: \"NY\", \"SF\", and \"LA\". In that case, the caching feature will create 3 caches using the city key: one for each of the three possible values.maxAge: How old the cache can be in milliseconds before it is invalidated and will be re-rendered. Default: 0 (no limit).maxCaches: The maximum number of caches that Teddy will be allowed to create for a given <cache> element. If the maximum is reached, Teddy will remove the oldest cache in the stack, where oldest is defined as the least recently created or accessed. Default: 1000."})
window.siteTexts.push({file: "docs/0.30.7/changelog/index.html", title: "changelog (0.30.7)", text: "0.30.7Added new onBeforeControllers event.Added new html.folderPerPage param.Made it easier to debug HTML validation errors on static sites.Fixed bugs associated with the stopServer() method.Fixed bugs associated with using a roosevelt.config.json file in your app.Fixed a bug that could cause middleware errors not to flow through the middleware stack correctly.Copyedited documentation significantly.Updated dependencies.0.30.6Added onBeforeStatics event.Altered makeBuildArtifacts log to be a warning.Fixed writing JS file log to be properly classified as info instead of log.Fixed a bug that could cause the static site generator to not write new files even if the file has changed.Updated dependencies.0.30.5Added error handling for if you supply Roosevelt constructor params to initServer or startServer.Fixed bugs that could cause initServer, startServer, and stopServer to not be properly awaitable.Fixed bug that would cause undefined to print on error pages in Roosevelt apps without a package.json version defined.Updated dependencies.0.30.4Fixed bugs that prevented CSS source maps from working correctly.Updated dependencies.0.30.3Fixed model overriding precedent in static site generator.0.30.2Fixed a crash associated with the default catch-all route.0.30.1Fixed a bug that caused two catch-all routes to appear in the router stack.Updated dependencies.0.30.0Breaking: Upgraded to Express 5.x.To migrate:Most Roosevelt apps probably only need to change * routes to *all.Apps that use more complex routing may need other changes.Full list of considerations for migrating to Express 5: https://expressjs.com/en/guide/migrating-5.htmlAdded expressSessionStore Express variable, which is the session store instance used by express-session module Roosevelt uses internally.Added support for catch-all * in static site generator model definitions.Updated dependencies.0.29.5Added new copy param that will copy files from a source location to a destination location.Added new feature to integrated webpack bundler to disable LICENSE.txt generation by default. This can be overridden by supplying your own optimization param to your webpack config.Improved docs.Updated dependencies.0.29.4Added first-line comment blocklist support to the static site generator.Added static site generator folder to the require module path.Added async/await support for static site models.Updated dependencies.0.29.3Fixed a bug that could cause some routes not to load.Fixed a bug that could cause more than one * route to end up in the router stack.Updated dependencies.0.29.2Fixed a bug that would cause MAKE_BUILD_ARTIFACTS to supersede the --build CLI flag.Fixed a bug that would cause an error to falsely print about not being able to create symlinks.Updated dependencies.0.29.1Fixed bugs associated with MAKE_BUILD_ARTIFACTS sometimes not working properly.Updated dependencies.0.29.0Breaking: Moved default output location for clientControllers and clientViews to the .build folder.To migrate your app, you will likely need to change js.webpack.bundles.config.resolve.modules to replace any entry that has \"${publicFolder}/js\" with \"${buildFolder}/js\".Breaking: Changed default of preprocessedViewsPath param from \".build/.preprocessed_views\" to \".build/preprocessed_views\" and changed default of preprocessedStaticsPath param from \".build/.preprocessed_statics\" to \".build/preprocessed_statics\".Added buildFolder param to customize the name of the .build folder.Altered output of controllersBundler and viewsBundler feature to produce files that are easier to read.Updated dependencies.0.28.1Fixed a bug where HTTPS certs wouldn't always automatically generate when they should.Updated various dependencies.0.28.0Breaking: Removed config auditor feature.Added more checks to the deprecation checker.Updated dependencies.0.27.0Breaking: Changed http/s param structure:Changed port param to http.port and changed the default to 43763.Changed https.port param default to 43711.Removed https.force param. Non-secure http can now be disabled via http.enable being set to false.Removed authInfoPath, passphrase, caCert, requestCert, and rejectUnauthorized params. Replaced them with options where you can pass any native option.The ca, cert, key, and pfx params can take file paths relative to your secretsDir in addition to everything else natively supported (strings, buffers, and arrays of strings or buffers).The file paths get resolved within arrays if you pass arrays to any of those as well.These collective changes mean most Roosevelt apps will need to alter their Roosevelt configs from something that looks like:\"port\": 19679, \"https\": {   \"enable\": true,   \"port\": 19679,   \"force\": true,   \"authInfoPath\": {     \"authCertAndKey\": {       \"cert\": \"cert.pem\",       \"key\": \"key.pem\"     }   } },To be something like this instead:\"http\": {   \"enable\": false }, \"https\": {   \"enable\": true,   \"port\": 19679,   \"options\": {     \"cert\": \"cert.pem\",     \"key\": \"key.pem\"   } },Breaking: Changed behavior of NODE_PORT environment variable to now set https port when https is enabled and fall back to http if https is disabled.Breaking: Moved the versioning of webpack from Roosevelt itself to the app. You will need to declare webpack as a dependency in your app if you intend to use the JS bundler feature in Roosevelt.Breaking: Changed js.webpack.bundles.env param to require values development or production instead of dev or prod.Breaking: Changed js.webpack.bundles.verbose param to js.verbose.Breaking: Changed --webpack, --wp, and --w CLI flags to --jsbundler, --jsb, and --j respectively.Breaking: Changed default of preprocessedViewsPath param from 'mvc/.preprocessed_views' to '.build/.preprocessed_views' and changed default of preprocessedStaticsPath param from '.preprocessed_statics' to '.build/.preprocessed_statics'. Collectively these changes mean most Roosevelt apps should remove .preprocessed_views and .preprocessed_statics from .gitignore and add .build instead.Added new param js.customBundler that will let you define a custom JS bundler.Added new param js[bundler].customBundlerFunction that will let you define custom behavior for default supported JS bundlers like Webpack.Updated dependencies.0.26.1Added new Express variable debugMarkup that contains HTML you can add to your custom error pages if you define any that will print server errors if any exist, display the route list, add some inline JavaScript that will serialize the request's err, req, and res objects so you can interactively examine them in the browser's developer tools. Only available in development mode.Added the aforementioned debug markup to the default error pages in development mode as well.Added routes Express variable which will list all routes in the app.Added new recognized environment variable: MAKE_BUILD_ARTIFACTS will allow you to set Roosevelt's makeBuildArtifacts config.Added new param minifyHtmlAttributes: Settings to pass to minify-html-attributes.Options:enable: Whether or not to enable minify-html-attributes.Default: [Boolean] false.Available options:'production': Enable only in production mode.'development': Enable in all modes.true: Will be taken to mean 'production'.minifyHtmlAttributesParams: Params to pass to minify-html-attributes.Default: [Object] {}Default: [Object]{   \"enable\": true,   \"minifyHtmlAttributesParams\": {} }Note: Roosevelt will always override 3 params from minify-html-attributes:htmlDir will always be set to Roosevelt's preprocessedViewsPath.cssDir will always be set to Roosevelt's preprocessedStaticsPath.jsDir will always be set to Roosevelt's preprocessedStaticsPath.Added new param preprocessedStaticsPath: Relative path on filesystem to where your preprocessed static files will be written to. Preprocessed static files are view files that have been preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled.Default: [String] \".preprocessed_statics\".This feature will only be active if minifyHtmlAttributes is enabled.Replaced isomorphicControllers param with clientControllers param and made it function similarly to clientViews.Fixed a bug with displaying app version on default error pages.Fixed a bug that could lead to a counter-intuitive error if your template rendered an empty response in dev mode.Updated various dependencies.0.26.0Breaking: Added new param preprocessedViewsPath: Relative path on filesystem to where your preprocessed view files will be written to. Preprocessed view files are view files that have had their uses of web components progressively enhanced using the progressively-enhance-web-components module.Default: [String] \"mvc/.preprocessed_views\".To disable this feature, set the value to false.This is breaking because if you leave it enabled by default (recommended), you will need to add .preprocessed_views to your .gitignore.Breaking: Switched to external source maps for the CSS preprocessor. This necessitated changing the custom CSS preprocessor API to require returning an object instead of a string.If you have written a custom CSS preprocessor, the new return value is:return {   css: 'write code to output css here',   sourceMap: 'write code to output source map here (optional)' }Added new param prodSourceMaps to allow source maps to be generated in prod mode for both CSS and JS.Added IP address to the output when the server starts.Added new CLI script secretsGenerator.js that allows you to combine certsGenerator.js, csrfSecretGenerator.js, and sessionSecretGenerator.js into one command.Added feature to override appDir and secretsPath for the CLI scripts using --appDir somewhere and --secretsPath somewhere CLI flags.Added exceptionRoutes option to the frontendReload param.Added a check for broken symlinks in the public folder, which will be purged if any exist.Added support for placing your Roosevelt config in a roosevelt.config.json file in addition to the previous options.Added better error when attempting to start a Roosevelt app on a file system that does not support symlinks.Changed source maps from inline to external.Fixed a bug that caused the JS bundler to not log when it was writing JS files.Fixed a bug that caused a statics/pages directory being created when it isn't needed.Fixed a bug that could cause the public folder and statics folder to be created even when makeBuildArtifacts is disabled.Fixed a bug that caused the views bundler and isomorphic controllers finder to write a new views bundle to disk even when it wasn't needed.Fixed frontendReload not working in Firefox with the default HTTPS config.Updated various dependencies.0.25.0Breaking: Supplying an allowlist to the views bundler will now implicitly disable exposeAll.Breaking: Renamed secretsDir param to secretsPath.Updated all file path express variables to include full absolute paths.Fixed various bugs in the views bundler feature.Fixed a rare bug where CSRF and session secrets could be written to the wrong directory.Fixed a bug where HTTPS certs could be automatically generated when they shouldn't be.Updated various dependencies.0.24.0Breaking: Altered startServer and initServer methods to now be async. They now need to be awaited to avoid possible race conditions.As a result, starting the app in a single line needs to be updated to await (require('roosevelt').startServer()).Callback arguments have been removed from these methods as well.Breaking: Removed app.get('routes'), onReqAfterRoute, onReqBeforeRoute, onReqStart, and onStaticAssetsGenerated.Breaking: Renamed app.httpServer to app.get('httpServer') and app.httpsServer to app.get('httpsServer').Breaking: Added enable param to clientViews. If your app uses the clientViews feature, you will need to add this param to continue using the feature.Added new method onBeforeMiddleware.Added start and stop method shorthands for startServer and stopServer respectively.Refactored various things under the hood to improve code quality, performance, and reduce unnecessary dependencies.Updated various dependencies.0.23.2Removed toobusy feature since it is temperamental and the dependency is no longer maintained.Refactored internal wildcardMatch to use minimatch under the hood.Replaced html-minifier with html-minifier-terser since html-minifier-terser is better-maintained.Updated various dependencies.0.23.1Added feature that scans the router stack to move the 404 route (the * route) to the end of the stack every time a new route is added, even if the route is added at runtime so that you can dynamically add routes while the app is running.Updated various dependencies.0.23.0Removed cores feature since it is largely redundant now thanks to the widespread popularity of tools like pm2. Also removed various deprecated cluster module support as well.Updated various dependencies.0.22.16Made it possible to disable helmet by setting the helmet param to false.Updated various dependencies.0.22.15Added option to exempt certain routes from CSRF protection.Updated various dependencies.0.22.14The JS bundler will now add mode: \"development\" and devtool: \"source-map\" automatically to your Webpack bundles in development mode.Updated various dependencies.0.22.13Altered helmet's defaults again. The form-action directive has been set to null. This makes it possible to submit forms to other domains in production mode.0.22.12Added 'unsafe-inline' option to helmet's Content-Security-Policy's script-src directive by default in Roosevelt. This will prevent inline scripts from being blocked in production mode.Updated various dependencies.0.22.11Added DISABLE_HTTPS environment variable which when set to true, the HTTPS server will be disabled and the app will revert to HTTP regardless of what is set in the rooseveltConfig.Updated various dependencies.0.22.10Enabled WAL in the SQLite instance used for session storage by default.Updated various dependencies.0.22.9Fixed an issue with cert generation from CLI scripts properly this time.0.22.8Fixed an issue with cert generation from CLI scripts.Updated various dependencies.0.22.7Added a max age to the default express-session configuration.Fixed an issue with cert generation in production mode.Updated various dependencies.0.22.6Fixed a bug that caused self-signed certs to get regenerated every time the app restarted.Updated various dependencies.0.22.5Certs generator will now run in production mode as well if https is enabled and if the files do not already exist. This behavior can be suppressed by setting https.autoCert to false.Fixed bug that prevented the static site generator feature from working in dev mode when the HTML validator was enabled.Fixed README formatting typos.Updated various dependencies.0.22.4Made it possible to set expressSession to true which will set a sane default config so you don't have to spell one out.0.22.3Updated default session store to use SQLite instead of an in-memory database so that sessions are not invalidated when the server restarts.Updated various dependencies.0.22.2Fixed a bug that caused self-signed certs to get regenerated every time the app restarted.Updated various dependencies.0.22.1Exposed the express-session middleware for use in Roosevelt apps.Updated various dependencies.0.22.0Breaking: Added a unified secrets directory for various app secrets such as HTTPS certs, session secret, CSRF secret, etc. The name of the directory is configurable, but when upgrading an app from the previous version, you may need to alter your rooseveltConfig to remove directories from your cert or key paths. You must now specify only a file name in those params.Added support for express-session for session support.Added CSRF protection.Improved dev sync script for developing Roosevelt significantly.Updated various dependencies.0.21.16Fixed an issue that could cause the server to start before all the controller routes were loaded.Updated various dependencies.0.21.15Updated various dependencies.0.21.14Updated various dependencies.0.21.13Certs will be auto-generated in dev mode now if they don't exist.Various dependencies updated.0.21.12Fixed isomorphic controllers bundler webpack bug in Windows.Various dependencies updated.0.21.11Added a new --build CLI flag that will instruct Roosevelt to just build the build artifacts but not start the server.Added new onStaticAssetsGenerated event that is fired when the server finishes init but before the server starts.Fixed an issue that would cause the server to start even when makeBuildArtifacts is set to staticsOnly. This has the side effect of causing serverStart() to revert to the behavior of init() if makeBuildArtifacts is set to staticsOnly.Fixed a bug that would cause roosevelt-router to produce a false negative when detecting teddy.Various dependencies updated.0.21.10Added --webpack=verbose and --wp=verbose-file CLI flags to make it easier to see verbose webpack errors. Available shorthands: --wp and -w.Added detection of undefined template literal variables (e.g. via typo) in rooseveltConfig.Added more helpful error if starting an app with broken symlinks.Various dependencies updated.0.21.9Fixed frontend reload when https is enabled with self-signed certs.Removed parent-require dependency.Added new dev_sync.sh to make writing code for Roosevelt easier. See instructions on how to use it in the README.Various dependencies updated.0.21.8Added wildcard matching to views bundler feature.Fixed bug that could cause build artifact generation to crash starting the app.Various dependencies updated.0.21.7Fixed CSS preprocessor breaking on Windows when using the default configuration in a newly generated app.Various dependencies updated.0.21.6The certs-generator script's default name has been changed to generate-certs. The config auditor will now expect it to be named that.The config-audit script's default name has been changed to audit-config. The config auditor will now expect it to be named that.allowlist in CSS preprocessor now supports wildcard matching, e.g. dir/*.Various dependencies updated.0.21.5allowlist and blocklist in static site generator feature now supports wildcard matching, e.g. dir/*.Various dependencies updated.0.21.4Added allowlist and blocklist to the static site generator feature.Fixed bug with the static site generator feature that required absolute paths for including child templates in a main template.Various dependencies updated.0.21.3When versionedPublic is true, Roosevelt will no longer deposit static HTML pages into the versioned directory.Various dependencies updated.0.21.2Fixed bug where the config auditor would complain about the makeBuildArtifacts param being set to string.Static site generator will now run the HTML validator against rendered templates in dev mode only.Various dependencies updated.0.21.1Static site generator can now be supplied models by file instead of by configuration. If model data is not supplied by configuration, Roosevelt will try to automatically load a model from a JS file with the same name alongside the template if it exists instead.Static site generator will now run the HTML validator against rendered templates.Bumped CI Node versions.0.21.0Breaking: htmlMinifier param renamed and expanded to html. You will need to update your Roosevelt config.Added feature html.sourcePath, html.models, and html.output which lets you generate static HTML pages from the your statics directory by compiling them with a view engine and depositing the output to the public folder at start time.Fixed issue with symlinks that would cause symlinking to a file rather than a directory to fail in Windows.Some error message copyediting.Some minor refactoring and documentation fixes.Various dependencies updated.0.20.1makeBuildArtifacts will now accept a new value of 'staticsOnly' which will allow Roosevelt to create static files but skip the creation of the MVC directories.initServer can now also be called as init instead.Various dependencies updated.0.20.0Breaking: Renamed generateFolderStructure to makeBuildArtifacts.Various dependencies updated.Breaking: Among them, formidable was updated which is a breaking change for any app that takes file uploads as property names in req.files have been renamed, most notably file.path is now file.filepath and file.name is now file.originalname.Removed checkDependencies.0.19.14Fixed bug that required admin permissions to start an app in Windows.0.19.13Added script to generate self-signed HTTPS certs:npm run certs-generator: Generates self-signed HTTPS certs for your app.Default shorthand:npm run cScript is short for: node ./node_modules/roosevelt/lib/scripts/certsGenerator.jsSome refactoring.Various dependencies updated.0.19.12Various dependencies updated.Migrated colors to @colors/colors.0.19.11Fixed bug that caused isoRequire to only work with absolute paths.Various dependencies updated.0.19.10Added roosevelt-router feature to improve support for writing isomorphic code for SPAs.Added isomorphicControllers config option that will permit Roosevelt to make a list of all your controller files that can be used client-side as well so they can be auto-loaded client-side too.Altered clientViews such that the template list will lack file extensions if the file extension of the template matches the default view engine's file extension.Breaking: Default clientViews output bundle changed from bundle.js to views.js.Fixed confusing console warning.HTML validator frontend scripts moved to <head>.Various dependencies updated.0.19.9Made Webpack errors less verbose.Various dependencies updated.0.19.8Updated for support for Node 16.x. This required a migraiton from node-sass to dart-sass.Dropped official Node 15 support, though it will probably still work. Node 14 remains officially supported.Various dependencies updated.0.19.7clientViews allowlist now allows directories.Default command line flags and environment variables recognized by Roosevelt can now be overridden via source-configs.Various dependencies updated.0.19.6Added onAppExit event.Fixed bug with https feature.Various dependencies updated.0.19.5Fix for Node 15 / npm 7 regression. Config auditor and deprecation checker will no longer run as postinstall scripts to compensate for INIT_CWD being removed from npm. These checks will be run exclusively on application first run instead (or any time the public folder is removed). (Closes https://github.com/rooseveltframework/roosevelt/issues/975)Dropped Node 12 support.Various dependencies updated.0.19.4Fixed bug that caused Roosevelt to not listen to NODE_ENV.Moved symlink creation to a separate step and made happen earlier in the app initialization process to maek it easier to work with the various Roosevelt server starting events.Various dependencies bumped.0.19.3Fixed bug which could cause CSS preprocessor to fail if there are subdirectories in your CSS folder.Various dependencies bumped.0.19.2Breaking: clientViews no longer exports a function, instead exporting a JSON object.Breaking: clientViews will no longer minify templates by default.Fixed bug with clientViews exposeAll feature that would cause it to scoop up any system files that might be present in your views directories.Fixed bug with clientViews blocklist mistakenly defaulting to an object instead of an array which could cause crashes in some configurations.Fixed bug with CSS preprocessor that would cause it to scoop up any system files that might be present in your CSS directories.Various dependencies bumped.0.19.1Added ability to configure helmet dependency.Fixed bug that caused frontend reload not to work.Fixed a bug in the Express env variable that would cause it to be incorrectly set at times.Updated some out of date into in the README.Removed some unnecessary code.Various dependencies bumped.0.19.0Breaking: Production mode behavior changed significantly:localhostOnly and alwaysHostPublic defaults were flipped to false and true respectively.alwaysHostPublic was renamed to hostPublic.The --host-public command line flag was removed, since it is no logner needed because hostPublic defaults to true now.New command line flag added called production-proxy to let you opt-in to localhostOnly and alwaysHostPublic being set to true and false respectively as before.Various dependencies bumped.0.18.3You can now use PHP as your templating engine in a Roosevelt app or any other Express application. PHP should be faster than any JS-based templating engine for complex templates since its parser is written in C rather than JS.Breaking: blacklist/whitelist params throughout the API have been renamed to blocklist/allowlist.README was copyedited to improve the clarity of the default behaviors of some of the API, remove outdated information, and other small improvements.The host-public warning was made more prominent so that production mode default behavior regarding statics is less confusing to people.CI improvements.Breaking: Roosevelt is no longer tested on Node 10.x. We didn't do anything to explicitly break older Node versions, but use at your own risk.Various dependencies bumped.0.18.2Added helmet middleware to improve security by default.Replaced body-parser middleware with native Express integration.Various dependencies bumped.0.18.1Changed passphrase option from https.p12.passphrase to https.passphrase so it can be used for certAndKey configurations as well.CI improvements.Various dependencies bumped.0.18.0Replaced the vnu-jar based HTML validator with express-html-validator 🎉.Roosevelt no longer does any background process management as a result.Moved all developer facing dependencies to optionalDependencies.They can be omitted from installion when using npm i --no-optional.Refactored frontend reload implementation.check-dependencies now only runs in dev mode.API changes:Removed separateProcess from htmlValidator.Removed port from htmlValidator.Removed showWarnings from htmlValidator.Added validatorConfig to htmlValidator which respresents a set of rules for the validator to check for.Rules can also be set in a .htmlValidate.json placed in the app root.Removed verbose from frontendReload.These logs are now controlled by the general verbose logging param.Removed ROOSEVELT_VALIDATOR environment variable.Removed ROOSEVELT_AUTOKILLER environment variable.Removed --attach-validator and -a cli flags.Removed --background-validator and -b cli flags.Removed --disable-validator-autokiller, --no-autokiller, and -n cli flags.Removed --enable-validator-autokiller, --html-validator-autokiller, and -k cli flags.Removed dependencies:execafkillhtml-validatorprismjsps-nodetampervnu-jarVarious dependencies bumped.0.17.1Fixed a CSS bug where CSS files were still not being written due to a file existence check.Fixed a CSS bug where empty CSS files were being written because their LESS equivalent would never generate CSS in that particular file.Various dependencies bumped.0.17.0Breaking: Replaced staticsSymlinksToPublic with symlinks.Breaking: Replaced routers param with a simplified routePrefix param which defines a subfolder to mount the app to.Breaking: Renamed multipart param to formidable.Added ability to configure Roosevelt via a rooseveltConfig.json config file placed in app root instead of from a rooseveltConfig object in package.json.Added router Express variable that opens up access to internally used router instance.Added routePrefix Express variable that exposes currently used routePrefix or an empty string if not used.Fixed bug where changes to CSS files were not being written to the output directory.Refactored internal fsr module.Updated internal usage of formidable API.Internal changes to stabilize the automated tests.Various dependencies bumped.0.16.2Added deprecation check for old compiler sub modules.Various dependencies bumped.0.16.1Stopped the config auditor from complaining about obsolete scripts.Fixed cases where some CLI flags weren't being applied to config.Test fixes.Various dependencies bumped.0.16.0Replaced browserify with webpack. This has significant breaking API changes. You will need to totally rewrite your JS bundles from browserify bundles to webpack bundles to upgrade to this version of Roosevelt. It is also recommended that you remove all references to old build artifacts such as .build and .bundled in your application as well from package.json, .gitignore, etc.Eliminated concept of separate JS compilers in favor of declaring this via your webpack config. Note: webpack defaults to minifying JS using terser.Eliminated concept of CSS preprocessor middleware modules in favor of built-in support for LESS, Sass, and Stylus. Other CSS preprocessors can be used as well with a bit of extra configuration.API changes:Removed symlinkToPublic, compiler, output, whitelist, and blacklist params from js.Replaced js.bundles with js.webpack.Removed css.symlinkToPublic.Replaced css.compiler.params.cleanCSS with css.minifier.Added css.compiler.enable.Replaced css.compiler.nodeModule with css.compiler.module.Replaced css.compiler.params with css.compiler.options.css.output is now relative to publicFolder instead of staticsRoot.clientViews.output is now relative to publicFolder instead of staticsRoot.Removed cleanTimer (Obsolete in absense of .build).App cleaner has been removed.source-configs integration is now more tightly knit.Config auditor no longer complains about missing params.Auditor now checks config params on a case-by-case basis.ES6 style variables can now be used in rooseveltConfig referencing other rooseveltConfig entries.Introduced views bundler: An API that allows you to expose view code to frontend JS for client-side templating.Added a button to the validation error page to display the page anyway and another button to disable the validator entirely until the server restarts.Fixed bug with frontend reload causing it to inject the script tag in the wrong location in some situations.Fixed bug where router would cause app routes to fail when no controller files exist.Fixed bug where auto build scanner would crash the app when generateFolderStructure is false.Fixed bug which resulted in a cryptic error if a Roosevelt app was moved to another directory.Fixed bug where symlink failed errors would appear when generateFolderStructure is false.Complete rewrite of HTML validator and related helper scripts.Refactored multipart middlware.Various dependencies bumped.CI improvements.Many rewritten tests.0.15.1Fixed bug causing apps to crash in dev mode.Various dependencies bumped.0.15.0Moved CSS minification from roosevelt-less to Roosevelt using clean-css as a direct dependency. The clean-css library had an update with breaking changes so the rooseveltConfig params in advanced and aggressiveMerging in cleanCSS are now outdated.New default script npm run proddev: Runs the app in production mode, but with the public folder hosted by the Roosevelt app. This is useful for doing development in production mode without having to stage a complex simulation of your production environment, which would likely include hosting static files via another web server better-suited to serving statics like Apache or nginx.Roosevelt now sources configs internally using source-configs.Validator will now be disabled if HTTP_PROXY or HTTPS_PROXY are set but localhost is not in NO_PROXY.Fixed a bug where not having devDependencies or dependencies objects in your app's package.json would throw errors when installing dependencies. Accordingly re-reverted most changes in 0.14.1 to fix buggy behavior with devDependencies in npm installs.The check-dependencies call will now only apply to production dependencies.Some internal refactoring to clean things up.Various dependencies bumped.0.14.6Fixed a bug that caused devDependencies of Roosevelt to be removed if npm i was run more than once.Fixed a bug that caused the automated testing to break if your clone of Roosevelt was not named \"roosevelt.\"Various dependencies bumped.0.14.5staticsSymlinksToPublic will now create missing subdirectories necessary to create a symlink in a target location.Fixed a bug which caused Java hserrpid error logs to pile up in your app directory under certain conditions.Fixed a bug which caused frontend reload to not work on the various error pages.Added code comment above frontend reload script tag to explain that it is injected by Roosevelt.Did some copyediting on frontend reload logging.Various dependencies bumped.0.14.4Added automatic browser reloading when your frontend code changes (via reload).A console warning will now appear explaining why public static assets don't load in prod mode when alwaysHostPublic is set to false (the default).New Express variable added: routes containing a list of all routes loaded in the application.Various dependencies bumped.CI improvements.0.14.3Restored move of several things to devDependencies to shrink production builds. Feature is now activated using ROOSEVELT_DEPLOYMENT environment variable. There are also new corresponding npm run commands dev-install and dev-prune to manage this. See README for more details.Copyediting on several logs to improve clarity.Various dependencies bumped.CI improvements.0.14.2Reverted most changes in 0.14.1 to fix #713, but preserved modularization of htmlValidator.js so that if any devDependencies are missing, the app will not crash in production mode.Various dependencies bumped.0.14.1Moved several things to devDependencies to shrink production builds.Various dependencies bumped.0.14.0Replaced internal logger with roosevelt-logger. Note: this removes the winston Express variable that was previously provided, but it is still indirectly accessible by drilling down through the logger Express variable now. See roosevelt-logger member variable documentation.If custom routers are being used, the res.redirect() method will now prepend the prefix to redirects that are relative to the hostname. To override this setting pass true as the last argument.HTML validator exceptions param will now accept an array of values instead of just a single string value.Various dependencies bumped.CI improvements.0.13.0Roosevelt will now warn you if your CSS/JS compile directory is getting stale and might need to be cleaned with npm run clean. A new cleanTimer param has been added to configure or disable this check.Added new param routers to add support for Express Routers.Added new feature to create custom CSS/JS preprocessors on the fly.Added environment variable to enable/disable the HTML validator autokiller.Added OpenJDK support to the Java HTML Validator.Various dependencies bumped.CI improvements.0.12.2Introduced changelog.Autokiller now sends human-readable GET.Fixed bug which caused the config auditor to report false errors in the case of third party module params being set to configurations other than the default.Fixed bug related to HTTPS cert parsing.Disabled option in HTML minifier which removes HTML comments by default.Various dependencies bumped.CI improvements.0.12.1 and belowHere be dragons…"})
window.siteTexts.push({file: "docs/0.30.7/coding-apps/index.html", title: "coding apps (0.30.7)", text: "Making model filesPlace a file named dataModel.js in mvc/models.Here's a simple example dataModel.js data model:// dataModel.js module.exports = () => {   return { some: 'data' } }In more complex apps, you might query a database to get your data instead.Making view filesViews by default are Teddy templates. See the Teddy documentation for information about how to write Teddy templates.You can also configure Roosevelt to use any templating system supported by Express for your views.Making controller filesController files are places to write Express routes. A route is the term Express uses for URL endpoints, such as https://yoursite/blog or https://yoursite/about.Controllers bind models and views together.To make a new controller, make a new file in the controllers directory. For example:// someController.js module.exports = (router, app) => {   // router is an Express router   // and app is the Express app created by Roosevelt    // standard Express route   router.route('/about').get((req, res) => {     // load a data model     const model = require('models/dataModel')()      // render a template and pass it the model     res.render('about', model)   }) }Sometimes it is also useful to separate controller logic from your routing. This can be done by creating a reusable controller module. Reusable controller modules differ from standard controller modules in that they are meant to be called from within other controllers and do not define routes.To create a reusable controller, put a file in your controllers directory that accepts app, req, and res arguments with logic that is meant to execute from within a predefined route.An example of when this might be needed would be having a reusable controller for \"404 Not Found\" pages:// notFound.js — reusable controller module.exports = (app, req, res) => {   const model = { content: 'Cannot find this page' }   res.status(404)   res.render('404', model) }You can then call the reusable controller in any other controller when needed:// someController.js module.exports = (router, app) => {   router.route('/whatever').get((req, res) => {     // test some logic that could fail     // thus triggering the need for the 404 controller     if (something) {       // logic didn't fail       // so render the page normally       let model = require('models/dataModel')       res.render('whatever', model)     }     else {       // logic failed       // so throw the 404 by executing your reusable controller       require('controllers/notFound')(app, req, res)     }   }) }Any controller file that has no arguments or more than two arguments will be considered a reusable controller.Making static pagesYou can also generate static files from templates and models as well.Templates for static pages go in your statics folder (staticsRoot) under the HTML source path (html.sourcePath), which is statics/pages by default.Data models for the templates will be merged from different possible locations to source them from in the following order of precedence:* model in htmlModels.File-level override in htmlModels.Model file.Setting static page modelsTo declare a global model in htmlModels, use the * character:// build.js (async () => {   await require('roosevelt')({     html: {       models: {         '*': {           hello: 'world!'         }       }     }   }).init() })()To declare a model for a specific file in htmlModels:// build.js (async () => {   await require('roosevelt')({     html: {       models: {         'index.html': {           hello: 'world!'         }       }     }   }).init() })()You can also declare a model for a specific page by placing a JS file with the same name alongside the template.For example if an index.js file exists next to index.html, the JS file will be used to set the model so long as it exports either an object or a function that returns an object."})
window.siteTexts.push({file: "docs/0.30.7/configuration/index.html", title: "configuration (0.30.7)", text: "App nameRoosevelt will determine your app's name by examining \"name\" in package.json. If none is provided, it will use Roosevelt Express instead.The rooseveltConfig APIRoosevelt is highly configurable and you can configure it from the following hierarchy of sources in increasing order of precedence:A rooseveltConfig section in your package.json.A roosevelt.config.json file.A rooseveltConfig.json file.Constructor parameters.Environment variables.Command line flags.What \"increasing order of precedence\" means is that command line flags will override environment variables, environment variables will override constructor parameters, constructor parameters will override config files, etc.File path optionsappDir [String]: Root directory of your application. Default: The directory where your app's package.json is located.buildFolder [String]: Where build artifacts will be placed such as the output from preprocessed views, preprocessed statics, the views bundler feature, or the controllers bundler feature. Default: \".build\".You should .gitignore this folder.Not all build artifacts will go into this folder. Some notable exceptions include:.npm-cache: Generated by npm.node_modules: Generated by npm.package-lock.json: Generated by npm.public: This is a separate folder for files generated by Roosevelt that should be exposed publicly as static files. The name of this folder is configurable with the publicFolder param.secrets: Directory that stores certs, keys, and secrets. The name of this folder is configurable with the secretsPath param.controllersPath [String]: Relative path on filesystem to where your controller files are located. Default: \"mvc/controllers\".errorPages [Object]: Relative path on filesystem to where your various error page controller files are located. If you do not supply them, Roosevelt will use its default ones instead:forbidden [String]: Your 403 Forbidden error page. Default: \"403.js\".notFound [String]: Your 404 Not Found error page. Default: \"404.js\".internalServerError [String]: Your 5xx Internal Server Error error page. Default: \"5xx.js\".serviceUnavailable [String]: Your 503 Service Unavailable error page. Default: \"503.js\".modelsPath [String]: Relative path on filesystem to where your model files are located. Default: \"mvc/models\".preprocessedStaticsPath [String]: Relative path on filesystem to where your preprocessed static files will be written to. Preprocessed static files are static files that have been preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled. This feature will only be active if minifyHtmlAttributes is enabled. Default: \".build/preprocessed_statics\".preprocessedViewsPath [String]: Relative path on filesystem to where your preprocessed view files will be written to. Preprocessed view files are view files that have had their uses of web components progressively enhanced using the progressively-enhance-web-components module. To disable this feature, set the value to false. Default: \".build/preprocessed_views\".publicFolder [String]: All files and folders in this directory will be exposed as static files in development mode or when hostPublic is enabled. You should .gitignore this folder. Default: \"public\".secretsPath [String]: Directory that stores certs, keys, and secrets. You should .gitignore this folder. Default: secrets.staticsRoot [String]: Relative path on filesystem to where your source static assets are located. By default this folder will not be made public, but is instead meant to store unprocessed or uncompressed source assets that will later be preprocessed and exposed in public. Default: \"statics\".viewsPath [String]: Relative path on filesystem to where your view files are located. Default: \"mvc/views\".Development mode optionsThese features are only available in development mode.frontendReload [Object]: Settings to use for the browser reload feature which automatically reloads your browser when your frontend code changes.Options:enable [Boolean]: Whether or not to enable this feature.exceptionRoutes [Array of Strings]: List of routes to exclude from this feature.expressBrowserReloadParams [Object]: Params to pass to express-browser-reload. This feature will only be active on pages with a <body> tag.Default: [Object]{   \"enable\": true,   \"exceptionRoutes\": [],   \"expressBrowserReloadParams\": {     \"skipDeletingConnections\": true   } }htmlValidator [Object]: Parameters to send to express-html-validator.enable [Boolean]: Enables or disables the built-in HTML validator.exceptions [Object]: A set of params that can be used to prevent validation in certain scenarios.header [String]: A custom header that when set will disable the validator on a per request basis.modelValue [String]: An entry in your data model passed along with a res.render that when set will disable validation on the rendered HTML.validatorConfig [Object]: html-validate configuration that determines what errors the validator looks for.The full list of available validator rules can be found here.This configuration can also be set by a .htmlValidate.json file placed in your app root directory.mode [String]: Decides whether your app starts in production mode or development mode by default. Default: production.Default: [Object]{   \"enable\": true,   \"exceptions\": {     \"requestHeader\": \"Partial\",     \"modelValue\": \"_disableValidator\"   },   \"validatorConfig\": {} }HTTP optionshttp [Object]: Parameters for configuring the HTTP server.enable [Boolean]: Enable HTTP server.port [Number]: The HTTP port your app will run on.Default when an app is created manually: [Object]{   \"enable\": true,   \"port\": 43763 }Default when an app is created with the app generator: [Object]{   \"enable\": false,   \"port\": 43763 }https [Object]: Parameters for configuring the HTTPS server.enable [Boolean]: Enable HTTPS server.port [Number]: The port your app will run the HTTPS server on.autoCert [Boolean]: Will create self-signed HTTPS certificates in development mode as long as they don't already exist.options [Object]: Configuration that gets passed directly to the HTTPS server instance. Accepts all native settings. For convenience, the ca, cert, key, and pfx params can take file path strings or arrays of file path strings relative to your secretsPath in addition to the native strings and buffers.Default when an app is created manually: [Object]{   \"enable\": false,   \"port\": 43711,   \"autoCert\": true,   \"options\": {} }Default when an app is created with the app generator: [Object]{   \"enable\": true,   \"port\": 43711,   \"autoCert\": true,   \"options\": {     \"cert\": \"cert.pem\",     \"key\": \"key.pem\"   } }App behavior optionsbodyParser [Object]: Parameters to supply to the body-parser module which handles POST requests.urlEncoded [Object]: Parameters to supply to body-parser.urlencoded.json [Object]: Parameters to supply to body-parser.json.Default: [Object]{   \"urlEncoded\": {     \"extended\": true   },   \"json\": {} }csrfProtection [Boolean or Object]: Whether to enable Cross-Site Request Forgery protection. Default: true.To disable the feature, set it to false. To exempt certain routes from protection, supply an object as your config with an array of exemptions.Example of exemptions list: [Object]{   \"exemptions\": [     \"/foo\",     \"/bar\",     \"/baz\"   ] }enableCLIFlags [Boolean]: Enables parsing of command line flags. Disable this if you want to handle them yourself or if you don't want Roosevelt to listen to the command line flags it listens for by default. Default: true.expressSession [Boolean or Object]: Parameters to pass to the express-session module. Default: true.Default if expressSession is set to true: [Object]{   \"secret\": [an auto-generated secret],   \"resave\": false, // usually a bad idea to set to true   \"saveUninitialized\": false, // usually a bad idea to set to true   \"cookie\": {     \"secure\": false, // will automatically be set to true if https is enabled     \"sameSite\": \"strict\", // adds same site enforcement     \"maxAge\": 347126472000 // sets expiration very far in the future (~11 years) to basically never expire   }   \"store\": [the expressSessionStore.instance Roosevelt param] }expressSessionStore [Object]: Define a custom session store to use with express-session instead of the default one provided by Roosevelt. This is recommended if you plan to shard your app across multiple separate processes or scale it to multiple servers.filename [String]: Name of the session file.instance: [Object] A store instance. See this list for compatible stores.preset [String]: Available presets provided by Roosevelt. Only used if instance is not provided.Available options:\"default\": Use Roosevelt's default session store, which is better-sqlite3-session-store.\"express-session-default\": Use express-session's default session store (not recommended).presetOptions [Object]: Options to pass to the preset session store if one is selected. Only used if instance is not provided.checkPeriod [Number]: How long, in milliseconds, the memory store will check for expired items.ttl [Number]: How long, in milliseconds, before a session is expired. If not set, it will default to the value of checkPeriod.max [Number]: The maximum size of the cache, checked by applying the length function to all values in the cache. If not set, there will be no maximum.Either instance or preset must be set for this param to work properly.Default: [Object]{   \"filename\": \"sessions.sqlite\",   \"instance\": null,   \"preset\": \"default\",   \"presetOptions\": {     \"checkPeriod\": 86400000, // one day     \"ttl\": null,     \"max\": null   } }formidable: Parameters to pass to formidable using formidable's API for multipart form processing (file uploads). Access files uploaded in your controllers by examining the req.files object. Roosevelt will remove any files uploaded to the upload directory when the request ends automatically. To keep any, be sure to move them before the request ends.Default: [Object]{   \"multiples\": true // enables multiple files to be uploaded simultaneously }To disable multipart forms entirely, set formidable to false.helmet [Object]: Parameters to pass to the helmet module. This module helps secure Express apps by setting HTTP response headers.The default options are specified in the helmet docs, with the following exceptions that Roosevelt makes to the default Content-Security-Policy settings:The upgrade-insecure-requests directive has been removed. This change prevents this bug.The script-src directive has been set to \"unsafe-inline\". This makes it possible to use inline scripts.The form-action directive has been set to null. This makes it possible to submit forms to other domains.You can reverse any of these changes by configuring helmet yourself.To disable helmet entirely, set the param to false.logging: Parameters to pass to roosevelt-logger. See roosevelt-logger parameters documentation for configuration options.Default: [Object]{   \"methods\": {     \"http\": true,     \"info\": true,     \"warn\": true,     \"error\": true,     \"verbose\": false   } }makeBuildArtifacts [Boolean or String]: When enabled Roosevelt will generate user-specified directories, CSS/JS bundles, etc.Defaults to false for apps created manually.Will be set to true in apps generated with the app generator.Can also accept a value of \"staticsOnly\" which will allow Roosevelt to create static files but skip the creation of the MVC directories.routePrefix [String]: A prefix prepended to your application's routes. Applies to all routes and static files. Default: null.Example: When set to \"foo\" a route bound to / will be instead be bound to /foo/.This prefix is exposed via the routePrefix Express variable which should be used for resolving the absolute paths to statics programmatically.Example: An image located at /images/teddy.jpg can be resolved in a prefix-agnostic way via ${app.get('routePrefix')/images/teddy.jpg}.viewEngine [String]: What templating engine to use, formatted as \"fileExtension: nodeModule\".Defaults to \"none\" for apps created manually.Will be set to \"html: teddy\" in apps generated with the app generator.Also by default when using the app generator, the teddy module is marked as a dependency in package.json.To use multiple templating systems, supply an array of engines to use in the same string format. Each engine you use must also be marked as a dependency in your app's package.json. Whichever engine you supply first with this parameter will be considered the default.Example configuration using multiple templating systems: [Object]{   \"viewEngine\": [     \"html: teddy\",     \"php: php\",     \"ejs: ejs\"   ] }Isomorphic (single page app) optionsclientControllers [Object]: Allows you to expose controller (route) file code to frontend JS for client-side routing.enable [Boolean]: Whether or not to bundle controller files.exposeAll [Boolean]: Option to expose all templates.blocklist [Array of Strings]: List of files or folders to exclude when exposeAll is enabled.Can also be set declaratively by putting a // roosevelt-blocklist comment at the top of any controller file.allowlist [Object of Arrays]: List of JS files to create mapped to which controller files to expose.Example: { \"mainPages.js\": [\"index.js\", \"about.js\"] }Can also be set declaratively by putting a // roosevelt-allowlist file_path comment at the top of any controller file.defaultBundle [String]: File name for the default JS controller bundle.output [String]: Subdirectory within buildFolder to write JS controller bundles to.Default: [Object]\"clientControllers\": {   \"enable\": false,   \"exposeAll\": false,   \"blocklist\": [],   \"allowlist\": {},   \"defaultBundle\": \"controllers.js\",   \"output\": \"js\" }clientViews [Object]: Allows you to expose view (template) file code to frontend JS for client-side templating.enable [Boolean]: Whether or not to bundle view files.exposeAll [Boolean]: Option to expose all templates.blocklist [Array of Strings]: List of files or folders to exclude when exposeAll is enabled.Can also be set declaratively by putting a <!-- roosevelt-blocklist --> tag at the top of any template.allowlist [Object of Arrays]: List of JS files to create mapped to which view files to expose.Example: { \"mainPages.js\": [\"baseLayout.html\", \"footer.html\"] }Can also be set declaratively by putting a <!-- roosevelt-allowlist file_path --> tag at the top of any template.defaultBundle [String]: File name for the default JS view bundle.output [String]: Subdirectory within buildFolder to write JS view bundles to.minify [Boolean]: Option to minify templates that are exposed via this feature.Be careful with this feature because it can break your templates depending on which templating system you use, and as such it is off by default. You may need to make liberal use of the minifyOptions param to make it work right with your templating system.minifyOptions [Object]: Parameters to supply to html-minifier's API.Uses the params you set in html.minifier.options if empty.Default: [Object]\"clientViews\": {   \"enable\": false,   \"exposeAll\": false,   \"blocklist\": [],   \"allowlist\": {},   \"defaultBundle\": \"views.js\",   \"output\": \"js\",   \"minify\": false,   \"minifyOptions\": {} }Static file optionscopy [Array of Objects]: Declare one or more files or folders to copy at runtime. Default: [].source [String]: Path to be copied from.Roosevelt will not attempt to copy files or folders that do not exist.dest [String]: Path to place the copy.If this destination path already exists it will be overwritten.html [Object]: Generate static HTML pages:sourcePath [String]: Subdirectory within staticsRoot where your static HTML files are located. By default this folder will not be made public, but is instead meant to store unminified / unprocessed HTML template source files which will be rendered by your templating system, minified, and written to the public folder when the app is started.allowlist: [Array of Strings] List of templates to render, minify, and write to the public folder when the app is started. If the list is empty, all templates in your sourcePath will be sourced. Supports wildcard matching, e.g. dir/*.blocklist: [Array of Strings] List of templates in your sourcePath to skip. Supports wildcard matching, e.g. dir/*.You can also block a file from being exposed by adding a comment on the first line of the file with the string roosevelt-blocklist anywhere on the line.models [Object]: Data to pass to templates by file path / file name.Example: { \"index.html\": { \"some\": \"data\" } }You can also pass a global model using a * catch-all character: { \"*\": { \"some\": \"data\" } }If this data is not supplied by configuration, Roosevelt will try to automatically load a model from a JS file with the same name alongside the template if it exists instead. For example if an index.js file exists next to index.html and the model is not defined by configuration like in the example above, then the index.js file will be used to set the model so long as it exports either an object or a function that returns an object.output [String]: Subdirectory within publicFolder where parsed and minified HTML files will be written to.folderPerPage [Boolean or String]: Make a folder for each page and place the page within it.Example values:true: Given a page called example.html, this feature will create a folder called \"example\" in the public folder and place \"example.html\" within it.\"index.html\": Given a page called example.html, this feature will create a folder called \"example\" in the public folder and place \"index.html\" within it. This is useful for creating \"pretty URLs\" with static sites.false: Disables the feature.minifier [Object]: How you want Roosevelt to minify your HTML:enable [Boolean]: Whether or not to minify HTML.Can also be disabled by the minify param.Minification is automatically disabled in development mode.exceptionRoutes [Array of Strings]: List of controller routes that will skip minification entirely. Set to false to minify all URLs.options [Object]: Parameters to supply to html-minifier's API.Default: [Object]{   \"sourcePath\": \"pages\",   \"allowlist\": null,   \"blocklist\": null,   \"models\": {},   \"output\": \"\",   \"folderPerPage\": false,   \"minifier\": {     \"enable\": true,     \"exceptionRoutes\": false,     \"options\": {       \"removeComments\": true,       \"collapseWhitespace\": true,       \"collapseBooleanAttributes\": true,       \"removeAttributeQuotes\": true,       \"removeEmptyAttributes\": true     }   } }css [Object]: How you want Roosevelt to configure your CSS preprocessor:sourcePath [String]: Subdirectory within staticsRoot where your CSS files are located. By default this folder will not be made public, but is instead meant to store unminified CSS source files which will be minified and written to the public folder when the app is started.compiler [Object]: Which CSS preprocessor (if any) to use.enable [Boolean]: Whether or not to use a preprocessor.module [String]: Node module name of the CSS preprocessor you wish to use.Currently less, sass, and stylus are supported.Your chosen CSS preprocessor module must also be marked as a dependency in your app's package.json.options [Object]: Parameters to send to the CSS preprocessor if it accepts any.minifier [Object]: Params pertaining to CSS minifcation.enable [Boolean]: Whether or not to minify CSS. Can also be disabled by the minify param.options [Object]: Parameters to pass to the CSS minifier clean-css, a list of which can be found in the clean-css docs.allowlist [Array of Strings]: List of CSS files to allow for compiling. Leave undefined to compile all files. Supply a : character after each file name to delimit an alternate file path and/or file name for the minified file.Example array member: \"example.less:example.min.css\" compiles example.less into example.min.css.output [String]: Subdirectory within publicFolder where compiled CSS files will be written to.versionFile [Object]: If enabled, Roosevelt will create a CSS file which declares a CSS variable containing your app's version number from package.json. Enable this option by supplying an object with the member variables fileName and varName. Versioning your static files is useful for resetting your users' browser cache when you release a new version of your app.Example usage (with SASS): { \"fileName\": \"_version.scss\", \"varName\": \"appVersion\" }Assuming the default Roosevelt configuration otherwise, this will result in a file statics/css/_version.scss with the following content: /* do not edit; generated automatically by Roosevelt */ $appVersion: '0.1.0';Some things to note:If there is already a file there with that name, this will overwrite it, so be careful!It's generally a good idea to add this file to .gitignore, since it is a build artifact.Default: [Object]{   \"sourcePath\": \"css\",   \"compiler\": {     \"enable\" : false,     \"module\": \"less\",     \"options\": {}   },   \"minifier\": {     \"enable\": true,     \"options\": {}   },   \"allowlist\": null,   \"output\": \"css\",   \"versionFile\": null }cssCompiler [Function]: Use this param to supply a custom CSS preprocessor function.To do so, supply a function which accepts argument app, which is a reference to the Express app created by Roosevelt.The function should return an object with the following members:versionCode(app) [Function]: Function to return the version of your app. This is needed to support the versionFile feature of Roosevelt's CSS preprocessor API.app [Object]: The Express app created by Roosevelt.parse(app, fileName) [Function]: Function to preprocess CSS.app [Object]: The Express app created by Roosevelt.filePath [String]: The path to the file being preprocessed.When a custom preprocessor is defined in this way it will override the selected preprocessor specified in css.compiler.module.This param can only set via Roosevelt's constructor, like this:(async () => {   await require('roosevelt')({     cssCompiler: app => {       return {         versionCode: app => {           // write code to return the version of your app here           // generally you should return a css variable with your app version         },         parse: (app, filePath) => {           // write code to preprocess CSS here           return {             css: 'write code to output css here',             sourceMap: 'write code to output source map here (optional)           }         }       }     }   }).startServer() })()favicon [String]: Location of your favicon file. Default: \"none\".Will be set to \"images/favicon.ico\" in apps generated with the app generator.js [Object]: How you want Roosevelt to handle module bundling and minifying your frontend JS:sourcePath [String]: Subdirectory within staticsRoot where your JS files are located. By default this folder will not be made public, but is instead meant to store unminified JS source files which will be minified and written to the public folder when the app is started.[bundler name] [String]: Parameters related to bundling JS the specified bundler module:Values you can supply to [bundler name]:webpack: See Webpack site for more details about Webpack configuration.customBundler: Allows you to define your own custom bundler.Params you can pass to your chosen bundler:enable [Boolean]: Enable the bundler.bundles: [Array of Objects] Declare one or more JavaScript bundle files.env: [String] Bundle only in development or production mode.Accepted values:\"development\": Development mode.\"production\": Production mode.If no value is set, it will bundle in both modes.config: [Object or String] The config to send to the module bundler. Can also be a path to a config file relative to the app directory.customBundlerFunction: [Function] A custom async function to execute for this bundler instead of executing the default one supplied by Roosevelt. This param is required if your bundler is set to customBundler.Arguments provided:bundle: The bundle object supplied by Roosevelt.config: The config object after it has been postprocessed by Roosevelt.app: The Roosevelt app.verbose [String]: Enable verbose error handling.Accepted values:true: Will print verbose logs to the console.\"file\": Will print verbose logs to the console and write them to a file for debugging.Default when an app is created manually: [Object]{   \"sourcePath\": \"js\",   \"webpack\": {     \"enable\": false,     \"bundles\": [],     \"customBundlerFunction\": null   },   \"customBundler\": {     \"enable\": false,     \"bundles\": [],     \"customBundlerFunction\": null   },   \"verbose\": false }Default when an app is created with the app generator: [Object]{   \"sourcePath\": \"js\",   \"webpack\": {     \"enable\": true,     \"bundles\": [       {         \"config\": {           \"entry\": \"${js.sourcePath}/main.js\",           \"devtool\": \"source-map\",           \"output\": {             \"path\": \"${publicFolder}/js\"           },           \"resolve\": {             \"alias\": {               \"fs\": false,               \"path\": false             },             \"modules\": [\"${js.sourcePath}\", \"${publicFolder}/js\", \"${appDir}\", \"node_modules\"]           }         }       }     ],     \"customBundlerFunction\": null   },   \"customBundler\": {     \"enable\": false,     \"bundles\": [],     \"customBundlerFunction\": null   },   \"verbose\": false }If you're using webpack, Roosevelt will also postprocess your webpack config to do the following things:If your config does not set mode, then Roosevelt will set mode to development if Roosevelt is in development mode.If your config does not set devtool, then Roosevelt will set devtool to source-map if Roosevelt is in development mode.If Roosevelt's prodSourceMaps feature is enabled, then Roosevelt will set devtool to source-map if Roosevelt is in production mode.If your config does not set optimization, then Roosevelt will set optimization to the following:optimization = {   minimize: true,   minimizer: [     new TerserPlugin({       extractComments: false // disable LICENSE.txt file generation     })   ] }minify [Boolean]: Enables HTML and CSS minification. This feature is automatically disabled during development mode. Minification for JS files is handled by the js params above. Default: true.minifyHtmlAttributes [Object]: Settings to pass to minify-html-attributes.enable [Boolean or String]: Whether or not to enable minify-html-attributes.Available options:\"production\": Enable only in production mode.\"development\": Enable in all modes.true: Will be taken to mean \"production\".minifyHtmlAttributesParams: Params to pass to minify-html-attributes.Note: Roosevelt will always override 3 params from minify-html-attributes:htmlDir will always be set to Roosevelt's preprocessedViewsPath.cssDir will always be set to Roosevelt's preprocessedStaticsPath.jsDir will always be set to Roosevelt's preprocessedStaticsPath.Default: [Object]{   \"enable\": false,   \"minifyHtmlAttributesParams\": {} }prodSourceMaps [Boolean]: Enables source maps for minified CSS and JS files in production mode. Default: false.symlinks [Array of Objects]: Declare one or more symlinks to be generated at runtime. Default: [].source [String]: Path to be linked to.Roosevelt will not attempt to generate a symlink to a source path that does not exist.dest [String]: Path to place symlink.If this destination path already exists it will not be overwritten.Will be set to the following in apps generated with the app generator:[   {     \"source\": \"${staticsRoot}/images\",     \"dest\": \"${publicFolder}/images\"   } ]versionedPublic [Boolean]: If set to true, Roosevelt will prepend your app's version number from package.json to your public folder. Versioning your public folder is useful for resetting your users' browser cache when you release a new version. Default: false.Deployment optionshostPublic [Boolean]: Whether or not to allow Roosevelt to host the public folder. By default in production-proxy mode Roosevelt will not expose the public folder. It's recommended instead that you host the public folder through another web server, such as Apache or nginx that is better optimized for hosting static files. Default: false.localhostOnly [Boolean]: Listen only to requests coming from localhost in production mode. This is useful in environments where it is expected that HTTP requests to your app will be proxied through a more traditional web server like Apache or nginx. This setting is ignored in development mode. Default: true.shutdownTimeout [Number]: Maximum amount of time in milliseconds given to Roosevelt to gracefully shut itself down when sent the kill signal. Default: 30000 (30 seconds).Template literals in rooseveltConfig valuesAll config values support template literal style variable syntax that you can use to refer to other Roosevelt parameters. For example:{   \"css\": {     \"sourcePath\": \"css\",     \"output\": \".build/${css.sourcePath}\"   } }Resolves to:{   \"css\": {     \"sourcePath\": \"css\",     \"output\": \".build/css\"   } }EventsRoosevelt provides a series of events you can attach code to by passing a function to the desired event as a parameter to Roosevelt's constructor like so:(async () => {   await require('roosevelt')({     onServerStart: (app) => { /* do something */ }   }).startServer() })()Event listThese are sorted in order of when they are executed during the lifecycle of a Roosevelt app.onBeforeMiddleware(app): Fired when the app begins initializing, prior to any middleware being loaded into the app.app: The Express app created by Roosevelt.onBeforeControllers(app): Fired during initialization, prior to any routes being loaded.app: The Express app created by Roosevelt.onBeforeStatics(app): Fired during initialization, prior to any statics being written.app: The Express app created by Roosevelt.onClientViewsProcess(template): Fired to preprocess templates before being exposed to the client.template: A string containing a template written in any JS-based templating engine (e.g. Teddy, Pug, ejs, etc).onServerInit(app): Fired when the server is fully initialized and all middleware has been loaded but before the server has started.app: The Express app created by Roosevelt.onServerStart(app): Fired when the server starts.app: The Express app created by Roosevelt.onAppExit(app): Fired when the app recieves a kill signal.app: The Express app created by Roosevelt.Express variables exposed by RooseveltRoosevelt supplies several variables to Express that you may find handy. Access them using app.get('variableName').appDir: The directory the main module is in.appName: The name of your app derived from package.json. Uses \"Roosevelt Express\" if no name is supplied.appVersion: The version number of your app derived from package.json.controllersPath: Full path on the file system to where your app's controllers folder is located.clientControllersBundledOutput: Full path on the file system to where your app's client-exposed controllers folder is located.clientViewsBundledOutput: Full path on the file system to where your app's client-exposed views folder is located.cssCompiledOutput: Full path on the file system to where your app's minified CSS files are located.cssPath: Full path on the file system to where your app's CSS source files are located.debugMarkup: HTML you can add to your custom error pages if you define any that will print server errors if any exist, display the route list, and add some inline JavaScript that will serialize the request's err, req, and res objects so you can interactively examine them in the browser's developer tools. Only available in development mode.env: Either development or production.express: The Express module.expressSession: The express-session module Roosevelt uses internally. Session middleware.expressSessionStore: The session store instance used by express-session module Roosevelt uses internally.htmlPath: Full path on the file system to where your app's HTML static page source files are located.htmlRenderedOutput: Full path on the file system to where your app's rendered and minified static HTML files are located.httpServer: The http server created by Roosevelt.httpsServer: The https server created by Roosevelt.jsPath: Full path on the file system to where your app's JS source files are located.logger: The roosevelt-logger module Roosevelt uses internally. Used for console logging.modelsPath: Full path on the file system to where your app's models folder is located.package: The contents of package.json.params: The parameters you sent to Roosevelt.preprocessedStaticsPath or preprocessedStatics: Full path on the file system to where your app's preprocessed statics folder is located.preprocessedViewsPath or preprocessedViews: Full path on the file system to where your app's preprocessed views folder is located.publicFolder: Full path on the file system to where your app's public folder is located.roosevelt:state: Application state, e.g. disconnecting if the app is currently being shut down.router: Instance of router module used by Roosevelt.routePrefix: Prefix appended to routes via the routePrefix param. Will be '' if not set.routes: List of all routes in the app.staticsRoot: Full path on the file system to where your app's statics folder is located.view engine: Default view engine file extension, e.g. .html.viewEngine e.g. teddy by default: Any view engine(s) you define will be exposed as an Express variable. For instance, the default view engine is teddy. So by default app.get('teddy') will return the teddy module.viewsPath or views: Full path on the file system to where your app's views folder is located.Additionally the Roosevelt constructor returns the following object:expressApp [Object]: The Express app created by Roosevelt.initServer(callback) or init(callback) [async Function]: Starts the HTML validator, sets up some middleware, runs the CSS and JS preprocessors, and maps routes, but does not start the HTTP server. Call this method manually first instead of startServer if you need to setup the Express app, but still need to do additional setup before the HTTP server is started. This method is automatically called by startServer once per instance if it has not yet already been called. Takes an optional callback.startServer() or start() [async Function]: Calls the listen method of http, https, or both (depending on your configuration) to start the web server with Roosevelt's config.stopServer(params) or stop(params) [Function]: Stops the server from accepting new connections before exiting and takes an optional argument stopServer({ persistProcess: true }) which will allow the process to remain active after the server has closed.Recognized environment variablesThe following is a list of environment variables that Roosevelt listens for.NODE_ENV:Set to production to force the app into production mode.Set to development to force the app into development mode.NODE_PORT: Default HTTPS port to run your app on.Will set HTTP port instead if HTTPS is disabled.HTTP_PORT: Default HTTP port to run your app on. Takes precedence over NODE_PORT.HTTPS_PORT: Default HTTPS port to run your app on.DISABLE_HTTPS: When set to true, the HTTPS server will be disabled and the app will revert to HTTP regardless of what is set in the rooseveltConfig.MAKE_BUILD_ARTIFACTS: Lets you set Roosevelt's makeBuildArtifacts param via environment variable.Environment variable precedence:Environment variables supersede your app's rooseveltConfig.Environment variables can be overridden with command line arguments.Command line usageAvailable npm scriptsRoosevelt apps created with the app generator come with the following notable npm scripts prepopulated in package.json:npm run production: Runs the app in production mode.Default shorthands:npm run prodnpm run pnpm startScript is short for: nodemon app.js --production-modenpm run development: Runs the app in development mode.Default shorthands:npm run devnpm run dScript is short for: nodemon app.js --development-modenpm run production-proxy: Runs the app in production mode, but with localhostOnly set to true and hostPublic set to false. This mode will make it so your app only listens to requests coming from localhost and does not serve anything in the public folder. This mode is useful when you want to host your app behind a reverse proxy from a web server like Apache or nginx and is considered a best practice for Node.js deployments.Default shorthands:npm run prodproxynpm run xScript is short for: nodemon app.js --production-proxy-modenpm run generate-certs: Generates self-signed HTTPS certs for your app.Script is short for: node ./node_modules/roosevelt/lib/scripts/certsGenerator.jsSupports command line flags --appDir somewhere --secretsPath somewhere to override those default locations.npm run generate-csrf-secret: Generates a secret key for the CSRF protection.Script is short for: node ./node_modules/roosevelt/lib/scripts/csrfSecretGenerator.jsSupports command line flags --appDir somewhere --secretsPath somewhere to override those default locations.npm run generate-session-secret: Generates a secret key for the express-session module.Script is short for: node ./node_modules/roosevelt/lib/scripts/sessionSecretGenerator.jsSupports command line flags --appDir somewhere --secretsPath somewhere to override those default locations.npm run generate-secrets: Runs the above three scripts.Supports command line flags --appDir somewhere --secretsPath somewhere to override those default locations.Available command line argumentsnode app.js --production-mode: Runs the app in production mode.Default shorthands:--prod-pnode app.js --development-mode: Runs the app in development mode.Default shorthands:--dev-dnode app.js --build: Only runs the build scripts and doesn't start the app.Default shorthands:-bnode app.js --jsbundler=verbose: Prints verbose errors from the JS bundler to the console.Default shorthands:--jsb=verbose-j=verbosenode app.js --jsbundler=verbose-file: Prints verbose errors from the JS bundler to the console as well as write a jsBundlerError.txt file to the app's root directory containing the full error.Default shorthands:--jsb=verbose-file-j=verbose-filenode app.js --production-proxy-mode: Runs the app in production mode, but with localhostOnly set to true and hostPublic set to false. This mode will make it so your app only listens to requests coming from localhost and does not serve anything in the public folder. This mode is useful when you want to host your app behind a reverse proxy from a web server like Apache or nginx and is considered a best practice for Node.js deployments.Default shorthands:--prodproxy-xnode app.js --enable-validator: Forces the HTML validator to be enabled.Default shorthands:--html-validator-hnode app.js --disable-validator: Forces the HTML validator to be disabled.Default shorthands:--raw-rCombining npm scripts and command line argumentsThe npm scripts can be combined with the command line flags.For example, running npm run dev -- --disable-validator will run your app in development mode and force the HTML validator to be disabled."})
window.siteTexts.push({file: "docs/0.30.7/deployment/index.html", title: "deployment (0.30.7)", text: "If you want to deploy a Roosevelt multi-page app or single-page app live to the internet, there are some things you should do to harden it appropriately if you expect to take significant traffic.Run the app behind a reverse proxy and use all the CPU coresTo do this, use the production-proxy-mode command line flag and run the process on multiple cores using a tool like pm2.Then host your app behind a reverse proxy from a web server like Apache or nginx, which is considered a best practice for Node.js deployments.Running the app in production-proxy mode runs the app in production mode, but with localhostOnly set to true and hostPublic set to false. This mode will make it so your app only responds to requests coming from the proxy server and does not serve anything in the public folder. You will then need to serve the contents of the public folder directly via Apache or nginx.Use HTTPSSetting up HTTPS can be tricky to configure properly especially for novices, so it can be tempting not do it to simplify deployment, but your website won't be seen as professional if it isn't served up via HTTPS. It's worth the effort to set it up.Use a caching service or a database to store sessionsRoosevelt's default session store for express-session works great if your app only needs a single process, but if you're spreading your app across multiple processes or servers, you will need to reconfigure express-session to use a caching service that supports replication like redis or a database that supports replication like PostgreSQL in order to scale your app.Use Roosevelt's static site generator instead if you canNot all sites need to execute logic dynamically on the backend. If you can get away with making a site using a static site generator, then that will dramatically simplify deployment. rooseveltframework.org is itself a static site generated with Roosevelt's static site generator, and you can view its source code here."})
window.siteTexts.push({file: "docs/0.30.7/get-started/index.html", title: "get started (0.30.7)", text: "🧸 roosevelt PrerequisitesFirst you will need to install Node.js. Both the current and LTS version of Node.js are supported. It is recommended that you have both the current and LTS versions of Node.js installed on your system. To do that, it is recommended that you install Node.js using a Node.js version manager like nvm or nvm-windows rather than the official installer, as a version manager will allow you to switch between multiple versions of Node.js easily.Make a Roosevelt app🏭🧸 mkroosevelt The simplest way to make a Roosevelt app is to simply run the following command:npx mkrooseveltThen follow the prompts to decide whether to make a multi-page app, static site generator, or a single page app.Other ways to make Roosevelt apps🏭🧸 generator-roosevelt What the mkroosevelt command does under the hood is call the Roosevelt app generator, a command line script based on Yeoman, to create a sample Roosevelt app for you. You could also install the app generator to your system if you like. To do that, first globally install Yeoman and the Yeoman-based Roosevelt app generator:npm i -g yo generator-rooseveltThen create a Roosevelt app using the Roosevelt app generator:yo rooseveltThen follow the prompts.Create a Roosevelt app manuallyIt is also possible to create a Roosevelt app without using the app generator. This will result in a more minimalist default configuration (e.g. no CSS or JS preprocessors enabled by default).To do that:First create a new folder and cd into it.Then npm i roosevelt. This will create a node_modules folder with Roosevelt and its bare minimum dependencies.Create a file named app.js.Put this code in app.js:(async () => {   await require('roosevelt')({     makeBuildArtifacts: true   }).startServer() })()Then node app.js. If the makeBuildArtifacts parameter is set to true like the above code example, an entire Roosevelt app with bare minimum viability will be created and the server will be started.Default directory structureBelow is the default directory structure for an app created using the Roosevelt app generator.Application logicapp.js or build.js: Entry point to your application. Feel free to rename this, but make sure to update package.json's references to it. It defaults to app.js when building a multi-page app or a single page app. It defaults to build.js when building a static site generator.lib: A folder for any includable JS files that don't belong in any of the other directories. It has been added to the require stack so you can simply require('lib/someFile').mvc: Folder for models, views, and controllers.controllers: Folder for controller files; the \"C\" in MVC. This is where your HTTP routes will go.models: Folder for model files; the \"M\" in MVC. This is where you will get data to display in your views e.g. by querying a database or do other business logic.views: Folder for view files; the \"V\" in MVC. This is where your HTML templates will go.Static filesstatics: Folder for source CSS, image, JS, and other static files. By default some of the contents of this folder are symlinked to the public folder, which you can configure via params.css: Folder for source CSS files.images: Folder for source image files.js: Folder for source frontend JS files.pages: Folder for HTML templates that get rendered as static pages and deposited into the public folder.Build artifacts.build: Folder for build artifacts.preprocessed_statics: Static files that have been preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled.preprocessed_views: View files that have had their uses of web components progressively enhanced using the progressively-enhance-web-components module and/or preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled.The output JS files from the clientControllers or clientViews features.public: All contents within this folder will be exposed as static files. For the most part, the contents of this folder will be populated from the statics folder. This folder is added to .gitignore by default because it is considered a build artifact.Application infrastructure.gitignore: A standard file which contains a list of files and folders to ignore if your project is in a git repo. Delete it if you're not using git. The default .gitignore file contains many common important things to ignore, however you may need to tweak it to your liking before committing a fresh Roosevelt app to your git repo.node_modules: A standard folder created by Node.js where all modules your app depends on (such as Roosevelt) are installed to. This folder is created when installing dependencies using the npm i command. It is added to .gitignore by default because it is considered a build artifact.package.json: A file common to most Node.js apps for configuring your app.package-lock.json: An auto-generated file common to most Node.js apps containing a map of your dependency tree. This is created after you run npm i for the first time. Once the file exists within your project, you can run npm ci instead of npm i when installing dependencies, which will be more performant and will result in reproducible builds that always have the same versions of every dependency, including downstream dependencies.rooseveltConfig.json: Where your Roosevelt config is stored and what your params are set to. These values can be overridden when calling Roosevelt's constructor.secrets: A folder for \"secret\" files, e.g. session keys, HTTPS certs, passwords, etc. It is added to .gitignore by default because it contains sensitive information, so it should not be committed to git."})
window.siteTexts.push({file: "docs/0.31.0/changelog/index.html", title: "changelog (0.31.0)", text: "0.31.0Breaking: npm run generate-csrf-secret script removed, as it is no longer necessary due to an internal switch of Roosevelt's CSRF dependency from csrf-csrf to csrf-sync. You should delete any csrfSecret.json files in your secrets directory after upgrading Roosevelt, as the file is no longer needed. You should also remove the npm run generate-csrf-secret from your package.json.Added expressVersion param which lets you decide which version of Express to use. Choose between either 4 or 5. This option exists because there are significant differences between Express 4 and Express 5. Default: 5.Added glob pattern support to CSRF route exemption param.Removed enableCLIFlags param which has been obsolete for some time and didn't actually do anything.Changed the deprecation checker to only run in development mode and added a new param deprecationChecks that will let you disable it entirely.Updated dependencies.0.30.7Added new onBeforeControllers event.Added new html.folderPerPage param.Made it easier to debug HTML validation errors on static sites.Fixed bugs associated with the stopServer() method.Fixed bugs associated with using a roosevelt.config.json file in your app.Fixed a bug that could cause middleware errors not to flow through the middleware stack correctly.Copyedited documentation significantly.Updated dependencies.0.30.6Added onBeforeStatics event.Altered makeBuildArtifacts log to be a warning.Fixed writing JS file log to be properly classified as info instead of log.Fixed a bug that could cause the static site generator to not write new files even if the file has changed.Updated dependencies.0.30.5Added error handling for if you supply Roosevelt constructor params to initServer or startServer.Fixed bugs that could cause initServer, startServer, and stopServer to not be properly awaitable.Fixed bug that would cause undefined to print on error pages in Roosevelt apps without a package.json version defined.Updated dependencies.0.30.4Fixed bugs that prevented CSS source maps from working correctly.Updated dependencies.0.30.3Fixed model overriding precedent in static site generator.0.30.2Fixed a crash associated with the default catch-all route.0.30.1Fixed a bug that caused two catch-all routes to appear in the router stack.Updated dependencies.0.30.0Breaking: Upgraded to Express 5.x.To migrate:Most Roosevelt apps probably only need to change * routes to *all.Apps that use more complex routing may need other changes.Full list of considerations for migrating to Express 5: https://expressjs.com/en/guide/migrating-5.htmlAdded expressSessionStore Express variable, which is the session store instance used by express-session module Roosevelt uses internally.Added support for catch-all * in static site generator model definitions.Updated dependencies.0.29.5Added new copy param that will copy files from a source location to a destination location.Added new feature to integrated webpack bundler to disable LICENSE.txt generation by default. This can be overridden by supplying your own optimization param to your webpack config.Improved docs.Updated dependencies.0.29.4Added first-line comment blocklist support to the static site generator.Added static site generator folder to the require module path.Added async/await support for static site models.Updated dependencies.0.29.3Fixed a bug that could cause some routes not to load.Fixed a bug that could cause more than one * route to end up in the router stack.Updated dependencies.0.29.2Fixed a bug that would cause MAKE_BUILD_ARTIFACTS to supersede the --build CLI flag.Fixed a bug that would cause an error to falsely print about not being able to create symlinks.Updated dependencies.0.29.1Fixed bugs associated with MAKE_BUILD_ARTIFACTS sometimes not working properly.Updated dependencies.0.29.0Breaking: Moved default output location for clientControllers and clientViews to the .build folder.To migrate your app, you will likely need to change js.webpack.bundles.config.resolve.modules to replace any entry that has \"${publicFolder}/js\" with \"${buildFolder}/js\".Breaking: Changed default of preprocessedViewsPath param from \".build/.preprocessed_views\" to \".build/preprocessed_views\" and changed default of preprocessedStaticsPath param from \".build/.preprocessed_statics\" to \".build/preprocessed_statics\".Added buildFolder param to customize the name of the .build folder.Altered output of controllersBundler and viewsBundler feature to produce files that are easier to read.Updated dependencies.0.28.1Fixed a bug where HTTPS certs wouldn't always automatically generate when they should.Updated various dependencies.0.28.0Breaking: Removed config auditor feature.Added more checks to the deprecation checker.Updated dependencies.0.27.0Breaking: Changed http/s param structure:Changed port param to http.port and changed the default to 43763.Changed https.port param default to 43711.Removed https.force param. Non-secure http can now be disabled via http.enable being set to false.Removed authInfoPath, passphrase, caCert, requestCert, and rejectUnauthorized params. Replaced them with options where you can pass any native option.The ca, cert, key, and pfx params can take file paths relative to your secretsDir in addition to everything else natively supported (strings, buffers, and arrays of strings or buffers).The file paths get resolved within arrays if you pass arrays to any of those as well.These collective changes mean most Roosevelt apps will need to alter their Roosevelt configs from something that looks like:\"port\": 19679, \"https\": {   \"enable\": true,   \"port\": 19679,   \"force\": true,   \"authInfoPath\": {     \"authCertAndKey\": {       \"cert\": \"cert.pem\",       \"key\": \"key.pem\"     }   } },To be something like this instead:\"http\": {   \"enable\": false }, \"https\": {   \"enable\": true,   \"port\": 19679,   \"options\": {     \"cert\": \"cert.pem\",     \"key\": \"key.pem\"   } },Breaking: Changed behavior of NODE_PORT environment variable to now set https port when https is enabled and fall back to http if https is disabled.Breaking: Moved the versioning of webpack from Roosevelt itself to the app. You will need to declare webpack as a dependency in your app if you intend to use the JS bundler feature in Roosevelt.Breaking: Changed js.webpack.bundles.env param to require values development or production instead of dev or prod.Breaking: Changed js.webpack.bundles.verbose param to js.verbose.Breaking: Changed --webpack, --wp, and --w CLI flags to --jsbundler, --jsb, and --j respectively.Breaking: Changed default of preprocessedViewsPath param from 'mvc/.preprocessed_views' to '.build/.preprocessed_views' and changed default of preprocessedStaticsPath param from '.preprocessed_statics' to '.build/.preprocessed_statics'. Collectively these changes mean most Roosevelt apps should remove .preprocessed_views and .preprocessed_statics from .gitignore and add .build instead.Added new param js.customBundler that will let you define a custom JS bundler.Added new param js[bundler].customBundlerFunction that will let you define custom behavior for default supported JS bundlers like Webpack.Updated dependencies.0.26.1Added new Express variable debugMarkup that contains HTML you can add to your custom error pages if you define any that will print server errors if any exist, display the route list, add some inline JavaScript that will serialize the request's err, req, and res objects so you can interactively examine them in the browser's developer tools. Only available in development mode.Added the aforementioned debug markup to the default error pages in development mode as well.Added routes Express variable which will list all routes in the app.Added new recognized environment variable: MAKE_BUILD_ARTIFACTS will allow you to set Roosevelt's makeBuildArtifacts config.Added new param minifyHtmlAttributes: Settings to pass to minify-html-attributes.Options:enable: Whether or not to enable minify-html-attributes.Default: [Boolean] false.Available options:'production': Enable only in production mode.'development': Enable in all modes.true: Will be taken to mean 'production'.minifyHtmlAttributesParams: Params to pass to minify-html-attributes.Default: [Object] {}Default: [Object]{   \"enable\": true,   \"minifyHtmlAttributesParams\": {} }Note: Roosevelt will always override 3 params from minify-html-attributes:htmlDir will always be set to Roosevelt's preprocessedViewsPath.cssDir will always be set to Roosevelt's preprocessedStaticsPath.jsDir will always be set to Roosevelt's preprocessedStaticsPath.Added new param preprocessedStaticsPath: Relative path on filesystem to where your preprocessed static files will be written to. Preprocessed static files are view files that have been preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled.Default: [String] \".preprocessed_statics\".This feature will only be active if minifyHtmlAttributes is enabled.Replaced isomorphicControllers param with clientControllers param and made it function similarly to clientViews.Fixed a bug with displaying app version on default error pages.Fixed a bug that could lead to a counter-intuitive error if your template rendered an empty response in dev mode.Updated various dependencies.0.26.0Breaking: Added new param preprocessedViewsPath: Relative path on filesystem to where your preprocessed view files will be written to. Preprocessed view files are view files that have had their uses of web components progressively enhanced using the progressively-enhance-web-components module.Default: [String] \"mvc/.preprocessed_views\".To disable this feature, set the value to false.This is breaking because if you leave it enabled by default (recommended), you will need to add .preprocessed_views to your .gitignore.Breaking: Switched to external source maps for the CSS preprocessor. This necessitated changing the custom CSS preprocessor API to require returning an object instead of a string.If you have written a custom CSS preprocessor, the new return value is:return {   css: 'write code to output css here',   sourceMap: 'write code to output source map here (optional)' }Added new param prodSourceMaps to allow source maps to be generated in prod mode for both CSS and JS.Added IP address to the output when the server starts.Added new CLI script secretsGenerator.js that allows you to combine certsGenerator.js, csrfSecretGenerator.js, and sessionSecretGenerator.js into one command.Added feature to override appDir and secretsPath for the CLI scripts using --appDir somewhere and --secretsPath somewhere CLI flags.Added exceptionRoutes option to the frontendReload param.Added a check for broken symlinks in the public folder, which will be purged if any exist.Added support for placing your Roosevelt config in a roosevelt.config.json file in addition to the previous options.Added better error when attempting to start a Roosevelt app on a file system that does not support symlinks.Changed source maps from inline to external.Fixed a bug that caused the JS bundler to not log when it was writing JS files.Fixed a bug that caused a statics/pages directory being created when it isn't needed.Fixed a bug that could cause the public folder and statics folder to be created even when makeBuildArtifacts is disabled.Fixed a bug that caused the views bundler and isomorphic controllers finder to write a new views bundle to disk even when it wasn't needed.Fixed frontendReload not working in Firefox with the default HTTPS config.Updated various dependencies.0.25.0Breaking: Supplying an allowlist to the views bundler will now implicitly disable exposeAll.Breaking: Renamed secretsDir param to secretsPath.Updated all file path express variables to include full absolute paths.Fixed various bugs in the views bundler feature.Fixed a rare bug where CSRF and session secrets could be written to the wrong directory.Fixed a bug where HTTPS certs could be automatically generated when they shouldn't be.Updated various dependencies.0.24.0Breaking: Altered startServer and initServer methods to now be async. They now need to be awaited to avoid possible race conditions.As a result, starting the app in a single line needs to be updated to await (require('roosevelt').startServer()).Callback arguments have been removed from these methods as well.Breaking: Removed app.get('routes'), onReqAfterRoute, onReqBeforeRoute, onReqStart, and onStaticAssetsGenerated.Breaking: Renamed app.httpServer to app.get('httpServer') and app.httpsServer to app.get('httpsServer').Breaking: Added enable param to clientViews. If your app uses the clientViews feature, you will need to add this param to continue using the feature.Added new method onBeforeMiddleware.Added start and stop method shorthands for startServer and stopServer respectively.Refactored various things under the hood to improve code quality, performance, and reduce unnecessary dependencies.Updated various dependencies.0.23.2Removed toobusy feature since it is temperamental and the dependency is no longer maintained.Refactored internal wildcardMatch to use minimatch under the hood.Replaced html-minifier with html-minifier-terser since html-minifier-terser is better-maintained.Updated various dependencies.0.23.1Added feature that scans the router stack to move the 404 route (the * route) to the end of the stack every time a new route is added, even if the route is added at runtime so that you can dynamically add routes while the app is running.Updated various dependencies.0.23.0Removed cores feature since it is largely redundant now thanks to the widespread popularity of tools like pm2. Also removed various deprecated cluster module support as well.Updated various dependencies.0.22.16Made it possible to disable helmet by setting the helmet param to false.Updated various dependencies.0.22.15Added option to exempt certain routes from CSRF protection.Updated various dependencies.0.22.14The JS bundler will now add mode: \"development\" and devtool: \"source-map\" automatically to your Webpack bundles in development mode.Updated various dependencies.0.22.13Altered helmet's defaults again. The form-action directive has been set to null. This makes it possible to submit forms to other domains in production mode.0.22.12Added 'unsafe-inline' option to helmet's Content-Security-Policy's script-src directive by default in Roosevelt. This will prevent inline scripts from being blocked in production mode.Updated various dependencies.0.22.11Added DISABLE_HTTPS environment variable which when set to true, the HTTPS server will be disabled and the app will revert to HTTP regardless of what is set in the rooseveltConfig.Updated various dependencies.0.22.10Enabled WAL in the SQLite instance used for session storage by default.Updated various dependencies.0.22.9Fixed an issue with cert generation from CLI scripts properly this time.0.22.8Fixed an issue with cert generation from CLI scripts.Updated various dependencies.0.22.7Added a max age to the default express-session configuration.Fixed an issue with cert generation in production mode.Updated various dependencies.0.22.6Fixed a bug that caused self-signed certs to get regenerated every time the app restarted.Updated various dependencies.0.22.5Certs generator will now run in production mode as well if https is enabled and if the files do not already exist. This behavior can be suppressed by setting https.autoCert to false.Fixed bug that prevented the static site generator feature from working in dev mode when the HTML validator was enabled.Fixed README formatting typos.Updated various dependencies.0.22.4Made it possible to set expressSession to true which will set a sane default config so you don't have to spell one out.0.22.3Updated default session store to use SQLite instead of an in-memory database so that sessions are not invalidated when the server restarts.Updated various dependencies.0.22.2Fixed a bug that caused self-signed certs to get regenerated every time the app restarted.Updated various dependencies.0.22.1Exposed the express-session middleware for use in Roosevelt apps.Updated various dependencies.0.22.0Breaking: Added a unified secrets directory for various app secrets such as HTTPS certs, session secret, CSRF secret, etc. The name of the directory is configurable, but when upgrading an app from the previous version, you may need to alter your rooseveltConfig to remove directories from your cert or key paths. You must now specify only a file name in those params.Added support for express-session for session support.Added CSRF protection.Improved dev sync script for developing Roosevelt significantly.Updated various dependencies.0.21.16Fixed an issue that could cause the server to start before all the controller routes were loaded.Updated various dependencies.0.21.15Updated various dependencies.0.21.14Updated various dependencies.0.21.13Certs will be auto-generated in dev mode now if they don't exist.Various dependencies updated.0.21.12Fixed isomorphic controllers bundler webpack bug in Windows.Various dependencies updated.0.21.11Added a new --build CLI flag that will instruct Roosevelt to just build the build artifacts but not start the server.Added new onStaticAssetsGenerated event that is fired when the server finishes init but before the server starts.Fixed an issue that would cause the server to start even when makeBuildArtifacts is set to staticsOnly. This has the side effect of causing serverStart() to revert to the behavior of init() if makeBuildArtifacts is set to staticsOnly.Fixed a bug that would cause roosevelt-router to produce a false negative when detecting teddy.Various dependencies updated.0.21.10Added --webpack=verbose and --wp=verbose-file CLI flags to make it easier to see verbose webpack errors. Available shorthands: --wp and -w.Added detection of undefined template literal variables (e.g. via typo) in rooseveltConfig.Added more helpful error if starting an app with broken symlinks.Various dependencies updated.0.21.9Fixed frontend reload when https is enabled with self-signed certs.Removed parent-require dependency.Added new dev_sync.sh to make writing code for Roosevelt easier. See instructions on how to use it in the README.Various dependencies updated.0.21.8Added wildcard matching to views bundler feature.Fixed bug that could cause build artifact generation to crash starting the app.Various dependencies updated.0.21.7Fixed CSS preprocessor breaking on Windows when using the default configuration in a newly generated app.Various dependencies updated.0.21.6The certs-generator script's default name has been changed to generate-certs. The config auditor will now expect it to be named that.The config-audit script's default name has been changed to audit-config. The config auditor will now expect it to be named that.allowlist in CSS preprocessor now supports wildcard matching, e.g. dir/*.Various dependencies updated.0.21.5allowlist and blocklist in static site generator feature now supports wildcard matching, e.g. dir/*.Various dependencies updated.0.21.4Added allowlist and blocklist to the static site generator feature.Fixed bug with the static site generator feature that required absolute paths for including child templates in a main template.Various dependencies updated.0.21.3When versionedPublic is true, Roosevelt will no longer deposit static HTML pages into the versioned directory.Various dependencies updated.0.21.2Fixed bug where the config auditor would complain about the makeBuildArtifacts param being set to string.Static site generator will now run the HTML validator against rendered templates in dev mode only.Various dependencies updated.0.21.1Static site generator can now be supplied models by file instead of by configuration. If model data is not supplied by configuration, Roosevelt will try to automatically load a model from a JS file with the same name alongside the template if it exists instead.Static site generator will now run the HTML validator against rendered templates.Bumped CI Node versions.0.21.0Breaking: htmlMinifier param renamed and expanded to html. You will need to update your Roosevelt config.Added feature html.sourcePath, html.models, and html.output which lets you generate static HTML pages from the your statics directory by compiling them with a view engine and depositing the output to the public folder at start time.Fixed issue with symlinks that would cause symlinking to a file rather than a directory to fail in Windows.Some error message copyediting.Some minor refactoring and documentation fixes.Various dependencies updated.0.20.1makeBuildArtifacts will now accept a new value of 'staticsOnly' which will allow Roosevelt to create static files but skip the creation of the MVC directories.initServer can now also be called as init instead.Various dependencies updated.0.20.0Breaking: Renamed generateFolderStructure to makeBuildArtifacts.Various dependencies updated.Breaking: Among them, formidable was updated which is a breaking change for any app that takes file uploads as property names in req.files have been renamed, most notably file.path is now file.filepath and file.name is now file.originalname.Removed checkDependencies.0.19.14Fixed bug that required admin permissions to start an app in Windows.0.19.13Added script to generate self-signed HTTPS certs:npm run certs-generator: Generates self-signed HTTPS certs for your app.Default shorthand:npm run cScript is short for: node ./node_modules/roosevelt/lib/scripts/certsGenerator.jsSome refactoring.Various dependencies updated.0.19.12Various dependencies updated.Migrated colors to @colors/colors.0.19.11Fixed bug that caused isoRequire to only work with absolute paths.Various dependencies updated.0.19.10Added roosevelt-router feature to improve support for writing isomorphic code for SPAs.Added isomorphicControllers config option that will permit Roosevelt to make a list of all your controller files that can be used client-side as well so they can be auto-loaded client-side too.Altered clientViews such that the template list will lack file extensions if the file extension of the template matches the default view engine's file extension.Breaking: Default clientViews output bundle changed from bundle.js to views.js.Fixed confusing console warning.HTML validator frontend scripts moved to <head>.Various dependencies updated.0.19.9Made Webpack errors less verbose.Various dependencies updated.0.19.8Updated for support for Node 16.x. This required a migraiton from node-sass to dart-sass.Dropped official Node 15 support, though it will probably still work. Node 14 remains officially supported.Various dependencies updated.0.19.7clientViews allowlist now allows directories.Default command line flags and environment variables recognized by Roosevelt can now be overridden via source-configs.Various dependencies updated.0.19.6Added onAppExit event.Fixed bug with https feature.Various dependencies updated.0.19.5Fix for Node 15 / npm 7 regression. Config auditor and deprecation checker will no longer run as postinstall scripts to compensate for INIT_CWD being removed from npm. These checks will be run exclusively on application first run instead (or any time the public folder is removed). (Closes https://github.com/rooseveltframework/roosevelt/issues/975)Dropped Node 12 support.Various dependencies updated.0.19.4Fixed bug that caused Roosevelt to not listen to NODE_ENV.Moved symlink creation to a separate step and made happen earlier in the app initialization process to maek it easier to work with the various Roosevelt server starting events.Various dependencies bumped.0.19.3Fixed bug which could cause CSS preprocessor to fail if there are subdirectories in your CSS folder.Various dependencies bumped.0.19.2Breaking: clientViews no longer exports a function, instead exporting a JSON object.Breaking: clientViews will no longer minify templates by default.Fixed bug with clientViews exposeAll feature that would cause it to scoop up any system files that might be present in your views directories.Fixed bug with clientViews blocklist mistakenly defaulting to an object instead of an array which could cause crashes in some configurations.Fixed bug with CSS preprocessor that would cause it to scoop up any system files that might be present in your CSS directories.Various dependencies bumped.0.19.1Added ability to configure helmet dependency.Fixed bug that caused frontend reload not to work.Fixed a bug in the Express env variable that would cause it to be incorrectly set at times.Updated some out of date into in the README.Removed some unnecessary code.Various dependencies bumped.0.19.0Breaking: Production mode behavior changed significantly:localhostOnly and alwaysHostPublic defaults were flipped to false and true respectively.alwaysHostPublic was renamed to hostPublic.The --host-public command line flag was removed, since it is no logner needed because hostPublic defaults to true now.New command line flag added called production-proxy to let you opt-in to localhostOnly and alwaysHostPublic being set to true and false respectively as before.Various dependencies bumped.0.18.3You can now use PHP as your templating engine in a Roosevelt app or any other Express application. PHP should be faster than any JS-based templating engine for complex templates since its parser is written in C rather than JS.Breaking: blacklist/whitelist params throughout the API have been renamed to blocklist/allowlist.README was copyedited to improve the clarity of the default behaviors of some of the API, remove outdated information, and other small improvements.The host-public warning was made more prominent so that production mode default behavior regarding statics is less confusing to people.CI improvements.Breaking: Roosevelt is no longer tested on Node 10.x. We didn't do anything to explicitly break older Node versions, but use at your own risk.Various dependencies bumped.0.18.2Added helmet middleware to improve security by default.Replaced body-parser middleware with native Express integration.Various dependencies bumped.0.18.1Changed passphrase option from https.p12.passphrase to https.passphrase so it can be used for certAndKey configurations as well.CI improvements.Various dependencies bumped.0.18.0Replaced the vnu-jar based HTML validator with express-html-validator 🎉.Roosevelt no longer does any background process management as a result.Moved all developer facing dependencies to optionalDependencies.They can be omitted from installion when using npm i --no-optional.Refactored frontend reload implementation.check-dependencies now only runs in dev mode.API changes:Removed separateProcess from htmlValidator.Removed port from htmlValidator.Removed showWarnings from htmlValidator.Added validatorConfig to htmlValidator which respresents a set of rules for the validator to check for.Rules can also be set in a .htmlValidate.json placed in the app root.Removed verbose from frontendReload.These logs are now controlled by the general verbose logging param.Removed ROOSEVELT_VALIDATOR environment variable.Removed ROOSEVELT_AUTOKILLER environment variable.Removed --attach-validator and -a cli flags.Removed --background-validator and -b cli flags.Removed --disable-validator-autokiller, --no-autokiller, and -n cli flags.Removed --enable-validator-autokiller, --html-validator-autokiller, and -k cli flags.Removed dependencies:execafkillhtml-validatorprismjsps-nodetampervnu-jarVarious dependencies bumped.0.17.1Fixed a CSS bug where CSS files were still not being written due to a file existence check.Fixed a CSS bug where empty CSS files were being written because their LESS equivalent would never generate CSS in that particular file.Various dependencies bumped.0.17.0Breaking: Replaced staticsSymlinksToPublic with symlinks.Breaking: Replaced routers param with a simplified routePrefix param which defines a subfolder to mount the app to.Breaking: Renamed multipart param to formidable.Added ability to configure Roosevelt via a rooseveltConfig.json config file placed in app root instead of from a rooseveltConfig object in package.json.Added router Express variable that opens up access to internally used router instance.Added routePrefix Express variable that exposes currently used routePrefix or an empty string if not used.Fixed bug where changes to CSS files were not being written to the output directory.Refactored internal fsr module.Updated internal usage of formidable API.Internal changes to stabilize the automated tests.Various dependencies bumped.0.16.2Added deprecation check for old compiler sub modules.Various dependencies bumped.0.16.1Stopped the config auditor from complaining about obsolete scripts.Fixed cases where some CLI flags weren't being applied to config.Test fixes.Various dependencies bumped.0.16.0Replaced browserify with webpack. This has significant breaking API changes. You will need to totally rewrite your JS bundles from browserify bundles to webpack bundles to upgrade to this version of Roosevelt. It is also recommended that you remove all references to old build artifacts such as .build and .bundled in your application as well from package.json, .gitignore, etc.Eliminated concept of separate JS compilers in favor of declaring this via your webpack config. Note: webpack defaults to minifying JS using terser.Eliminated concept of CSS preprocessor middleware modules in favor of built-in support for LESS, Sass, and Stylus. Other CSS preprocessors can be used as well with a bit of extra configuration.API changes:Removed symlinkToPublic, compiler, output, whitelist, and blacklist params from js.Replaced js.bundles with js.webpack.Removed css.symlinkToPublic.Replaced css.compiler.params.cleanCSS with css.minifier.Added css.compiler.enable.Replaced css.compiler.nodeModule with css.compiler.module.Replaced css.compiler.params with css.compiler.options.css.output is now relative to publicFolder instead of staticsRoot.clientViews.output is now relative to publicFolder instead of staticsRoot.Removed cleanTimer (Obsolete in absense of .build).App cleaner has been removed.source-configs integration is now more tightly knit.Config auditor no longer complains about missing params.Auditor now checks config params on a case-by-case basis.ES6 style variables can now be used in rooseveltConfig referencing other rooseveltConfig entries.Introduced views bundler: An API that allows you to expose view code to frontend JS for client-side templating.Added a button to the validation error page to display the page anyway and another button to disable the validator entirely until the server restarts.Fixed bug with frontend reload causing it to inject the script tag in the wrong location in some situations.Fixed bug where router would cause app routes to fail when no controller files exist.Fixed bug where auto build scanner would crash the app when generateFolderStructure is false.Fixed bug which resulted in a cryptic error if a Roosevelt app was moved to another directory.Fixed bug where symlink failed errors would appear when generateFolderStructure is false.Complete rewrite of HTML validator and related helper scripts.Refactored multipart middlware.Various dependencies bumped.CI improvements.Many rewritten tests.0.15.1Fixed bug causing apps to crash in dev mode.Various dependencies bumped.0.15.0Moved CSS minification from roosevelt-less to Roosevelt using clean-css as a direct dependency. The clean-css library had an update with breaking changes so the rooseveltConfig params in advanced and aggressiveMerging in cleanCSS are now outdated.New default script npm run proddev: Runs the app in production mode, but with the public folder hosted by the Roosevelt app. This is useful for doing development in production mode without having to stage a complex simulation of your production environment, which would likely include hosting static files via another web server better-suited to serving statics like Apache or nginx.Roosevelt now sources configs internally using source-configs.Validator will now be disabled if HTTP_PROXY or HTTPS_PROXY are set but localhost is not in NO_PROXY.Fixed a bug where not having devDependencies or dependencies objects in your app's package.json would throw errors when installing dependencies. Accordingly re-reverted most changes in 0.14.1 to fix buggy behavior with devDependencies in npm installs.The check-dependencies call will now only apply to production dependencies.Some internal refactoring to clean things up.Various dependencies bumped.0.14.6Fixed a bug that caused devDependencies of Roosevelt to be removed if npm i was run more than once.Fixed a bug that caused the automated testing to break if your clone of Roosevelt was not named \"roosevelt.\"Various dependencies bumped.0.14.5staticsSymlinksToPublic will now create missing subdirectories necessary to create a symlink in a target location.Fixed a bug which caused Java hserrpid error logs to pile up in your app directory under certain conditions.Fixed a bug which caused frontend reload to not work on the various error pages.Added code comment above frontend reload script tag to explain that it is injected by Roosevelt.Did some copyediting on frontend reload logging.Various dependencies bumped.0.14.4Added automatic browser reloading when your frontend code changes (via reload).A console warning will now appear explaining why public static assets don't load in prod mode when alwaysHostPublic is set to false (the default).New Express variable added: routes containing a list of all routes loaded in the application.Various dependencies bumped.CI improvements.0.14.3Restored move of several things to devDependencies to shrink production builds. Feature is now activated using ROOSEVELT_DEPLOYMENT environment variable. There are also new corresponding npm run commands dev-install and dev-prune to manage this. See README for more details.Copyediting on several logs to improve clarity.Various dependencies bumped.CI improvements.0.14.2Reverted most changes in 0.14.1 to fix #713, but preserved modularization of htmlValidator.js so that if any devDependencies are missing, the app will not crash in production mode.Various dependencies bumped.0.14.1Moved several things to devDependencies to shrink production builds.Various dependencies bumped.0.14.0Replaced internal logger with roosevelt-logger. Note: this removes the winston Express variable that was previously provided, but it is still indirectly accessible by drilling down through the logger Express variable now. See roosevelt-logger member variable documentation.If custom routers are being used, the res.redirect() method will now prepend the prefix to redirects that are relative to the hostname. To override this setting pass true as the last argument.HTML validator exceptions param will now accept an array of values instead of just a single string value.Various dependencies bumped.CI improvements.0.13.0Roosevelt will now warn you if your CSS/JS compile directory is getting stale and might need to be cleaned with npm run clean. A new cleanTimer param has been added to configure or disable this check.Added new param routers to add support for Express Routers.Added new feature to create custom CSS/JS preprocessors on the fly.Added environment variable to enable/disable the HTML validator autokiller.Added OpenJDK support to the Java HTML Validator.Various dependencies bumped.CI improvements.0.12.2Introduced changelog.Autokiller now sends human-readable GET.Fixed bug which caused the config auditor to report false errors in the case of third party module params being set to configurations other than the default.Fixed bug related to HTTPS cert parsing.Disabled option in HTML minifier which removes HTML comments by default.Various dependencies bumped.CI improvements.0.12.1 and belowHere be dragons…"})
window.siteTexts.push({file: "docs/0.31.0/coding-apps/index.html", title: "coding apps (0.31.0)", text: "Making model filesPlace a file named dataModel.js in mvc/models.Here's a simple example dataModel.js data model:// dataModel.js module.exports = () => {   return { some: 'data' } }In more complex apps, you might query a database to get your data instead.Making view filesViews by default are Teddy templates. See the Teddy documentation for information about how to write Teddy templates.You can also configure Roosevelt to use any templating system supported by Express for your views.Making controller filesController files are places to write Express routes. A route is the term Express uses for URL endpoints, such as https://yoursite/blog or https://yoursite/about.Controllers bind models and views together.To make a new controller, make a new file in the controllers directory. For example:// someController.js module.exports = (router, app) => {   // router is an Express router   // and app is the Express app created by Roosevelt    // standard Express route   router.route('/about').get((req, res) => {     // load a data model     const model = require('models/dataModel')()      // render a template and pass it the model     res.render('about', model)   }) }Sometimes it is also useful to separate controller logic from your routing. This can be done by creating a reusable controller module. Reusable controller modules differ from standard controller modules in that they are meant to be called from within other controllers and do not define routes.To create a reusable controller, put a file in your controllers directory that accepts app, req, and res arguments with logic that is meant to execute from within a predefined route.An example of when this might be needed would be having a reusable controller for \"404 Not Found\" pages:// notFound.js — reusable controller module.exports = (app, req, res) => {   const model = { content: 'Cannot find this page' }   res.status(404)   res.render('404', model) }You can then call the reusable controller in any other controller when needed:// someController.js module.exports = (router, app) => {   router.route('/whatever').get((req, res) => {     // test some logic that could fail     // thus triggering the need for the 404 controller     if (something) {       // logic didn't fail       // so render the page normally       let model = require('models/dataModel')       res.render('whatever', model)     }     else {       // logic failed       // so throw the 404 by executing your reusable controller       require('controllers/notFound')(app, req, res)     }   }) }Any controller file that has no arguments or more than two arguments will be considered a reusable controller.Making static pagesYou can also generate static files from templates and models as well.Templates for static pages go in your statics folder (staticsRoot) under the HTML source path (html.sourcePath), which is statics/pages by default.Data models for the templates will be merged from different possible locations to source them from in the following order of precedence:* model in htmlModels.File-level override in htmlModels.Model file.Setting static page modelsTo declare a global model in htmlModels, use the * character:// build.js (async () => {   await require('roosevelt')({     html: {       models: {         '*': {           hello: 'world!'         }       }     }   }).init() })()To declare a model for a specific file in htmlModels:// build.js (async () => {   await require('roosevelt')({     html: {       models: {         'index.html': {           hello: 'world!'         }       }     }   }).init() })()You can also declare a model for a specific page by placing a JS file with the same name alongside the template.For example if an index.js file exists next to index.html, the JS file will be used to set the model so long as it exports either an object or a function that returns an object."})
window.siteTexts.push({file: "docs/0.31.0/configuration/index.html", title: "configuration (0.31.0)", text: "App nameRoosevelt will determine your app's name by examining \"name\" in package.json. If none is provided, it will use Roosevelt Express instead.The rooseveltConfig APIRoosevelt is highly configurable and you can configure it from the following hierarchy of sources in increasing order of precedence:A rooseveltConfig section in your package.json.A roosevelt.config.json file.A rooseveltConfig.json file.Constructor parameters.Environment variables.Command line flags.What \"increasing order of precedence\" means is that command line flags will override environment variables, environment variables will override constructor parameters, constructor parameters will override config files, etc.File path optionsappDir [String]: Root directory of your application. Default: The directory where your app's package.json is located.buildFolder [String]: Where build artifacts will be placed such as the output from preprocessed views, preprocessed statics, the views bundler feature, or the controllers bundler feature. Default: \".build\".You should .gitignore this folder.Not all build artifacts will go into this folder. Some notable exceptions include:.npm-cache: Generated by npm.node_modules: Generated by npm.package-lock.json: Generated by npm.public: This is a separate folder for files generated by Roosevelt that should be exposed publicly as static files. The name of this folder is configurable with the publicFolder param.secrets: Directory that stores certs, keys, and secrets. The name of this folder is configurable with the secretsPath param.controllersPath [String]: Relative path on filesystem to where your controller files are located. Default: \"mvc/controllers\".errorPages [Object]: Relative path on filesystem to where your various error page controller files are located. If you do not supply them, Roosevelt will use its default ones instead:forbidden [String]: Your 403 Forbidden error page. Default: \"403.js\".notFound [String]: Your 404 Not Found error page. Default: \"404.js\".internalServerError [String]: Your 5xx Internal Server Error error page. Default: \"5xx.js\".serviceUnavailable [String]: Your 503 Service Unavailable error page. Default: \"503.js\".modelsPath [String]: Relative path on filesystem to where your model files are located. Default: \"mvc/models\".preprocessedStaticsPath [String]: Relative path on filesystem to where your preprocessed static files will be written to. Preprocessed static files are static files that have been preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled. This feature will only be active if minifyHtmlAttributes is enabled. Default: \".build/preprocessed_statics\".preprocessedViewsPath [String]: Relative path on filesystem to where your preprocessed view files will be written to. Preprocessed view files are view files that have had their uses of web components progressively enhanced using the progressively-enhance-web-components module. To disable this feature, set the value to false. Default: \".build/preprocessed_views\".publicFolder [String]: All files and folders in this directory will be exposed as static files in development mode or when hostPublic is enabled. You should .gitignore this folder. Default: \"public\".secretsPath [String]: Directory that stores certs, keys, and secrets. You should .gitignore this folder. Default: secrets.staticsRoot [String]: Relative path on filesystem to where your source static assets are located. By default this folder will not be made public, but is instead meant to store unprocessed or uncompressed source assets that will later be preprocessed and exposed in public. Default: \"statics\".viewsPath [String]: Relative path on filesystem to where your view files are located. Default: \"mvc/views\".Development mode optionsThese features are only available in development mode.frontendReload [Object]: Settings to use for the browser reload feature which automatically reloads your browser when your frontend code changes.Options:enable [Boolean]: Whether or not to enable this feature.exceptionRoutes [Array of Strings]: List of routes to exclude from this feature.expressBrowserReloadParams [Object]: Params to pass to express-browser-reload. This feature will only be active on pages with a <body> tag.Default: [Object]{   \"enable\": true,   \"exceptionRoutes\": [],   \"expressBrowserReloadParams\": {     \"skipDeletingConnections\": true   } }htmlValidator [Object]: Parameters to send to express-html-validator.enable [Boolean]: Enables or disables the built-in HTML validator.exceptions [Object]: A set of params that can be used to prevent validation in certain scenarios.header [String]: A custom header that when set will disable the validator on a per request basis.modelValue [String]: An entry in your data model passed along with a res.render that when set will disable validation on the rendered HTML.validatorConfig [Object]: html-validate configuration that determines what errors the validator looks for.The full list of available validator rules can be found here.This configuration can also be set by a .htmlValidate.json file placed in your app root directory.mode [String]: Decides whether your app starts in production mode or development mode by default. Default: production.Default: [Object]{   \"enable\": true,   \"exceptions\": {     \"requestHeader\": \"Partial\",     \"modelValue\": \"_disableValidator\"   },   \"validatorConfig\": {} }HTTP optionshttp [Object]: Parameters for configuring the HTTP server.enable [Boolean]: Enable HTTP server.port [Number]: The HTTP port your app will run on.Default when an app is created manually: [Object]{   \"enable\": true,   \"port\": 43763 }Default when an app is created with the app generator: [Object]{   \"enable\": false,   \"port\": 43763 }https [Object]: Parameters for configuring the HTTPS server.enable [Boolean]: Enable HTTPS server.port [Number]: The port your app will run the HTTPS server on.autoCert [Boolean]: Will create self-signed HTTPS certificates in development mode as long as they don't already exist.options [Object]: Configuration that gets passed directly to the HTTPS server instance. Accepts all native settings. For convenience, the ca, cert, key, and pfx params can take file path strings or arrays of file path strings relative to your secretsPath in addition to the native strings and buffers.Default when an app is created manually: [Object]{   \"enable\": false,   \"port\": 43711,   \"autoCert\": true,   \"options\": {} }Default when an app is created with the app generator: [Object]{   \"enable\": true,   \"port\": 43711,   \"autoCert\": true,   \"options\": {     \"cert\": \"cert.pem\",     \"key\": \"key.pem\"   } }App behavior optionsdeprecationChecks: [String] or [Boolean]: Whether or not to run the deprecation checker in Roosevelt. The deprecation checker is a script that runs when your app starts to determine if you have code targeting an older version of Roosevelt that needs to be refactored. Default: 'developmemnt-mode' which will run the checks in development mode only. Set to false to disable it entirely.expressVersion: [Number]: Which version of Express to use. Choose between either 4 or 5. This option exists because there are significant differences between Express 4 and Express 5. Default: 5.bodyParser [Object]: Parameters to supply to the body-parser module which handles POST requests.urlEncoded [Object]: Parameters to supply to body-parser.urlencoded.json [Object]: Parameters to supply to body-parser.json.Default: [Object]{   \"urlEncoded\": {     \"extended\": true   },   \"json\": {} }csrfProtection [Boolean or Object]: Whether to enable Cross-Site Request Forgery protection. Default: true.To disable the feature, set it to false. To exempt certain routes from protection, supply an object as your config with an array of exemptions.Example of exemptions list: [Object]{   \"exemptions\": [     \"/foo\",     \"/bar\",     \"/baz\"   ] }expressSession [Boolean or Object]: Parameters to pass to the express-session module. Default: true.Default if expressSession is set to true: [Object]{   \"secret\": [an auto-generated secret],   \"resave\": false, // usually a bad idea to set to true   \"saveUninitialized\": false, // usually a bad idea to set to true   \"cookie\": {     \"secure\": false, // will automatically be set to true if https is enabled     \"sameSite\": \"strict\", // adds same site enforcement     \"maxAge\": 347126472000 // sets expiration very far in the future (~11 years) to basically never expire   }   \"store\": [the expressSessionStore.instance Roosevelt param] }expressSessionStore [Object]: Define a custom session store to use with express-session instead of the default one provided by Roosevelt. This is recommended if you plan to shard your app across multiple separate processes or scale it to multiple servers.filename [String]: Name of the session file.instance: [Object] A store instance. See this list for compatible stores.preset [String]: Available presets provided by Roosevelt. Only used if instance is not provided.Available options:\"default\": Use Roosevelt's default session store, which is better-sqlite3-session-store.\"express-session-default\": Use express-session's default session store (not recommended).presetOptions [Object]: Options to pass to the preset session store if one is selected. Only used if instance is not provided.checkPeriod [Number]: How long, in milliseconds, the memory store will check for expired items.ttl [Number]: How long, in milliseconds, before a session is expired. If not set, it will default to the value of checkPeriod.max [Number]: The maximum size of the cache, checked by applying the length function to all values in the cache. If not set, there will be no maximum.Either instance or preset must be set for this param to work properly.Default: [Object]{   \"filename\": \"sessions.sqlite\",   \"instance\": null,   \"preset\": \"default\",   \"presetOptions\": {     \"checkPeriod\": 86400000, // one day     \"ttl\": null,     \"max\": null   } }formidable: Parameters to pass to formidable using formidable's API for multipart form processing (file uploads). Access files uploaded in your controllers by examining the req.files object. Roosevelt will remove any files uploaded to the upload directory when the request ends automatically. To keep any, be sure to move them before the request ends.Default: [Object]{   \"multiples\": true // enables multiple files to be uploaded simultaneously }To disable multipart forms entirely, set formidable to false.helmet [Object]: Parameters to pass to the helmet module. This module helps secure Express apps by setting HTTP response headers.The default options are specified in the helmet docs, with the following exceptions that Roosevelt makes to the default Content-Security-Policy settings:The upgrade-insecure-requests directive has been removed. This change prevents this bug.The script-src directive has been set to \"unsafe-inline\". This makes it possible to use inline scripts.The form-action directive has been set to null. This makes it possible to submit forms to other domains.You can reverse any of these changes by configuring helmet yourself.To disable helmet entirely, set the param to false.logging: Parameters to pass to roosevelt-logger. See roosevelt-logger parameters documentation for configuration options.Default: [Object]{   \"methods\": {     \"http\": true,     \"info\": true,     \"warn\": true,     \"error\": true,     \"verbose\": false   } }makeBuildArtifacts [Boolean or String]: When enabled Roosevelt will generate user-specified directories, CSS/JS bundles, etc.Defaults to false for apps created manually.Will be set to true in apps generated with the app generator.Can also accept a value of \"staticsOnly\" which will allow Roosevelt to create static files but skip the creation of the MVC directories.routePrefix [String]: A prefix prepended to your application's routes. Applies to all routes and static files. Default: null.Example: When set to \"foo\" a route bound to / will be instead be bound to /foo/.This prefix is exposed via the routePrefix Express variable which should be used for resolving the absolute paths to statics programmatically.Example: An image located at /images/teddy.jpg can be resolved in a prefix-agnostic way via ${app.get('routePrefix')/images/teddy.jpg}.viewEngine [String]: What templating engine to use, formatted as \"fileExtension: nodeModule\".Defaults to \"none\" for apps created manually.Will be set to \"html: teddy\" in apps generated with the app generator.Also by default when using the app generator, the teddy module is marked as a dependency in package.json.To use multiple templating systems, supply an array of engines to use in the same string format. Each engine you use must also be marked as a dependency in your app's package.json. Whichever engine you supply first with this parameter will be considered the default.Example configuration using multiple templating systems: [Object]{   \"viewEngine\": [     \"html: teddy\",     \"php: php\",     \"ejs: ejs\"   ] }Isomorphic (single page app) optionsclientControllers [Object]: Allows you to expose controller (route) file code to frontend JS for client-side routing.enable [Boolean]: Whether or not to bundle controller files.exposeAll [Boolean]: Option to expose all templates.blocklist [Array of Strings]: List of files or folders to exclude when exposeAll is enabled.Can also be set declaratively by putting a // roosevelt-blocklist comment at the top of any controller file.allowlist [Object of Arrays]: List of JS files to create mapped to which controller files to expose.Example: { \"mainPages.js\": [\"index.js\", \"about.js\"] }Can also be set declaratively by putting a // roosevelt-allowlist file_path comment at the top of any controller file.defaultBundle [String]: File name for the default JS controller bundle.output [String]: Subdirectory within buildFolder to write JS controller bundles to.Default: [Object]\"clientControllers\": {   \"enable\": false,   \"exposeAll\": false,   \"blocklist\": [],   \"allowlist\": {},   \"defaultBundle\": \"controllers.js\",   \"output\": \"js\" }clientViews [Object]: Allows you to expose view (template) file code to frontend JS for client-side templating.enable [Boolean]: Whether or not to bundle view files.exposeAll [Boolean]: Option to expose all templates.blocklist [Array of Strings]: List of files or folders to exclude when exposeAll is enabled.Can also be set declaratively by putting a <!-- roosevelt-blocklist --> tag at the top of any template.allowlist [Object of Arrays]: List of JS files to create mapped to which view files to expose.Example: { \"mainPages.js\": [\"baseLayout.html\", \"footer.html\"] }Can also be set declaratively by putting a <!-- roosevelt-allowlist file_path --> tag at the top of any template.defaultBundle [String]: File name for the default JS view bundle.output [String]: Subdirectory within buildFolder to write JS view bundles to.minify [Boolean]: Option to minify templates that are exposed via this feature.Be careful with this feature because it can break your templates depending on which templating system you use, and as such it is off by default. You may need to make liberal use of the minifyOptions param to make it work right with your templating system.minifyOptions [Object]: Parameters to supply to html-minifier's API.Uses the params you set in html.minifier.options if empty.Default: [Object]\"clientViews\": {   \"enable\": false,   \"exposeAll\": false,   \"blocklist\": [],   \"allowlist\": {},   \"defaultBundle\": \"views.js\",   \"output\": \"js\",   \"minify\": false,   \"minifyOptions\": {} }Static file optionscopy [Array of Objects]: Declare one or more files or folders to copy at runtime. Default: [].source [String]: Path to be copied from.Roosevelt will not attempt to copy files or folders that do not exist.dest [String]: Path to place the copy.If this destination path already exists it will be overwritten.html [Object]: Generate static HTML pages:sourcePath [String]: Subdirectory within staticsRoot where your static HTML files are located. By default this folder will not be made public, but is instead meant to store unminified / unprocessed HTML template source files which will be rendered by your templating system, minified, and written to the public folder when the app is started.allowlist: [Array of Strings] List of templates to render, minify, and write to the public folder when the app is started. If the list is empty, all templates in your sourcePath will be sourced. Supports wildcard matching, e.g. dir/*.blocklist: [Array of Strings] List of templates in your sourcePath to skip. Supports wildcard matching, e.g. dir/*.You can also block a file from being exposed by adding a comment on the first line of the file with the string roosevelt-blocklist anywhere on the line.models [Object]: Data to pass to templates by file path / file name.Example: { \"index.html\": { \"some\": \"data\" } }You can also pass a global model using a * catch-all character: { \"*\": { \"some\": \"data\" } }If this data is not supplied by configuration, Roosevelt will try to automatically load a model from a JS file with the same name alongside the template if it exists instead. For example if an index.js file exists next to index.html and the model is not defined by configuration like in the example above, then the index.js file will be used to set the model so long as it exports either an object or a function that returns an object.output [String]: Subdirectory within publicFolder where parsed and minified HTML files will be written to.folderPerPage [Boolean or String]: Make a folder for each page and place the page within it.Example values:true: Given a page called example.html, this feature will create a folder called \"example\" in the public folder and place \"example.html\" within it.\"index.html\": Given a page called example.html, this feature will create a folder called \"example\" in the public folder and place \"index.html\" within it. This is useful for creating \"pretty URLs\" with static sites.false: Disables the feature.minifier [Object]: How you want Roosevelt to minify your HTML:enable [Boolean]: Whether or not to minify HTML.Can also be disabled by the minify param.Minification is automatically disabled in development mode.exceptionRoutes [Array of Strings]: List of controller routes that will skip minification entirely. Set to false to minify all URLs.options [Object]: Parameters to supply to html-minifier's API.Default: [Object]{   \"sourcePath\": \"pages\",   \"allowlist\": null,   \"blocklist\": null,   \"models\": {},   \"output\": \"\",   \"folderPerPage\": false,   \"minifier\": {     \"enable\": true,     \"exceptionRoutes\": false,     \"options\": {       \"removeComments\": true,       \"collapseWhitespace\": true,       \"collapseBooleanAttributes\": true,       \"removeAttributeQuotes\": true,       \"removeEmptyAttributes\": true     }   } }css [Object]: How you want Roosevelt to configure your CSS preprocessor:sourcePath [String]: Subdirectory within staticsRoot where your CSS files are located. By default this folder will not be made public, but is instead meant to store unminified CSS source files which will be minified and written to the public folder when the app is started.compiler [Object]: Which CSS preprocessor (if any) to use.enable [Boolean]: Whether or not to use a preprocessor.module [String]: Node module name of the CSS preprocessor you wish to use.Currently less, sass, and stylus are supported.Your chosen CSS preprocessor module must also be marked as a dependency in your app's package.json.options [Object]: Parameters to send to the CSS preprocessor if it accepts any.minifier [Object]: Params pertaining to CSS minifcation.enable [Boolean]: Whether or not to minify CSS. Can also be disabled by the minify param.options [Object]: Parameters to pass to the CSS minifier clean-css, a list of which can be found in the clean-css docs.allowlist [Array of Strings]: List of CSS files to allow for compiling. Leave undefined to compile all files. Supply a : character after each file name to delimit an alternate file path and/or file name for the minified file.Example array member: \"example.less:example.min.css\" compiles example.less into example.min.css.output [String]: Subdirectory within publicFolder where compiled CSS files will be written to.versionFile [Object]: If enabled, Roosevelt will create a CSS file which declares a CSS variable containing your app's version number from package.json. Enable this option by supplying an object with the member variables fileName and varName. Versioning your static files is useful for resetting your users' browser cache when you release a new version of your app.Example usage (with SASS): { \"fileName\": \"_version.scss\", \"varName\": \"appVersion\" }Assuming the default Roosevelt configuration otherwise, this will result in a file statics/css/_version.scss with the following content: /* do not edit; generated automatically by Roosevelt */ $appVersion: '0.1.0';Some things to note:If there is already a file there with that name, this will overwrite it, so be careful!It's generally a good idea to add this file to .gitignore, since it is a build artifact.Default: [Object]{   \"sourcePath\": \"css\",   \"compiler\": {     \"enable\" : false,     \"module\": \"less\",     \"options\": {}   },   \"minifier\": {     \"enable\": true,     \"options\": {}   },   \"allowlist\": null,   \"output\": \"css\",   \"versionFile\": null }cssCompiler [Function]: Use this param to supply a custom CSS preprocessor function.To do so, supply a function which accepts argument app, which is a reference to the Express app created by Roosevelt.The function should return an object with the following members:versionCode(app) [Function]: Function to return the version of your app. This is needed to support the versionFile feature of Roosevelt's CSS preprocessor API.app [Object]: The Express app created by Roosevelt.parse(app, fileName) [Function]: Function to preprocess CSS.app [Object]: The Express app created by Roosevelt.filePath [String]: The path to the file being preprocessed.When a custom preprocessor is defined in this way it will override the selected preprocessor specified in css.compiler.module.This param can only set via Roosevelt's constructor, like this:(async () => {   await require('roosevelt')({     cssCompiler: app => {       return {         versionCode: app => {           // write code to return the version of your app here           // generally you should return a css variable with your app version         },         parse: (app, filePath) => {           // write code to preprocess CSS here           return {             css: 'write code to output css here',             sourceMap: 'write code to output source map here (optional)           }         }       }     }   }).startServer() })()favicon [String]: Location of your favicon file. Default: \"none\".Will be set to \"images/favicon.ico\" in apps generated with the app generator.js [Object]: How you want Roosevelt to handle module bundling and minifying your frontend JS:sourcePath [String]: Subdirectory within staticsRoot where your JS files are located. By default this folder will not be made public, but is instead meant to store unminified JS source files which will be minified and written to the public folder when the app is started.[bundler name] [String]: Parameters related to bundling JS the specified bundler module:Values you can supply to [bundler name]:webpack: See Webpack site for more details about Webpack configuration.customBundler: Allows you to define your own custom bundler.Params you can pass to your chosen bundler:enable [Boolean]: Enable the bundler.bundles: [Array of Objects] Declare one or more JavaScript bundle files.env: [String] Bundle only in development or production mode.Accepted values:\"development\": Development mode.\"production\": Production mode.If no value is set, it will bundle in both modes.config: [Object or String] The config to send to the module bundler. Can also be a path to a config file relative to the app directory.customBundlerFunction: [Function] A custom async function to execute for this bundler instead of executing the default one supplied by Roosevelt. This param is required if your bundler is set to customBundler.Arguments provided:bundle: The bundle object supplied by Roosevelt.config: The config object after it has been postprocessed by Roosevelt.app: The Roosevelt app.verbose [String]: Enable verbose error handling.Accepted values:true: Will print verbose logs to the console.\"file\": Will print verbose logs to the console and write them to a file for debugging.Default when an app is created manually: [Object]{   \"sourcePath\": \"js\",   \"webpack\": {     \"enable\": false,     \"bundles\": [],     \"customBundlerFunction\": null   },   \"customBundler\": {     \"enable\": false,     \"bundles\": [],     \"customBundlerFunction\": null   },   \"verbose\": false }Default when an app is created with the app generator: [Object]{   \"sourcePath\": \"js\",   \"webpack\": {     \"enable\": true,     \"bundles\": [       {         \"config\": {           \"entry\": \"${js.sourcePath}/main.js\",           \"devtool\": \"source-map\",           \"output\": {             \"path\": \"${publicFolder}/js\"           },           \"resolve\": {             \"alias\": {               \"fs\": false,               \"path\": false             },             \"modules\": [\"${js.sourcePath}\", \"${publicFolder}/js\", \"${appDir}\", \"node_modules\"]           }         }       }     ],     \"customBundlerFunction\": null   },   \"customBundler\": {     \"enable\": false,     \"bundles\": [],     \"customBundlerFunction\": null   },   \"verbose\": false }If you're using webpack, Roosevelt will also postprocess your webpack config to do the following things:If your config does not set mode, then Roosevelt will set mode to development if Roosevelt is in development mode.If your config does not set devtool, then Roosevelt will set devtool to source-map if Roosevelt is in development mode.If Roosevelt's prodSourceMaps feature is enabled, then Roosevelt will set devtool to source-map if Roosevelt is in production mode.If your config does not set optimization, then Roosevelt will set optimization to the following:optimization = {   minimize: true,   minimizer: [     new TerserPlugin({       extractComments: false // disable LICENSE.txt file generation     })   ] }minify [Boolean]: Enables HTML and CSS minification. This feature is automatically disabled during development mode. Minification for JS files is handled by the js params above. Default: true.minifyHtmlAttributes [Object]: Settings to pass to minify-html-attributes.enable [Boolean or String]: Whether or not to enable minify-html-attributes.Available options:\"production\": Enable only in production mode.\"development\": Enable in all modes.true: Will be taken to mean \"production\".minifyHtmlAttributesParams: Params to pass to minify-html-attributes.Note: Roosevelt will always override 3 params from minify-html-attributes:htmlDir will always be set to Roosevelt's preprocessedViewsPath.cssDir will always be set to Roosevelt's preprocessedStaticsPath.jsDir will always be set to Roosevelt's preprocessedStaticsPath.Default: [Object]{   \"enable\": false,   \"minifyHtmlAttributesParams\": {} }prodSourceMaps [Boolean]: Enables source maps for minified CSS and JS files in production mode. Default: false.symlinks [Array of Objects]: Declare one or more symlinks to be generated at runtime. Default: [].source [String]: Path to be linked to.Roosevelt will not attempt to generate a symlink to a source path that does not exist.dest [String]: Path to place symlink.If this destination path already exists it will not be overwritten.Will be set to the following in apps generated with the app generator:[   {     \"source\": \"${staticsRoot}/images\",     \"dest\": \"${publicFolder}/images\"   } ]versionedPublic [Boolean]: If set to true, Roosevelt will prepend your app's version number from package.json to your public folder. Versioning your public folder is useful for resetting your users' browser cache when you release a new version. Default: false.Deployment optionshostPublic [Boolean]: Whether or not to allow Roosevelt to host the public folder. By default in production-proxy mode Roosevelt will not expose the public folder. It's recommended instead that you host the public folder through another web server, such as Apache or nginx that is better optimized for hosting static files. Default: false.localhostOnly [Boolean]: Listen only to requests coming from localhost in production mode. This is useful in environments where it is expected that HTTP requests to your app will be proxied through a more traditional web server like Apache or nginx. This setting is ignored in development mode. Default: true.shutdownTimeout [Number]: Maximum amount of time in milliseconds given to Roosevelt to gracefully shut itself down when sent the kill signal. Default: 30000 (30 seconds).Template literals in rooseveltConfig valuesAll config values support template literal style variable syntax that you can use to refer to other Roosevelt parameters. For example:{   \"css\": {     \"sourcePath\": \"css\",     \"output\": \".build/${css.sourcePath}\"   } }Resolves to:{   \"css\": {     \"sourcePath\": \"css\",     \"output\": \".build/css\"   } }EventsRoosevelt provides a series of events you can attach code to by passing a function to the desired event as a parameter to Roosevelt's constructor like so:(async () => {   await require('roosevelt')({     onServerStart: (app) => { /* do something */ }   }).startServer() })()Event listThese are sorted in order of when they are executed during the lifecycle of a Roosevelt app.onBeforeMiddleware(app): Fired when the app begins initializing, prior to any middleware being loaded into the app.app: The Express app created by Roosevelt.onBeforeControllers(app): Fired during initialization, prior to any routes being loaded.app: The Express app created by Roosevelt.onBeforeStatics(app): Fired during initialization, prior to any statics being written.app: The Express app created by Roosevelt.onClientViewsProcess(template): Fired to preprocess templates before being exposed to the client.template: A string containing a template written in any JS-based templating engine (e.g. Teddy, Pug, ejs, etc).onServerInit(app): Fired when the server is fully initialized and all middleware has been loaded but before the server has started.app: The Express app created by Roosevelt.onServerStart(app): Fired when the server starts.app: The Express app created by Roosevelt.onAppExit(app): Fired when the app recieves a kill signal.app: The Express app created by Roosevelt.Express variables exposed by RooseveltRoosevelt supplies several variables to Express that you may find handy. Access them using app.get('variableName').appDir: The directory the main module is in.appName: The name of your app derived from package.json. Uses \"Roosevelt Express\" if no name is supplied.appVersion: The version number of your app derived from package.json.controllersPath: Full path on the file system to where your app's controllers folder is located.clientControllersBundledOutput: Full path on the file system to where your app's client-exposed controllers folder is located.clientViewsBundledOutput: Full path on the file system to where your app's client-exposed views folder is located.cssCompiledOutput: Full path on the file system to where your app's minified CSS files are located.cssPath: Full path on the file system to where your app's CSS source files are located.debugMarkup: HTML you can add to your custom error pages if you define any that will print server errors if any exist, display the route list, and add some inline JavaScript that will serialize the request's err, req, and res objects so you can interactively examine them in the browser's developer tools. Only available in development mode.env: Either development or production.express: The Express module.expressSession: The express-session module Roosevelt uses internally. Session middleware.expressSessionStore: The session store instance used by express-session module Roosevelt uses internally.htmlPath: Full path on the file system to where your app's HTML static page source files are located.htmlRenderedOutput: Full path on the file system to where your app's rendered and minified static HTML files are located.httpServer: The http server created by Roosevelt.httpsServer: The https server created by Roosevelt.jsPath: Full path on the file system to where your app's JS source files are located.logger: The roosevelt-logger module Roosevelt uses internally. Used for console logging.modelsPath: Full path on the file system to where your app's models folder is located.package: The contents of package.json.params: The parameters you sent to Roosevelt.preprocessedStaticsPath or preprocessedStatics: Full path on the file system to where your app's preprocessed statics folder is located.preprocessedViewsPath or preprocessedViews: Full path on the file system to where your app's preprocessed views folder is located.publicFolder: Full path on the file system to where your app's public folder is located.roosevelt:state: Application state, e.g. disconnecting if the app is currently being shut down.router: Instance of router module used by Roosevelt.routePrefix: Prefix appended to routes via the routePrefix param. Will be '' if not set.routes: List of all routes in the app.staticsRoot: Full path on the file system to where your app's statics folder is located.view engine: Default view engine file extension, e.g. .html.viewEngine e.g. teddy by default: Any view engine(s) you define will be exposed as an Express variable. For instance, the default view engine is teddy. So by default app.get('teddy') will return the teddy module.viewsPath or views: Full path on the file system to where your app's views folder is located.Additionally the Roosevelt constructor returns the following object:expressApp [Object]: The Express app created by Roosevelt.initServer(callback) or init(callback) [async Function]: Starts the HTML validator, sets up some middleware, runs the CSS and JS preprocessors, and maps routes, but does not start the HTTP server. Call this method manually first instead of startServer if you need to setup the Express app, but still need to do additional setup before the HTTP server is started. This method is automatically called by startServer once per instance if it has not yet already been called. Takes an optional callback.startServer() or start() [async Function]: Calls the listen method of http, https, or both (depending on your configuration) to start the web server with Roosevelt's config.stopServer(params) or stop(params) [Function]: Stops the server from accepting new connections before exiting and takes an optional argument stopServer({ persistProcess: true }) which will allow the process to remain active after the server has closed.Recognized environment variablesThe following is a list of environment variables that Roosevelt listens for.NODE_ENV:Set to production to force the app into production mode.Set to development to force the app into development mode.NODE_PORT: Default HTTPS port to run your app on.Will set HTTP port instead if HTTPS is disabled.HTTP_PORT: Default HTTP port to run your app on. Takes precedence over NODE_PORT.HTTPS_PORT: Default HTTPS port to run your app on.DISABLE_HTTPS: When set to true, the HTTPS server will be disabled and the app will revert to HTTP regardless of what is set in the rooseveltConfig.MAKE_BUILD_ARTIFACTS: Lets you set Roosevelt's makeBuildArtifacts param via environment variable.Environment variable precedence:Environment variables supersede your app's rooseveltConfig.Environment variables can be overridden with command line arguments.Command line usageAvailable npm scriptsRoosevelt apps created with the app generator come with the following notable npm scripts prepopulated in package.json:npm run production: Runs the app in production mode.Default shorthands:npm run prodnpm run pnpm startScript is short for: nodemon app.js --production-modenpm run development: Runs the app in development mode.Default shorthands:npm run devnpm run dScript is short for: nodemon app.js --development-modenpm run production-proxy: Runs the app in production mode, but with localhostOnly set to true and hostPublic set to false. This mode will make it so your app only listens to requests coming from localhost and does not serve anything in the public folder. This mode is useful when you want to host your app behind a reverse proxy from a web server like Apache or nginx and is considered a best practice for Node.js deployments.Default shorthands:npm run prodproxynpm run xScript is short for: nodemon app.js --production-proxy-modenpm run generate-certs: Generates self-signed HTTPS certs for your app.Script is short for: node ./node_modules/roosevelt/lib/scripts/certsGenerator.jsSupports command line flags --appDir somewhere --secretsPath somewhere to override those default locations.npm run generate-session-secret: Generates a secret key for the express-session module.Script is short for: node ./node_modules/roosevelt/lib/scripts/sessionSecretGenerator.jsSupports command line flags --appDir somewhere --secretsPath somewhere to override those default locations.npm run generate-secrets: Runs the above three scripts.Supports command line flags --appDir somewhere --secretsPath somewhere to override those default locations.Available command line argumentsnode app.js --production-mode: Runs the app in production mode.Default shorthands:--prod-pnode app.js --development-mode: Runs the app in development mode.Default shorthands:--dev-dnode app.js --build: Only runs the build scripts and doesn't start the app.Default shorthands:-bnode app.js --jsbundler=verbose: Prints verbose errors from the JS bundler to the console.Default shorthands:--jsb=verbose-j=verbosenode app.js --jsbundler=verbose-file: Prints verbose errors from the JS bundler to the console as well as write a jsBundlerError.txt file to the app's root directory containing the full error.Default shorthands:--jsb=verbose-file-j=verbose-filenode app.js --production-proxy-mode: Runs the app in production mode, but with localhostOnly set to true and hostPublic set to false. This mode will make it so your app only listens to requests coming from localhost and does not serve anything in the public folder. This mode is useful when you want to host your app behind a reverse proxy from a web server like Apache or nginx and is considered a best practice for Node.js deployments.Default shorthands:--prodproxy-xnode app.js --enable-validator: Forces the HTML validator to be enabled.Default shorthands:--html-validator-hnode app.js --disable-validator: Forces the HTML validator to be disabled.Default shorthands:--raw-rCombining npm scripts and command line argumentsThe npm scripts can be combined with the command line flags.For example, running npm run dev -- --disable-validator will run your app in development mode and force the HTML validator to be disabled."})
window.siteTexts.push({file: "docs/0.31.0/deployment/index.html", title: "deployment (0.31.0)", text: "If you want to deploy a Roosevelt multi-page app or single-page app live to the internet, there are some things you should do to harden it appropriately if you expect to take significant traffic.Run the app behind a reverse proxy and use all the CPU coresTo do this, use the production-proxy-mode command line flag and run the process on multiple cores using a tool like pm2.Then host your app behind a reverse proxy from a web server like Apache or nginx, which is considered a best practice for Node.js deployments.Running the app in production-proxy mode runs the app in production mode, but with localhostOnly set to true and hostPublic set to false. This mode will make it so your app only responds to requests coming from the proxy server and does not serve anything in the public folder. You will then need to serve the contents of the public folder directly via Apache or nginx.Use HTTPSSetting up HTTPS can be tricky to configure properly especially for novices, so it can be tempting not do it to simplify deployment, but your website won't be seen as professional if it isn't served up via HTTPS. It's worth the effort to set it up.Use a caching service or a database to store sessionsRoosevelt's default session store for express-session works great if your app only needs a single process, but if you're spreading your app across multiple processes or servers, you will need to reconfigure express-session to use a caching service that supports replication like redis or a database that supports replication like PostgreSQL in order to scale your app.Use Roosevelt's static site generator instead if you canNot all sites need to execute logic dynamically on the backend. If you can get away with making a site using a static site generator, then that will dramatically simplify deployment. rooseveltframework.org is itself a static site generated with Roosevelt's static site generator, and you can view its source code here."})
window.siteTexts.push({file: "docs/0.31.0/get-started/index.html", title: "get started (0.31.0)", text: "🧸 roosevelt PrerequisitesFirst you will need to install Node.js. Both the current and LTS version of Node.js are supported. It is recommended that you have both the current and LTS versions of Node.js installed on your system. To do that, it is recommended that you install Node.js using a Node.js version manager like nvm or nvm-windows rather than the official installer, as a version manager will allow you to switch between multiple versions of Node.js easily.Make a Roosevelt app🏭🧸 mkroosevelt The simplest way to make a Roosevelt app is to simply run the following command:npx mkrooseveltThen follow the prompts to decide whether to make a multi-page app, static site generator, or a single page app.Other ways to make Roosevelt apps🏭🧸 generator-roosevelt What the mkroosevelt command does under the hood is call the Roosevelt app generator, a command line script based on Yeoman, to create a sample Roosevelt app for you. You could also install the app generator to your system if you like. To do that, first globally install Yeoman and the Yeoman-based Roosevelt app generator:npm i -g yo generator-rooseveltThen create a Roosevelt app using the Roosevelt app generator:yo rooseveltThen follow the prompts.Create a Roosevelt app manuallyIt is also possible to create a Roosevelt app without using the app generator. This will result in a more minimalist default configuration (e.g. no CSS or JS preprocessors enabled by default).To do that:First create a new folder and cd into it.Then npm i roosevelt. This will create a node_modules folder with Roosevelt and its bare minimum dependencies.Create a file named app.js.Put this code in app.js:(async () => {   await require('roosevelt')({     makeBuildArtifacts: true   }).startServer() })()Then node app.js. If the makeBuildArtifacts parameter is set to true like the above code example, an entire Roosevelt app with bare minimum viability will be created and the server will be started.Default directory structureBelow is the default directory structure for an app created using the Roosevelt app generator.Application logicapp.js or build.js: Entry point to your application. Feel free to rename this, but make sure to update package.json's references to it. It defaults to app.js when building a multi-page app or a single page app. It defaults to build.js when building a static site generator.lib: A folder for any includable JS files that don't belong in any of the other directories. It has been added to the require stack so you can simply require('lib/someFile').mvc: Folder for models, views, and controllers.controllers: Folder for controller files; the \"C\" in MVC. This is where your HTTP routes will go.models: Folder for model files; the \"M\" in MVC. This is where you will get data to display in your views e.g. by querying a database or do other business logic.views: Folder for view files; the \"V\" in MVC. This is where your HTML templates will go.Static filesstatics: Folder for source CSS, image, JS, and other static files. By default some of the contents of this folder are symlinked to the public folder, which you can configure via params.css: Folder for source CSS files.images: Folder for source image files.js: Folder for source frontend JS files.pages: Folder for HTML templates that get rendered as static pages and deposited into the public folder.Build artifacts.build: Folder for build artifacts.preprocessed_statics: Static files that have been preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled.preprocessed_views: View files that have had their uses of web components progressively enhanced using the progressively-enhance-web-components module and/or preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled.The output JS files from the clientControllers or clientViews features.public: All contents within this folder will be exposed as static files. For the most part, the contents of this folder will be populated from the statics folder. This folder is added to .gitignore by default because it is considered a build artifact.Application infrastructure.gitignore: A standard file which contains a list of files and folders to ignore if your project is in a git repo. Delete it if you're not using git. The default .gitignore file contains many common important things to ignore, however you may need to tweak it to your liking before committing a fresh Roosevelt app to your git repo.node_modules: A standard folder created by Node.js where all modules your app depends on (such as Roosevelt) are installed to. This folder is created when installing dependencies using the npm i command. It is added to .gitignore by default because it is considered a build artifact.package.json: A file common to most Node.js apps for configuring your app.package-lock.json: An auto-generated file common to most Node.js apps containing a map of your dependency tree. This is created after you run npm i for the first time. Once the file exists within your project, you can run npm ci instead of npm i when installing dependencies, which will be more performant and will result in reproducible builds that always have the same versions of every dependency, including downstream dependencies.rooseveltConfig.json: Where your Roosevelt config is stored and what your params are set to. These values can be overridden when calling Roosevelt's constructor.secrets: A folder for \"secret\" files, e.g. session keys, HTTPS certs, passwords, etc. It is added to .gitignore by default because it contains sensitive information, so it should not be committed to git."})
window.siteTexts.push({file: "docs/0.31.1/changelog/index.html", title: "changelog (0.31.1)", text: "0.31.1Changed expressSession default to true so that csrfProtection's default being true will actually function.Updated dependencies.0.31.0Breaking: npm run generate-csrf-secret script removed, as it is no longer necessary due to an internal switch of Roosevelt's CSRF dependency from csrf-csrf to csrf-sync. You should delete any csrfSecret.json files in your secrets directory after upgrading Roosevelt, as the file is no longer needed. You should also remove the npm run generate-csrf-secret from your package.json.Added expressVersion param which lets you decide which version of Express to use. Choose between either 4 or 5. This option exists because there are significant differences between Express 4 and Express 5. Default: 5.Added glob pattern support to CSRF route exemption param.Removed enableCLIFlags param which has been obsolete for some time and didn't actually do anything.Changed the deprecation checker to only run in development mode and added a new param deprecationChecks that will let you disable it entirely.Updated dependencies.0.30.7Added new onBeforeControllers event.Added new html.folderPerPage param.Made it easier to debug HTML validation errors on static sites.Fixed bugs associated with the stopServer() method.Fixed bugs associated with using a roosevelt.config.json file in your app.Fixed a bug that could cause middleware errors not to flow through the middleware stack correctly.Copyedited documentation significantly.Updated dependencies.0.30.6Added onBeforeStatics event.Altered makeBuildArtifacts log to be a warning.Fixed writing JS file log to be properly classified as info instead of log.Fixed a bug that could cause the static site generator to not write new files even if the file has changed.Updated dependencies.0.30.5Added error handling for if you supply Roosevelt constructor params to initServer or startServer.Fixed bugs that could cause initServer, startServer, and stopServer to not be properly awaitable.Fixed bug that would cause undefined to print on error pages in Roosevelt apps without a package.json version defined.Updated dependencies.0.30.4Fixed bugs that prevented CSS source maps from working correctly.Updated dependencies.0.30.3Fixed model overriding precedent in static site generator.0.30.2Fixed a crash associated with the default catch-all route.0.30.1Fixed a bug that caused two catch-all routes to appear in the router stack.Updated dependencies.0.30.0Breaking: Upgraded to Express 5.x.To migrate:Most Roosevelt apps probably only need to change * routes to *all.Apps that use more complex routing may need other changes.Full list of considerations for migrating to Express 5: https://expressjs.com/en/guide/migrating-5.htmlAdded expressSessionStore Express variable, which is the session store instance used by express-session module Roosevelt uses internally.Added support for catch-all * in static site generator model definitions.Updated dependencies.0.29.5Added new copy param that will copy files from a source location to a destination location.Added new feature to integrated webpack bundler to disable LICENSE.txt generation by default. This can be overridden by supplying your own optimization param to your webpack config.Improved docs.Updated dependencies.0.29.4Added first-line comment blocklist support to the static site generator.Added static site generator folder to the require module path.Added async/await support for static site models.Updated dependencies.0.29.3Fixed a bug that could cause some routes not to load.Fixed a bug that could cause more than one * route to end up in the router stack.Updated dependencies.0.29.2Fixed a bug that would cause MAKE_BUILD_ARTIFACTS to supersede the --build CLI flag.Fixed a bug that would cause an error to falsely print about not being able to create symlinks.Updated dependencies.0.29.1Fixed bugs associated with MAKE_BUILD_ARTIFACTS sometimes not working properly.Updated dependencies.0.29.0Breaking: Moved default output location for clientControllers and clientViews to the .build folder.To migrate your app, you will likely need to change js.webpack.bundles.config.resolve.modules to replace any entry that has \"${publicFolder}/js\" with \"${buildFolder}/js\".Breaking: Changed default of preprocessedViewsPath param from \".build/.preprocessed_views\" to \".build/preprocessed_views\" and changed default of preprocessedStaticsPath param from \".build/.preprocessed_statics\" to \".build/preprocessed_statics\".Added buildFolder param to customize the name of the .build folder.Altered output of controllersBundler and viewsBundler feature to produce files that are easier to read.Updated dependencies.0.28.1Fixed a bug where HTTPS certs wouldn't always automatically generate when they should.Updated various dependencies.0.28.0Breaking: Removed config auditor feature.Added more checks to the deprecation checker.Updated dependencies.0.27.0Breaking: Changed http/s param structure:Changed port param to http.port and changed the default to 43763.Changed https.port param default to 43711.Removed https.force param. Non-secure http can now be disabled via http.enable being set to false.Removed authInfoPath, passphrase, caCert, requestCert, and rejectUnauthorized params. Replaced them with options where you can pass any native option.The ca, cert, key, and pfx params can take file paths relative to your secretsDir in addition to everything else natively supported (strings, buffers, and arrays of strings or buffers).The file paths get resolved within arrays if you pass arrays to any of those as well.These collective changes mean most Roosevelt apps will need to alter their Roosevelt configs from something that looks like:\"port\": 19679, \"https\": {   \"enable\": true,   \"port\": 19679,   \"force\": true,   \"authInfoPath\": {     \"authCertAndKey\": {       \"cert\": \"cert.pem\",       \"key\": \"key.pem\"     }   } },To be something like this instead:\"http\": {   \"enable\": false }, \"https\": {   \"enable\": true,   \"port\": 19679,   \"options\": {     \"cert\": \"cert.pem\",     \"key\": \"key.pem\"   } },Breaking: Changed behavior of NODE_PORT environment variable to now set https port when https is enabled and fall back to http if https is disabled.Breaking: Moved the versioning of webpack from Roosevelt itself to the app. You will need to declare webpack as a dependency in your app if you intend to use the JS bundler feature in Roosevelt.Breaking: Changed js.webpack.bundles.env param to require values development or production instead of dev or prod.Breaking: Changed js.webpack.bundles.verbose param to js.verbose.Breaking: Changed --webpack, --wp, and --w CLI flags to --jsbundler, --jsb, and --j respectively.Breaking: Changed default of preprocessedViewsPath param from 'mvc/.preprocessed_views' to '.build/.preprocessed_views' and changed default of preprocessedStaticsPath param from '.preprocessed_statics' to '.build/.preprocessed_statics'. Collectively these changes mean most Roosevelt apps should remove .preprocessed_views and .preprocessed_statics from .gitignore and add .build instead.Added new param js.customBundler that will let you define a custom JS bundler.Added new param js[bundler].customBundlerFunction that will let you define custom behavior for default supported JS bundlers like Webpack.Updated dependencies.0.26.1Added new Express variable debugMarkup that contains HTML you can add to your custom error pages if you define any that will print server errors if any exist, display the route list, add some inline JavaScript that will serialize the request's err, req, and res objects so you can interactively examine them in the browser's developer tools. Only available in development mode.Added the aforementioned debug markup to the default error pages in development mode as well.Added routes Express variable which will list all routes in the app.Added new recognized environment variable: MAKE_BUILD_ARTIFACTS will allow you to set Roosevelt's makeBuildArtifacts config.Added new param minifyHtmlAttributes: Settings to pass to minify-html-attributes.Options:enable: Whether or not to enable minify-html-attributes.Default: [Boolean] false.Available options:'production': Enable only in production mode.'development': Enable in all modes.true: Will be taken to mean 'production'.minifyHtmlAttributesParams: Params to pass to minify-html-attributes.Default: [Object] {}Default: [Object]{   \"enable\": true,   \"minifyHtmlAttributesParams\": {} }Note: Roosevelt will always override 3 params from minify-html-attributes:htmlDir will always be set to Roosevelt's preprocessedViewsPath.cssDir will always be set to Roosevelt's preprocessedStaticsPath.jsDir will always be set to Roosevelt's preprocessedStaticsPath.Added new param preprocessedStaticsPath: Relative path on filesystem to where your preprocessed static files will be written to. Preprocessed static files are view files that have been preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled.Default: [String] \".preprocessed_statics\".This feature will only be active if minifyHtmlAttributes is enabled.Replaced isomorphicControllers param with clientControllers param and made it function similarly to clientViews.Fixed a bug with displaying app version on default error pages.Fixed a bug that could lead to a counter-intuitive error if your template rendered an empty response in dev mode.Updated various dependencies.0.26.0Breaking: Added new param preprocessedViewsPath: Relative path on filesystem to where your preprocessed view files will be written to. Preprocessed view files are view files that have had their uses of web components progressively enhanced using the progressively-enhance-web-components module.Default: [String] \"mvc/.preprocessed_views\".To disable this feature, set the value to false.This is breaking because if you leave it enabled by default (recommended), you will need to add .preprocessed_views to your .gitignore.Breaking: Switched to external source maps for the CSS preprocessor. This necessitated changing the custom CSS preprocessor API to require returning an object instead of a string.If you have written a custom CSS preprocessor, the new return value is:return {   css: 'write code to output css here',   sourceMap: 'write code to output source map here (optional)' }Added new param prodSourceMaps to allow source maps to be generated in prod mode for both CSS and JS.Added IP address to the output when the server starts.Added new CLI script secretsGenerator.js that allows you to combine certsGenerator.js, csrfSecretGenerator.js, and sessionSecretGenerator.js into one command.Added feature to override appDir and secretsPath for the CLI scripts using --appDir somewhere and --secretsPath somewhere CLI flags.Added exceptionRoutes option to the frontendReload param.Added a check for broken symlinks in the public folder, which will be purged if any exist.Added support for placing your Roosevelt config in a roosevelt.config.json file in addition to the previous options.Added better error when attempting to start a Roosevelt app on a file system that does not support symlinks.Changed source maps from inline to external.Fixed a bug that caused the JS bundler to not log when it was writing JS files.Fixed a bug that caused a statics/pages directory being created when it isn't needed.Fixed a bug that could cause the public folder and statics folder to be created even when makeBuildArtifacts is disabled.Fixed a bug that caused the views bundler and isomorphic controllers finder to write a new views bundle to disk even when it wasn't needed.Fixed frontendReload not working in Firefox with the default HTTPS config.Updated various dependencies.0.25.0Breaking: Supplying an allowlist to the views bundler will now implicitly disable exposeAll.Breaking: Renamed secretsDir param to secretsPath.Updated all file path express variables to include full absolute paths.Fixed various bugs in the views bundler feature.Fixed a rare bug where CSRF and session secrets could be written to the wrong directory.Fixed a bug where HTTPS certs could be automatically generated when they shouldn't be.Updated various dependencies.0.24.0Breaking: Altered startServer and initServer methods to now be async. They now need to be awaited to avoid possible race conditions.As a result, starting the app in a single line needs to be updated to await (require('roosevelt').startServer()).Callback arguments have been removed from these methods as well.Breaking: Removed app.get('routes'), onReqAfterRoute, onReqBeforeRoute, onReqStart, and onStaticAssetsGenerated.Breaking: Renamed app.httpServer to app.get('httpServer') and app.httpsServer to app.get('httpsServer').Breaking: Added enable param to clientViews. If your app uses the clientViews feature, you will need to add this param to continue using the feature.Added new method onBeforeMiddleware.Added start and stop method shorthands for startServer and stopServer respectively.Refactored various things under the hood to improve code quality, performance, and reduce unnecessary dependencies.Updated various dependencies.0.23.2Removed toobusy feature since it is temperamental and the dependency is no longer maintained.Refactored internal wildcardMatch to use minimatch under the hood.Replaced html-minifier with html-minifier-terser since html-minifier-terser is better-maintained.Updated various dependencies.0.23.1Added feature that scans the router stack to move the 404 route (the * route) to the end of the stack every time a new route is added, even if the route is added at runtime so that you can dynamically add routes while the app is running.Updated various dependencies.0.23.0Removed cores feature since it is largely redundant now thanks to the widespread popularity of tools like pm2. Also removed various deprecated cluster module support as well.Updated various dependencies.0.22.16Made it possible to disable helmet by setting the helmet param to false.Updated various dependencies.0.22.15Added option to exempt certain routes from CSRF protection.Updated various dependencies.0.22.14The JS bundler will now add mode: \"development\" and devtool: \"source-map\" automatically to your Webpack bundles in development mode.Updated various dependencies.0.22.13Altered helmet's defaults again. The form-action directive has been set to null. This makes it possible to submit forms to other domains in production mode.0.22.12Added 'unsafe-inline' option to helmet's Content-Security-Policy's script-src directive by default in Roosevelt. This will prevent inline scripts from being blocked in production mode.Updated various dependencies.0.22.11Added DISABLE_HTTPS environment variable which when set to true, the HTTPS server will be disabled and the app will revert to HTTP regardless of what is set in the rooseveltConfig.Updated various dependencies.0.22.10Enabled WAL in the SQLite instance used for session storage by default.Updated various dependencies.0.22.9Fixed an issue with cert generation from CLI scripts properly this time.0.22.8Fixed an issue with cert generation from CLI scripts.Updated various dependencies.0.22.7Added a max age to the default express-session configuration.Fixed an issue with cert generation in production mode.Updated various dependencies.0.22.6Fixed a bug that caused self-signed certs to get regenerated every time the app restarted.Updated various dependencies.0.22.5Certs generator will now run in production mode as well if https is enabled and if the files do not already exist. This behavior can be suppressed by setting https.autoCert to false.Fixed bug that prevented the static site generator feature from working in dev mode when the HTML validator was enabled.Fixed README formatting typos.Updated various dependencies.0.22.4Made it possible to set expressSession to true which will set a sane default config so you don't have to spell one out.0.22.3Updated default session store to use SQLite instead of an in-memory database so that sessions are not invalidated when the server restarts.Updated various dependencies.0.22.2Fixed a bug that caused self-signed certs to get regenerated every time the app restarted.Updated various dependencies.0.22.1Exposed the express-session middleware for use in Roosevelt apps.Updated various dependencies.0.22.0Breaking: Added a unified secrets directory for various app secrets such as HTTPS certs, session secret, CSRF secret, etc. The name of the directory is configurable, but when upgrading an app from the previous version, you may need to alter your rooseveltConfig to remove directories from your cert or key paths. You must now specify only a file name in those params.Added support for express-session for session support.Added CSRF protection.Improved dev sync script for developing Roosevelt significantly.Updated various dependencies.0.21.16Fixed an issue that could cause the server to start before all the controller routes were loaded.Updated various dependencies.0.21.15Updated various dependencies.0.21.14Updated various dependencies.0.21.13Certs will be auto-generated in dev mode now if they don't exist.Various dependencies updated.0.21.12Fixed isomorphic controllers bundler webpack bug in Windows.Various dependencies updated.0.21.11Added a new --build CLI flag that will instruct Roosevelt to just build the build artifacts but not start the server.Added new onStaticAssetsGenerated event that is fired when the server finishes init but before the server starts.Fixed an issue that would cause the server to start even when makeBuildArtifacts is set to staticsOnly. This has the side effect of causing serverStart() to revert to the behavior of init() if makeBuildArtifacts is set to staticsOnly.Fixed a bug that would cause roosevelt-router to produce a false negative when detecting teddy.Various dependencies updated.0.21.10Added --webpack=verbose and --wp=verbose-file CLI flags to make it easier to see verbose webpack errors. Available shorthands: --wp and -w.Added detection of undefined template literal variables (e.g. via typo) in rooseveltConfig.Added more helpful error if starting an app with broken symlinks.Various dependencies updated.0.21.9Fixed frontend reload when https is enabled with self-signed certs.Removed parent-require dependency.Added new dev_sync.sh to make writing code for Roosevelt easier. See instructions on how to use it in the README.Various dependencies updated.0.21.8Added wildcard matching to views bundler feature.Fixed bug that could cause build artifact generation to crash starting the app.Various dependencies updated.0.21.7Fixed CSS preprocessor breaking on Windows when using the default configuration in a newly generated app.Various dependencies updated.0.21.6The certs-generator script's default name has been changed to generate-certs. The config auditor will now expect it to be named that.The config-audit script's default name has been changed to audit-config. The config auditor will now expect it to be named that.allowlist in CSS preprocessor now supports wildcard matching, e.g. dir/*.Various dependencies updated.0.21.5allowlist and blocklist in static site generator feature now supports wildcard matching, e.g. dir/*.Various dependencies updated.0.21.4Added allowlist and blocklist to the static site generator feature.Fixed bug with the static site generator feature that required absolute paths for including child templates in a main template.Various dependencies updated.0.21.3When versionedPublic is true, Roosevelt will no longer deposit static HTML pages into the versioned directory.Various dependencies updated.0.21.2Fixed bug where the config auditor would complain about the makeBuildArtifacts param being set to string.Static site generator will now run the HTML validator against rendered templates in dev mode only.Various dependencies updated.0.21.1Static site generator can now be supplied models by file instead of by configuration. If model data is not supplied by configuration, Roosevelt will try to automatically load a model from a JS file with the same name alongside the template if it exists instead.Static site generator will now run the HTML validator against rendered templates.Bumped CI Node versions.0.21.0Breaking: htmlMinifier param renamed and expanded to html. You will need to update your Roosevelt config.Added feature html.sourcePath, html.models, and html.output which lets you generate static HTML pages from the your statics directory by compiling them with a view engine and depositing the output to the public folder at start time.Fixed issue with symlinks that would cause symlinking to a file rather than a directory to fail in Windows.Some error message copyediting.Some minor refactoring and documentation fixes.Various dependencies updated.0.20.1makeBuildArtifacts will now accept a new value of 'staticsOnly' which will allow Roosevelt to create static files but skip the creation of the MVC directories.initServer can now also be called as init instead.Various dependencies updated.0.20.0Breaking: Renamed generateFolderStructure to makeBuildArtifacts.Various dependencies updated.Breaking: Among them, formidable was updated which is a breaking change for any app that takes file uploads as property names in req.files have been renamed, most notably file.path is now file.filepath and file.name is now file.originalname.Removed checkDependencies.0.19.14Fixed bug that required admin permissions to start an app in Windows.0.19.13Added script to generate self-signed HTTPS certs:npm run certs-generator: Generates self-signed HTTPS certs for your app.Default shorthand:npm run cScript is short for: node ./node_modules/roosevelt/lib/scripts/certsGenerator.jsSome refactoring.Various dependencies updated.0.19.12Various dependencies updated.Migrated colors to @colors/colors.0.19.11Fixed bug that caused isoRequire to only work with absolute paths.Various dependencies updated.0.19.10Added roosevelt-router feature to improve support for writing isomorphic code for SPAs.Added isomorphicControllers config option that will permit Roosevelt to make a list of all your controller files that can be used client-side as well so they can be auto-loaded client-side too.Altered clientViews such that the template list will lack file extensions if the file extension of the template matches the default view engine's file extension.Breaking: Default clientViews output bundle changed from bundle.js to views.js.Fixed confusing console warning.HTML validator frontend scripts moved to <head>.Various dependencies updated.0.19.9Made Webpack errors less verbose.Various dependencies updated.0.19.8Updated for support for Node 16.x. This required a migraiton from node-sass to dart-sass.Dropped official Node 15 support, though it will probably still work. Node 14 remains officially supported.Various dependencies updated.0.19.7clientViews allowlist now allows directories.Default command line flags and environment variables recognized by Roosevelt can now be overridden via source-configs.Various dependencies updated.0.19.6Added onAppExit event.Fixed bug with https feature.Various dependencies updated.0.19.5Fix for Node 15 / npm 7 regression. Config auditor and deprecation checker will no longer run as postinstall scripts to compensate for INIT_CWD being removed from npm. These checks will be run exclusively on application first run instead (or any time the public folder is removed). (Closes https://github.com/rooseveltframework/roosevelt/issues/975)Dropped Node 12 support.Various dependencies updated.0.19.4Fixed bug that caused Roosevelt to not listen to NODE_ENV.Moved symlink creation to a separate step and made happen earlier in the app initialization process to maek it easier to work with the various Roosevelt server starting events.Various dependencies bumped.0.19.3Fixed bug which could cause CSS preprocessor to fail if there are subdirectories in your CSS folder.Various dependencies bumped.0.19.2Breaking: clientViews no longer exports a function, instead exporting a JSON object.Breaking: clientViews will no longer minify templates by default.Fixed bug with clientViews exposeAll feature that would cause it to scoop up any system files that might be present in your views directories.Fixed bug with clientViews blocklist mistakenly defaulting to an object instead of an array which could cause crashes in some configurations.Fixed bug with CSS preprocessor that would cause it to scoop up any system files that might be present in your CSS directories.Various dependencies bumped.0.19.1Added ability to configure helmet dependency.Fixed bug that caused frontend reload not to work.Fixed a bug in the Express env variable that would cause it to be incorrectly set at times.Updated some out of date into in the README.Removed some unnecessary code.Various dependencies bumped.0.19.0Breaking: Production mode behavior changed significantly:localhostOnly and alwaysHostPublic defaults were flipped to false and true respectively.alwaysHostPublic was renamed to hostPublic.The --host-public command line flag was removed, since it is no logner needed because hostPublic defaults to true now.New command line flag added called production-proxy to let you opt-in to localhostOnly and alwaysHostPublic being set to true and false respectively as before.Various dependencies bumped.0.18.3You can now use PHP as your templating engine in a Roosevelt app or any other Express application. PHP should be faster than any JS-based templating engine for complex templates since its parser is written in C rather than JS.Breaking: blacklist/whitelist params throughout the API have been renamed to blocklist/allowlist.README was copyedited to improve the clarity of the default behaviors of some of the API, remove outdated information, and other small improvements.The host-public warning was made more prominent so that production mode default behavior regarding statics is less confusing to people.CI improvements.Breaking: Roosevelt is no longer tested on Node 10.x. We didn't do anything to explicitly break older Node versions, but use at your own risk.Various dependencies bumped.0.18.2Added helmet middleware to improve security by default.Replaced body-parser middleware with native Express integration.Various dependencies bumped.0.18.1Changed passphrase option from https.p12.passphrase to https.passphrase so it can be used for certAndKey configurations as well.CI improvements.Various dependencies bumped.0.18.0Replaced the vnu-jar based HTML validator with express-html-validator 🎉.Roosevelt no longer does any background process management as a result.Moved all developer facing dependencies to optionalDependencies.They can be omitted from installion when using npm i --no-optional.Refactored frontend reload implementation.check-dependencies now only runs in dev mode.API changes:Removed separateProcess from htmlValidator.Removed port from htmlValidator.Removed showWarnings from htmlValidator.Added validatorConfig to htmlValidator which respresents a set of rules for the validator to check for.Rules can also be set in a .htmlValidate.json placed in the app root.Removed verbose from frontendReload.These logs are now controlled by the general verbose logging param.Removed ROOSEVELT_VALIDATOR environment variable.Removed ROOSEVELT_AUTOKILLER environment variable.Removed --attach-validator and -a cli flags.Removed --background-validator and -b cli flags.Removed --disable-validator-autokiller, --no-autokiller, and -n cli flags.Removed --enable-validator-autokiller, --html-validator-autokiller, and -k cli flags.Removed dependencies:execafkillhtml-validatorprismjsps-nodetampervnu-jarVarious dependencies bumped.0.17.1Fixed a CSS bug where CSS files were still not being written due to a file existence check.Fixed a CSS bug where empty CSS files were being written because their LESS equivalent would never generate CSS in that particular file.Various dependencies bumped.0.17.0Breaking: Replaced staticsSymlinksToPublic with symlinks.Breaking: Replaced routers param with a simplified routePrefix param which defines a subfolder to mount the app to.Breaking: Renamed multipart param to formidable.Added ability to configure Roosevelt via a rooseveltConfig.json config file placed in app root instead of from a rooseveltConfig object in package.json.Added router Express variable that opens up access to internally used router instance.Added routePrefix Express variable that exposes currently used routePrefix or an empty string if not used.Fixed bug where changes to CSS files were not being written to the output directory.Refactored internal fsr module.Updated internal usage of formidable API.Internal changes to stabilize the automated tests.Various dependencies bumped.0.16.2Added deprecation check for old compiler sub modules.Various dependencies bumped.0.16.1Stopped the config auditor from complaining about obsolete scripts.Fixed cases where some CLI flags weren't being applied to config.Test fixes.Various dependencies bumped.0.16.0Replaced browserify with webpack. This has significant breaking API changes. You will need to totally rewrite your JS bundles from browserify bundles to webpack bundles to upgrade to this version of Roosevelt. It is also recommended that you remove all references to old build artifacts such as .build and .bundled in your application as well from package.json, .gitignore, etc.Eliminated concept of separate JS compilers in favor of declaring this via your webpack config. Note: webpack defaults to minifying JS using terser.Eliminated concept of CSS preprocessor middleware modules in favor of built-in support for LESS, Sass, and Stylus. Other CSS preprocessors can be used as well with a bit of extra configuration.API changes:Removed symlinkToPublic, compiler, output, whitelist, and blacklist params from js.Replaced js.bundles with js.webpack.Removed css.symlinkToPublic.Replaced css.compiler.params.cleanCSS with css.minifier.Added css.compiler.enable.Replaced css.compiler.nodeModule with css.compiler.module.Replaced css.compiler.params with css.compiler.options.css.output is now relative to publicFolder instead of staticsRoot.clientViews.output is now relative to publicFolder instead of staticsRoot.Removed cleanTimer (Obsolete in absense of .build).App cleaner has been removed.source-configs integration is now more tightly knit.Config auditor no longer complains about missing params.Auditor now checks config params on a case-by-case basis.ES6 style variables can now be used in rooseveltConfig referencing other rooseveltConfig entries.Introduced views bundler: An API that allows you to expose view code to frontend JS for client-side templating.Added a button to the validation error page to display the page anyway and another button to disable the validator entirely until the server restarts.Fixed bug with frontend reload causing it to inject the script tag in the wrong location in some situations.Fixed bug where router would cause app routes to fail when no controller files exist.Fixed bug where auto build scanner would crash the app when generateFolderStructure is false.Fixed bug which resulted in a cryptic error if a Roosevelt app was moved to another directory.Fixed bug where symlink failed errors would appear when generateFolderStructure is false.Complete rewrite of HTML validator and related helper scripts.Refactored multipart middlware.Various dependencies bumped.CI improvements.Many rewritten tests.0.15.1Fixed bug causing apps to crash in dev mode.Various dependencies bumped.0.15.0Moved CSS minification from roosevelt-less to Roosevelt using clean-css as a direct dependency. The clean-css library had an update with breaking changes so the rooseveltConfig params in advanced and aggressiveMerging in cleanCSS are now outdated.New default script npm run proddev: Runs the app in production mode, but with the public folder hosted by the Roosevelt app. This is useful for doing development in production mode without having to stage a complex simulation of your production environment, which would likely include hosting static files via another web server better-suited to serving statics like Apache or nginx.Roosevelt now sources configs internally using source-configs.Validator will now be disabled if HTTP_PROXY or HTTPS_PROXY are set but localhost is not in NO_PROXY.Fixed a bug where not having devDependencies or dependencies objects in your app's package.json would throw errors when installing dependencies. Accordingly re-reverted most changes in 0.14.1 to fix buggy behavior with devDependencies in npm installs.The check-dependencies call will now only apply to production dependencies.Some internal refactoring to clean things up.Various dependencies bumped.0.14.6Fixed a bug that caused devDependencies of Roosevelt to be removed if npm i was run more than once.Fixed a bug that caused the automated testing to break if your clone of Roosevelt was not named \"roosevelt.\"Various dependencies bumped.0.14.5staticsSymlinksToPublic will now create missing subdirectories necessary to create a symlink in a target location.Fixed a bug which caused Java hserrpid error logs to pile up in your app directory under certain conditions.Fixed a bug which caused frontend reload to not work on the various error pages.Added code comment above frontend reload script tag to explain that it is injected by Roosevelt.Did some copyediting on frontend reload logging.Various dependencies bumped.0.14.4Added automatic browser reloading when your frontend code changes (via reload).A console warning will now appear explaining why public static assets don't load in prod mode when alwaysHostPublic is set to false (the default).New Express variable added: routes containing a list of all routes loaded in the application.Various dependencies bumped.CI improvements.0.14.3Restored move of several things to devDependencies to shrink production builds. Feature is now activated using ROOSEVELT_DEPLOYMENT environment variable. There are also new corresponding npm run commands dev-install and dev-prune to manage this. See README for more details.Copyediting on several logs to improve clarity.Various dependencies bumped.CI improvements.0.14.2Reverted most changes in 0.14.1 to fix #713, but preserved modularization of htmlValidator.js so that if any devDependencies are missing, the app will not crash in production mode.Various dependencies bumped.0.14.1Moved several things to devDependencies to shrink production builds.Various dependencies bumped.0.14.0Replaced internal logger with roosevelt-logger. Note: this removes the winston Express variable that was previously provided, but it is still indirectly accessible by drilling down through the logger Express variable now. See roosevelt-logger member variable documentation.If custom routers are being used, the res.redirect() method will now prepend the prefix to redirects that are relative to the hostname. To override this setting pass true as the last argument.HTML validator exceptions param will now accept an array of values instead of just a single string value.Various dependencies bumped.CI improvements.0.13.0Roosevelt will now warn you if your CSS/JS compile directory is getting stale and might need to be cleaned with npm run clean. A new cleanTimer param has been added to configure or disable this check.Added new param routers to add support for Express Routers.Added new feature to create custom CSS/JS preprocessors on the fly.Added environment variable to enable/disable the HTML validator autokiller.Added OpenJDK support to the Java HTML Validator.Various dependencies bumped.CI improvements.0.12.2Introduced changelog.Autokiller now sends human-readable GET.Fixed bug which caused the config auditor to report false errors in the case of third party module params being set to configurations other than the default.Fixed bug related to HTTPS cert parsing.Disabled option in HTML minifier which removes HTML comments by default.Various dependencies bumped.CI improvements.0.12.1 and belowHere be dragons…"})
window.siteTexts.push({file: "docs/0.31.1/coding-apps/index.html", title: "coding apps (0.31.1)", text: "Making model filesPlace a file named dataModel.js in mvc/models.Here's a simple example dataModel.js data model:// dataModel.js module.exports = () => {   return { some: 'data' } }In more complex apps, you might query a database to get your data instead.Making view filesViews by default are Teddy templates. See the Teddy documentation for information about how to write Teddy templates.You can also configure Roosevelt to use any templating system supported by Express for your views.Making controller filesController files are places to write Express routes. A route is the term Express uses for URL endpoints, such as https://yoursite/blog or https://yoursite/about.Controllers bind models and views together.To make a new controller, make a new file in the controllers directory, then follow one of the examples below.Example GET route// someController.js module.exports = (router, app) => {   // router is an Express router   // and app is the Express app created by Roosevelt    // standard Express route   router.route('/about').get((req, res) => {     // load a data model     const model = require('models/dataModel')()      // render a template and pass it the model     res.render('about', model)   }) }Example POST routeIn Roosevelt, Cross-Site Request Forgery protection is enabled by default. That means in order to make requests to any POST route, you will need to pass a CSRF token from the server to the browser, and then return that token when making a request from the browser to the server.To do that, include the CSRF token in your HTML form as a hidden input _csrf:// someController.js module.exports = (router, app) => {   router.route('/form').get((req, res) => {     const model = require('models/dataModel')()     model.token = req.csrfToken() // add CSRF token to the model     res.render('about', model)   }) }<!-- form that include the token in a request body --> <form action=\"/some-protected-endpoint\" method=\"post\">   <input type=\"hidden\" name=\"_csrf\" value=\"{token}\"> </form>You can also add the token as a request header when performing fetch requests by setting the x-csrf-token header:// request that includes the token in headers const response = await fetch('/some-protected-endpoint', {   method: 'POST',   headers: {     'X-CSRF-TOKEN': token   } })You can also exempt certain routes from CSRF protection or disable the feature entirely by configuration. See configuration section for details.Reusable controllersSometimes it is also useful to separate controller logic from your routing. This can be done by creating a reusable controller module. Reusable controller modules differ from standard controller modules in that they are meant to be called from within other controllers and do not define routes.To create a reusable controller, put a file in your controllers directory that accepts app, req, and res arguments with logic that is meant to execute from within a predefined route.An example of when this might be needed would be having a reusable controller for \"404 Not Found\" pages:// notFound.js — reusable controller module.exports = (app, req, res) => {   const model = { content: 'Cannot find this page' }   res.status(404)   res.render('404', model) }You can then call the reusable controller in any other controller when needed:// someController.js module.exports = (router, app) => {   router.route('/whatever').get((req, res) => {     // test some logic that could fail     // thus triggering the need for the 404 controller     if (something) {       // logic didn't fail       // so render the page normally       let model = require('models/dataModel')       res.render('whatever', model)     }     else {       // logic failed       // so throw the 404 by executing your reusable controller       require('controllers/notFound')(app, req, res)     }   }) }Any controller file that has no arguments or more than two arguments will be considered a reusable controller.Making static pagesYou can also generate static files from templates and models as well.Templates for static pages go in your statics folder (staticsRoot) under the HTML source path (html.sourcePath), which is statics/pages by default.Data models for the templates will be merged from different possible locations to source them from in the following order of precedence:* model in htmlModels.File-level override in htmlModels.Model file.Setting static page modelsTo declare a global model in htmlModels, use the * character:// build.js (async () => {   await require('roosevelt')({     html: {       models: {         '*': {           hello: 'world!'         }       }     }   }).init() })()To declare a model for a specific file in htmlModels:// build.js (async () => {   await require('roosevelt')({     html: {       models: {         'index.html': {           hello: 'world!'         }       }     }   }).init() })()You can also declare a model for a specific page by placing a JS file with the same name alongside the template.For example if an index.js file exists next to index.html, the JS file will be used to set the model so long as it exports either an object or a function that returns an object."})
window.siteTexts.push({file: "docs/0.31.1/configuration/index.html", title: "configuration (0.31.1)", text: "App nameRoosevelt will determine your app's name by examining \"name\" in package.json. If none is provided, it will use Roosevelt Express instead.The rooseveltConfig APIRoosevelt is highly configurable and you can configure it from the following hierarchy of sources in increasing order of precedence:A rooseveltConfig section in your package.json.A roosevelt.config.json file.A rooseveltConfig.json file.Constructor parameters.Environment variables.Command line flags.What \"increasing order of precedence\" means is that command line flags will override environment variables, environment variables will override constructor parameters, constructor parameters will override config files, etc.File path optionsappDir [String]: Root directory of your application. Default: The directory where your app's package.json is located.buildFolder [String]: Where build artifacts will be placed such as the output from preprocessed views, preprocessed statics, the views bundler feature, or the controllers bundler feature. Default: \".build\".You should .gitignore this folder.Not all build artifacts will go into this folder. Some notable exceptions include:.npm-cache: Generated by npm.node_modules: Generated by npm.package-lock.json: Generated by npm.public: This is a separate folder for files generated by Roosevelt that should be exposed publicly as static files. The name of this folder is configurable with the publicFolder param.secrets: Directory that stores certs, keys, and secrets. The name of this folder is configurable with the secretsPath param.controllersPath [String]: Relative path on filesystem to where your controller files are located. Default: \"mvc/controllers\".errorPages [Object]: Relative path on filesystem to where your various error page controller files are located. If you do not supply them, Roosevelt will use its default ones instead:forbidden [String]: Your 403 Forbidden error page. Default: \"403.js\".notFound [String]: Your 404 Not Found error page. Default: \"404.js\".internalServerError [String]: Your 5xx Internal Server Error error page. Default: \"5xx.js\".serviceUnavailable [String]: Your 503 Service Unavailable error page. Default: \"503.js\".modelsPath [String]: Relative path on filesystem to where your model files are located. Default: \"mvc/models\".preprocessedStaticsPath [String]: Relative path on filesystem to where your preprocessed static files will be written to. Preprocessed static files are static files that have been preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled. This feature will only be active if minifyHtmlAttributes is enabled. Default: \".build/preprocessed_statics\".preprocessedViewsPath [String]: Relative path on filesystem to where your preprocessed view files will be written to. Preprocessed view files are view files that have had their uses of web components progressively enhanced using the progressively-enhance-web-components module. To disable this feature, set the value to false. Default: \".build/preprocessed_views\".publicFolder [String]: All files and folders in this directory will be exposed as static files in development mode or when hostPublic is enabled. You should .gitignore this folder. Default: \"public\".secretsPath [String]: Directory that stores certs, keys, and secrets. You should .gitignore this folder. Default: secrets.staticsRoot [String]: Relative path on filesystem to where your source static assets are located. By default this folder will not be made public, but is instead meant to store unprocessed or uncompressed source assets that will later be preprocessed and exposed in public. Default: \"statics\".viewsPath [String]: Relative path on filesystem to where your view files are located. Default: \"mvc/views\".Development mode optionsThese features are only available in development mode.frontendReload [Object]: Settings to use for the browser reload feature which automatically reloads your browser when your frontend code changes.Options:enable [Boolean]: Whether or not to enable this feature.exceptionRoutes [Array of Strings]: List of routes to exclude from this feature.expressBrowserReloadParams [Object]: Params to pass to express-browser-reload. This feature will only be active on pages with a <body> tag.Default: [Object]{   \"enable\": true,   \"exceptionRoutes\": [],   \"expressBrowserReloadParams\": {     \"skipDeletingConnections\": true   } }htmlValidator [Object]: Parameters to send to express-html-validator.enable [Boolean]: Enables or disables the built-in HTML validator.exceptions [Object]: A set of params that can be used to prevent validation in certain scenarios.header [String]: A custom header that when set will disable the validator on a per request basis.modelValue [String]: An entry in your data model passed along with a res.render that when set will disable validation on the rendered HTML.validatorConfig [Object]: html-validate configuration that determines what errors the validator looks for.The full list of available validator rules can be found here.This configuration can also be set by a .htmlValidate.json file placed in your app root directory.mode [String]: Decides whether your app starts in production mode or development mode by default. Default: production.Default: [Object]{   \"enable\": true,   \"exceptions\": {     \"requestHeader\": \"Partial\",     \"modelValue\": \"_disableValidator\"   },   \"validatorConfig\": {} }HTTP optionshttp [Object]: Parameters for configuring the HTTP server.enable [Boolean]: Enable HTTP server.port [Number]: The HTTP port your app will run on.Default when an app is created manually: [Object]{   \"enable\": true,   \"port\": 43763 }Default when an app is created with the app generator: [Object]{   \"enable\": false,   \"port\": 43763 }https [Object]: Parameters for configuring the HTTPS server.enable [Boolean]: Enable HTTPS server.port [Number]: The port your app will run the HTTPS server on.autoCert [Boolean]: Will create self-signed HTTPS certificates in development mode as long as they don't already exist.options [Object]: Configuration that gets passed directly to the HTTPS server instance. Accepts all native settings. For convenience, the ca, cert, key, and pfx params can take file path strings or arrays of file path strings relative to your secretsPath in addition to the native strings and buffers.Default when an app is created manually: [Object]{   \"enable\": false,   \"port\": 43711,   \"autoCert\": true,   \"options\": {} }Default when an app is created with the app generator: [Object]{   \"enable\": true,   \"port\": 43711,   \"autoCert\": true,   \"options\": {     \"cert\": \"cert.pem\",     \"key\": \"key.pem\"   } }App behavior optionsdeprecationChecks: [String] or [Boolean]: Whether or not to run the deprecation checker in Roosevelt. The deprecation checker is a script that runs when your app starts to determine if you have code targeting an older version of Roosevelt that needs to be refactored. Default: 'developmemnt-mode' which will run the checks in development mode only. Set to false to disable it entirely.expressVersion: [Number]: Which version of Express to use. Choose between either 4 or 5. This option exists because there are significant differences between Express 4 and Express 5. Default: 5.bodyParser [Object]: Parameters to supply to the body-parser module which handles POST requests.urlEncoded [Object]: Parameters to supply to body-parser.urlencoded.json [Object]: Parameters to supply to body-parser.json.Default: [Object]{   \"urlEncoded\": {     \"extended\": true   },   \"json\": {} }csrfProtection [Boolean or Object]: Whether to enable Cross-Site Request Forgery protection. Default: true.Requires expressSession to be enabled.To disable the feature, set it to false. To exempt certain routes from protection, supply an object as your config with an array of exemptions.See the CSRF Protection section for more information.Example of exemptions list: [Object]{   \"exemptions\": [     \"/foo\",     \"/bar\",     \"/baz\"   ] }expressSession [Boolean or Object]: Parameters to pass to the express-session module. Default: true.Default if expressSession is set to true: [Object]{   \"secret\": [an auto-generated secret],   \"resave\": false, // usually a bad idea to set to true   \"saveUninitialized\": false, // usually a bad idea to set to true   \"cookie\": {     \"secure\": false, // will automatically be set to true if https is enabled     \"sameSite\": \"strict\", // adds same site enforcement     \"maxAge\": 347126472000 // sets expiration very far in the future (~11 years) to basically never expire   }   \"store\": [the expressSessionStore.instance Roosevelt param] }expressSessionStore [Object]: Define a custom session store to use with express-session instead of the default one provided by Roosevelt. This is recommended if you plan to shard your app across multiple separate processes or scale it to multiple servers.filename [String]: Name of the session file.instance: [Object] A store instance. See this list for compatible stores.preset [String]: Available presets provided by Roosevelt. Only used if instance is not provided.Available options:\"default\": Use Roosevelt's default session store, which is better-sqlite3-session-store.\"express-session-default\": Use express-session's default session store (not recommended).presetOptions [Object]: Options to pass to the preset session store if one is selected. Only used if instance is not provided.checkPeriod [Number]: How long, in milliseconds, the memory store will check for expired items.ttl [Number]: How long, in milliseconds, before a session is expired. If not set, it will default to the value of checkPeriod.max [Number]: The maximum size of the cache, checked by applying the length function to all values in the cache. If not set, there will be no maximum.Either instance or preset must be set for this param to work properly.Default: [Object]{   \"filename\": \"sessions.sqlite\",   \"instance\": null,   \"preset\": \"default\",   \"presetOptions\": {     \"checkPeriod\": 86400000, // one day     \"ttl\": null,     \"max\": null   } }formidable: Parameters to pass to formidable using formidable's API for multipart form processing (file uploads). Access files uploaded in your controllers by examining the req.files object. Roosevelt will remove any files uploaded to the upload directory when the request ends automatically. To keep any, be sure to move them before the request ends.Default: [Object]{   \"multiples\": true // enables multiple files to be uploaded simultaneously }To disable multipart forms entirely, set formidable to false.helmet [Object]: Parameters to pass to the helmet module. This module helps secure Express apps by setting HTTP response headers.The default options are specified in the helmet docs, with the following exceptions that Roosevelt makes to the default Content-Security-Policy settings:The upgrade-insecure-requests directive has been removed. This change prevents this bug.The script-src directive has been set to \"unsafe-inline\". This makes it possible to use inline scripts.The form-action directive has been set to null. This makes it possible to submit forms to other domains.You can reverse any of these changes by configuring helmet yourself.To disable helmet entirely, set the param to false.logging: Parameters to pass to roosevelt-logger. See roosevelt-logger parameters documentation for configuration options.Default: [Object]{   \"methods\": {     \"http\": true,     \"info\": true,     \"warn\": true,     \"error\": true,     \"verbose\": false   } }makeBuildArtifacts [Boolean or String]: When enabled Roosevelt will generate user-specified directories, CSS/JS bundles, etc.Defaults to false for apps created manually.Will be set to true in apps generated with the app generator.Can also accept a value of \"staticsOnly\" which will allow Roosevelt to create static files but skip the creation of the MVC directories.routePrefix [String]: A prefix prepended to your application's routes. Applies to all routes and static files. Default: null.Example: When set to \"foo\" a route bound to / will be instead be bound to /foo/.This prefix is exposed via the routePrefix Express variable which should be used for resolving the absolute paths to statics programmatically.Example: An image located at /images/teddy.jpg can be resolved in a prefix-agnostic way via ${app.get('routePrefix')/images/teddy.jpg}.viewEngine [String]: What templating engine to use, formatted as \"fileExtension: nodeModule\".Defaults to \"none\" for apps created manually.Will be set to \"html: teddy\" in apps generated with the app generator.Also by default when using the app generator, the teddy module is marked as a dependency in package.json.To use multiple templating systems, supply an array of engines to use in the same string format. Each engine you use must also be marked as a dependency in your app's package.json. Whichever engine you supply first with this parameter will be considered the default.Example configuration using multiple templating systems: [Object]{   \"viewEngine\": [     \"html: teddy\",     \"php: php\",     \"ejs: ejs\"   ] }Isomorphic (single page app) optionsclientControllers [Object]: Allows you to expose controller (route) file code to frontend JS for client-side routing.enable [Boolean]: Whether or not to bundle controller files.exposeAll [Boolean]: Option to expose all templates.blocklist [Array of Strings]: List of files or folders to exclude when exposeAll is enabled.Can also be set declaratively by putting a // roosevelt-blocklist comment at the top of any controller file.allowlist [Object of Arrays]: List of JS files to create mapped to which controller files to expose.Example: { \"mainPages.js\": [\"index.js\", \"about.js\"] }Can also be set declaratively by putting a // roosevelt-allowlist file_path comment at the top of any controller file.defaultBundle [String]: File name for the default JS controller bundle.output [String]: Subdirectory within buildFolder to write JS controller bundles to.Default: [Object]\"clientControllers\": {   \"enable\": false,   \"exposeAll\": false,   \"blocklist\": [],   \"allowlist\": {},   \"defaultBundle\": \"controllers.js\",   \"output\": \"js\" }clientViews [Object]: Allows you to expose view (template) file code to frontend JS for client-side templating.enable [Boolean]: Whether or not to bundle view files.exposeAll [Boolean]: Option to expose all templates.blocklist [Array of Strings]: List of files or folders to exclude when exposeAll is enabled.Can also be set declaratively by putting a <!-- roosevelt-blocklist --> tag at the top of any template.allowlist [Object of Arrays]: List of JS files to create mapped to which view files to expose.Example: { \"mainPages.js\": [\"baseLayout.html\", \"footer.html\"] }Can also be set declaratively by putting a <!-- roosevelt-allowlist file_path --> tag at the top of any template.defaultBundle [String]: File name for the default JS view bundle.output [String]: Subdirectory within buildFolder to write JS view bundles to.minify [Boolean]: Option to minify templates that are exposed via this feature.Be careful with this feature because it can break your templates depending on which templating system you use, and as such it is off by default. You may need to make liberal use of the minifyOptions param to make it work right with your templating system.minifyOptions [Object]: Parameters to supply to html-minifier's API.Uses the params you set in html.minifier.options if empty.Default: [Object]\"clientViews\": {   \"enable\": false,   \"exposeAll\": false,   \"blocklist\": [],   \"allowlist\": {},   \"defaultBundle\": \"views.js\",   \"output\": \"js\",   \"minify\": false,   \"minifyOptions\": {} }Static file optionscopy [Array of Objects]: Declare one or more files or folders to copy at runtime. Default: [].source [String]: Path to be copied from.Roosevelt will not attempt to copy files or folders that do not exist.dest [String]: Path to place the copy.If this destination path already exists it will be overwritten.html [Object]: Generate static HTML pages:sourcePath [String]: Subdirectory within staticsRoot where your static HTML files are located. By default this folder will not be made public, but is instead meant to store unminified / unprocessed HTML template source files which will be rendered by your templating system, minified, and written to the public folder when the app is started.allowlist: [Array of Strings] List of templates to render, minify, and write to the public folder when the app is started. If the list is empty, all templates in your sourcePath will be sourced. Supports wildcard matching, e.g. dir/*.blocklist: [Array of Strings] List of templates in your sourcePath to skip. Supports wildcard matching, e.g. dir/*.You can also block a file from being exposed by adding a comment on the first line of the file with the string roosevelt-blocklist anywhere on the line.models [Object]: Data to pass to templates by file path / file name.Example: { \"index.html\": { \"some\": \"data\" } }You can also pass a global model using a * catch-all character: { \"*\": { \"some\": \"data\" } }If this data is not supplied by configuration, Roosevelt will try to automatically load a model from a JS file with the same name alongside the template if it exists instead. For example if an index.js file exists next to index.html and the model is not defined by configuration like in the example above, then the index.js file will be used to set the model so long as it exports either an object or a function that returns an object.output [String]: Subdirectory within publicFolder where parsed and minified HTML files will be written to.folderPerPage [Boolean or String]: Make a folder for each page and place the page within it.Example values:true: Given a page called example.html, this feature will create a folder called \"example\" in the public folder and place \"example.html\" within it.\"index.html\": Given a page called example.html, this feature will create a folder called \"example\" in the public folder and place \"index.html\" within it. This is useful for creating \"pretty URLs\" with static sites.false: Disables the feature.minifier [Object]: How you want Roosevelt to minify your HTML:enable [Boolean]: Whether or not to minify HTML.Can also be disabled by the minify param.Minification is automatically disabled in development mode.exceptionRoutes [Array of Strings]: List of controller routes that will skip minification entirely. Set to false to minify all URLs.options [Object]: Parameters to supply to html-minifier's API.Default: [Object]{   \"sourcePath\": \"pages\",   \"allowlist\": null,   \"blocklist\": null,   \"models\": {},   \"output\": \"\",   \"folderPerPage\": false,   \"minifier\": {     \"enable\": true,     \"exceptionRoutes\": false,     \"options\": {       \"removeComments\": true,       \"collapseWhitespace\": true,       \"collapseBooleanAttributes\": true,       \"removeAttributeQuotes\": true,       \"removeEmptyAttributes\": true     }   } }css [Object]: How you want Roosevelt to configure your CSS preprocessor:sourcePath [String]: Subdirectory within staticsRoot where your CSS files are located. By default this folder will not be made public, but is instead meant to store unminified CSS source files which will be minified and written to the public folder when the app is started.compiler [Object]: Which CSS preprocessor (if any) to use.enable [Boolean]: Whether or not to use a preprocessor.module [String]: Node module name of the CSS preprocessor you wish to use.Currently less, sass, and stylus are supported.Your chosen CSS preprocessor module must also be marked as a dependency in your app's package.json.options [Object]: Parameters to send to the CSS preprocessor if it accepts any.minifier [Object]: Params pertaining to CSS minifcation.enable [Boolean]: Whether or not to minify CSS. Can also be disabled by the minify param.options [Object]: Parameters to pass to the CSS minifier clean-css, a list of which can be found in the clean-css docs.allowlist [Array of Strings]: List of CSS files to allow for compiling. Leave undefined to compile all files. Supply a : character after each file name to delimit an alternate file path and/or file name for the minified file.Example array member: \"example.less:example.min.css\" compiles example.less into example.min.css.output [String]: Subdirectory within publicFolder where compiled CSS files will be written to.versionFile [Object]: If enabled, Roosevelt will create a CSS file which declares a CSS variable containing your app's version number from package.json. Enable this option by supplying an object with the member variables fileName and varName. Versioning your static files is useful for resetting your users' browser cache when you release a new version of your app.Example usage (with SASS): { \"fileName\": \"_version.scss\", \"varName\": \"appVersion\" }Assuming the default Roosevelt configuration otherwise, this will result in a file statics/css/_version.scss with the following content: /* do not edit; generated automatically by Roosevelt */ $appVersion: '0.1.0';Some things to note:If there is already a file there with that name, this will overwrite it, so be careful!It's generally a good idea to add this file to .gitignore, since it is a build artifact.Default: [Object]{   \"sourcePath\": \"css\",   \"compiler\": {     \"enable\" : false,     \"module\": \"less\",     \"options\": {}   },   \"minifier\": {     \"enable\": true,     \"options\": {}   },   \"allowlist\": null,   \"output\": \"css\",   \"versionFile\": null }cssCompiler [Function]: Use this param to supply a custom CSS preprocessor function.To do so, supply a function which accepts argument app, which is a reference to the Express app created by Roosevelt.The function should return an object with the following members:versionCode(app) [Function]: Function to return the version of your app. This is needed to support the versionFile feature of Roosevelt's CSS preprocessor API.app [Object]: The Express app created by Roosevelt.parse(app, fileName) [Function]: Function to preprocess CSS.app [Object]: The Express app created by Roosevelt.filePath [String]: The path to the file being preprocessed.When a custom preprocessor is defined in this way it will override the selected preprocessor specified in css.compiler.module.This param can only set via Roosevelt's constructor, like this:(async () => {   await require('roosevelt')({     cssCompiler: app => {       return {         versionCode: app => {           // write code to return the version of your app here           // generally you should return a css variable with your app version         },         parse: (app, filePath) => {           // write code to preprocess CSS here           return {             css: 'write code to output css here',             sourceMap: 'write code to output source map here (optional)'           }         }       }     }   }).startServer() })()favicon [String]: Location of your favicon file. Default: \"none\".Will be set to \"images/favicon.ico\" in apps generated with the app generator.js [Object]: How you want Roosevelt to handle module bundling and minifying your frontend JS:sourcePath [String]: Subdirectory within staticsRoot where your JS files are located. By default this folder will not be made public, but is instead meant to store unminified JS source files which will be minified and written to the public folder when the app is started.[bundler name] [String]: Parameters related to bundling JS the specified bundler module:Values you can supply to [bundler name]:webpack: See Webpack site for more details about Webpack configuration.customBundler: Allows you to define your own custom bundler.Params you can pass to your chosen bundler:enable [Boolean]: Enable the bundler.bundles: [Array of Objects] Declare one or more JavaScript bundle files.env: [String] Bundle only in development or production mode.Accepted values:\"development\": Development mode.\"production\": Production mode.If no value is set, it will bundle in both modes.config: [Object or String] The config to send to the module bundler. Can also be a path to a config file relative to the app directory.customBundlerFunction: [Function] A custom async function to execute for this bundler instead of executing the default one supplied by Roosevelt. This param is required if your bundler is set to customBundler.Arguments provided:bundle: The bundle object supplied by Roosevelt.config: The config object after it has been postprocessed by Roosevelt.app: The Roosevelt app.verbose [String]: Enable verbose error handling.Accepted values:true: Will print verbose logs to the console.\"file\": Will print verbose logs to the console and write them to a file for debugging.Default when an app is created manually: [Object]{   \"sourcePath\": \"js\",   \"webpack\": {     \"enable\": false,     \"bundles\": [],     \"customBundlerFunction\": null   },   \"customBundler\": {     \"enable\": false,     \"bundles\": [],     \"customBundlerFunction\": null   },   \"verbose\": false }Default when an app is created with the app generator: [Object]{   \"sourcePath\": \"js\",   \"webpack\": {     \"enable\": true,     \"bundles\": [       {         \"config\": {           \"entry\": \"${js.sourcePath}/main.js\",           \"devtool\": \"source-map\",           \"output\": {             \"path\": \"${publicFolder}/js\"           },           \"resolve\": {             \"alias\": {               \"fs\": false,               \"path\": false             },             \"modules\": [\"${js.sourcePath}\", \"${publicFolder}/js\", \"${appDir}\", \"node_modules\"]           }         }       }     ],     \"customBundlerFunction\": null   },   \"customBundler\": {     \"enable\": false,     \"bundles\": [],     \"customBundlerFunction\": null   },   \"verbose\": false }If you're using webpack, Roosevelt will also postprocess your webpack config to do the following things:If your config does not set mode, then Roosevelt will set mode to development if Roosevelt is in development mode.If your config does not set devtool, then Roosevelt will set devtool to source-map if Roosevelt is in development mode.If Roosevelt's prodSourceMaps feature is enabled, then Roosevelt will set devtool to source-map if Roosevelt is in production mode.If your config does not set optimization, then Roosevelt will set optimization to the following:optimization = {   minimize: true,   minimizer: [     new TerserPlugin({       extractComments: false // disable LICENSE.txt file generation     })   ] }minify [Boolean]: Enables HTML and CSS minification. This feature is automatically disabled during development mode. Minification for JS files is handled by the js params above. Default: true.minifyHtmlAttributes [Object]: Settings to pass to minify-html-attributes.enable [Boolean or String]: Whether or not to enable minify-html-attributes.Available options:\"production\": Enable only in production mode.\"development\": Enable in all modes.true: Will be taken to mean \"production\".minifyHtmlAttributesParams: Params to pass to minify-html-attributes.Note: Roosevelt will always override 3 params from minify-html-attributes:htmlDir will always be set to Roosevelt's preprocessedViewsPath.cssDir will always be set to Roosevelt's preprocessedStaticsPath.jsDir will always be set to Roosevelt's preprocessedStaticsPath.Default: [Object]{   \"enable\": false,   \"minifyHtmlAttributesParams\": {} }prodSourceMaps [Boolean]: Enables source maps for minified CSS and JS files in production mode. Default: false.symlinks [Array of Objects]: Declare one or more symlinks to be generated at runtime. Default: [].source [String]: Path to be linked to.Roosevelt will not attempt to generate a symlink to a source path that does not exist.dest [String]: Path to place symlink.If this destination path already exists it will not be overwritten.Will be set to the following in apps generated with the app generator:[   {     \"source\": \"${staticsRoot}/images\",     \"dest\": \"${publicFolder}/images\"   } ]versionedPublic [Boolean]: If set to true, Roosevelt will prepend your app's version number from package.json to your public folder. Versioning your public folder is useful for resetting your users' browser cache when you release a new version. Default: false.Deployment optionshostPublic [Boolean]: Whether or not to allow Roosevelt to host the public folder. By default in production-proxy mode Roosevelt will not expose the public folder. It's recommended instead that you host the public folder through another web server, such as Apache or nginx that is better optimized for hosting static files. Default: false.localhostOnly [Boolean]: Listen only to requests coming from localhost in production mode. This is useful in environments where it is expected that HTTP requests to your app will be proxied through a more traditional web server like Apache or nginx. This setting is ignored in development mode. Default: true.shutdownTimeout [Number]: Maximum amount of time in milliseconds given to Roosevelt to gracefully shut itself down when sent the kill signal. Default: 30000 (30 seconds).Template literals in rooseveltConfig valuesAll config values support template literal style variable syntax that you can use to refer to other Roosevelt parameters. For example:{   \"css\": {     \"sourcePath\": \"css\",     \"output\": \".build/${css.sourcePath}\"   } }Resolves to:{   \"css\": {     \"sourcePath\": \"css\",     \"output\": \".build/css\"   } }EventsRoosevelt provides a series of events you can attach code to by passing a function to the desired event as a parameter to Roosevelt's constructor like so:(async () => {   await require('roosevelt')({     onServerStart: (app) => { /* do something */ }   }).startServer() })()Event listThese are sorted in order of when they are executed during the lifecycle of a Roosevelt app.onBeforeMiddleware(app): Fired when the app begins initializing, prior to any middleware being loaded into the app.app: The Express app created by Roosevelt.onBeforeControllers(app): Fired during initialization, prior to any routes being loaded.app: The Express app created by Roosevelt.onBeforeStatics(app): Fired during initialization, prior to any statics being written.app: The Express app created by Roosevelt.onClientViewsProcess(template): Fired to preprocess templates before being exposed to the client.template: A string containing a template written in any JS-based templating engine (e.g. Teddy, Pug, ejs, etc).onServerInit(app): Fired when the server is fully initialized and all middleware has been loaded but before the server has started.app: The Express app created by Roosevelt.onServerStart(app): Fired when the server starts.app: The Express app created by Roosevelt.onAppExit(app): Fired when the app recieves a kill signal.app: The Express app created by Roosevelt.Express variables exposed by RooseveltRoosevelt supplies several variables to Express that you may find handy. Access them using app.get('variableName').appDir: The directory the main module is in.appName: The name of your app derived from package.json. Uses \"Roosevelt Express\" if no name is supplied.appVersion: The version number of your app derived from package.json.controllersPath: Full path on the file system to where your app's controllers folder is located.clientControllersBundledOutput: Full path on the file system to where your app's client-exposed controllers folder is located.clientViewsBundledOutput: Full path on the file system to where your app's client-exposed views folder is located.cssCompiledOutput: Full path on the file system to where your app's minified CSS files are located.cssPath: Full path on the file system to where your app's CSS source files are located.debugMarkup: HTML you can add to your custom error pages if you define any that will print server errors if any exist, display the route list, and add some inline JavaScript that will serialize the request's err, req, and res objects so you can interactively examine them in the browser's developer tools. Only available in development mode.env: Either development or production.express: The Express module.expressSession: The express-session module Roosevelt uses internally. Session middleware.expressSessionStore: The session store instance used by express-session module Roosevelt uses internally.htmlPath: Full path on the file system to where your app's HTML static page source files are located.htmlRenderedOutput: Full path on the file system to where your app's rendered and minified static HTML files are located.httpServer: The http server created by Roosevelt.httpsServer: The https server created by Roosevelt.jsPath: Full path on the file system to where your app's JS source files are located.logger: The roosevelt-logger module Roosevelt uses internally. Used for console logging.modelsPath: Full path on the file system to where your app's models folder is located.package: The contents of package.json.params: The parameters you sent to Roosevelt.preprocessedStaticsPath or preprocessedStatics: Full path on the file system to where your app's preprocessed statics folder is located.preprocessedViewsPath or preprocessedViews: Full path on the file system to where your app's preprocessed views folder is located.publicFolder: Full path on the file system to where your app's public folder is located.roosevelt:state: Application state, e.g. disconnecting if the app is currently being shut down.router: Instance of router module used by Roosevelt.routePrefix: Prefix appended to routes via the routePrefix param. Will be '' if not set.routes: List of all routes in the app.staticsRoot: Full path on the file system to where your app's statics folder is located.view engine: Default view engine file extension, e.g. .html.viewEngine e.g. teddy by default: Any view engine(s) you define will be exposed as an Express variable. For instance, the default view engine is teddy. So by default app.get('teddy') will return the teddy module.viewsPath or views: Full path on the file system to where your app's views folder is located.Additionally the Roosevelt constructor returns the following object:expressApp [Object]: The Express app created by Roosevelt.initServer(callback) or init(callback) [async Function]: Starts the HTML validator, sets up some middleware, runs the CSS and JS preprocessors, and maps routes, but does not start the HTTP server. Call this method manually first instead of startServer if you need to setup the Express app, but still need to do additional setup before the HTTP server is started. This method is automatically called by startServer once per instance if it has not yet already been called. Takes an optional callback.startServer() or start() [async Function]: Calls the listen method of http, https, or both (depending on your configuration) to start the web server with Roosevelt's config.stopServer(params) or stop(params) [Function]: Stops the server from accepting new connections before exiting and takes an optional argument stopServer({ persistProcess: true }) which will allow the process to remain active after the server has closed.Recognized environment variablesThe following is a list of environment variables that Roosevelt listens for.NODE_ENV:Set to production to force the app into production mode.Set to development to force the app into development mode.NODE_PORT: Default HTTPS port to run your app on.Will set HTTP port instead if HTTPS is disabled.HTTP_PORT: Default HTTP port to run your app on. Takes precedence over NODE_PORT.HTTPS_PORT: Default HTTPS port to run your app on.DISABLE_HTTPS: When set to true, the HTTPS server will be disabled and the app will revert to HTTP regardless of what is set in the rooseveltConfig.MAKE_BUILD_ARTIFACTS: Lets you set Roosevelt's makeBuildArtifacts param via environment variable.Environment variable precedence:Environment variables supersede your app's rooseveltConfig.Environment variables can be overridden with command line arguments.Command line usageAvailable npm scriptsRoosevelt apps created with the app generator come with the following notable npm scripts prepopulated in package.json:npm run production: Runs the app in production mode.Default shorthands:npm run prodnpm run pnpm startScript is short for: nodemon app.js --production-modenpm run development: Runs the app in development mode.Default shorthands:npm run devnpm run dScript is short for: nodemon app.js --development-modenpm run production-proxy: Runs the app in production mode, but with localhostOnly set to true and hostPublic set to false. This mode will make it so your app only listens to requests coming from localhost and does not serve anything in the public folder. This mode is useful when you want to host your app behind a reverse proxy from a web server like Apache or nginx and is considered a best practice for Node.js deployments.Default shorthands:npm run prodproxynpm run xScript is short for: nodemon app.js --production-proxy-modenpm run generate-certs: Generates self-signed HTTPS certs for your app.Script is short for: node ./node_modules/roosevelt/lib/scripts/certsGenerator.jsSupports command line flags --appDir somewhere --secretsPath somewhere to override those default locations.npm run generate-session-secret: Generates a secret key for the express-session module.Script is short for: node ./node_modules/roosevelt/lib/scripts/sessionSecretGenerator.jsSupports command line flags --appDir somewhere --secretsPath somewhere to override those default locations.npm run generate-secrets: Runs the above three scripts.Supports command line flags --appDir somewhere --secretsPath somewhere to override those default locations.Available command line argumentsnode app.js --production-mode: Runs the app in production mode.Default shorthands:--prod-pnode app.js --development-mode: Runs the app in development mode.Default shorthands:--dev-dnode app.js --build: Only runs the build scripts and doesn't start the app.Default shorthands:-bnode app.js --jsbundler=verbose: Prints verbose errors from the JS bundler to the console.Default shorthands:--jsb=verbose-j=verbosenode app.js --jsbundler=verbose-file: Prints verbose errors from the JS bundler to the console as well as write a jsBundlerError.txt file to the app's root directory containing the full error.Default shorthands:--jsb=verbose-file-j=verbose-filenode app.js --production-proxy-mode: Runs the app in production mode, but with localhostOnly set to true and hostPublic set to false. This mode will make it so your app only listens to requests coming from localhost and does not serve anything in the public folder. This mode is useful when you want to host your app behind a reverse proxy from a web server like Apache or nginx and is considered a best practice for Node.js deployments.Default shorthands:--prodproxy-xnode app.js --enable-validator: Forces the HTML validator to be enabled.Default shorthands:--html-validator-hnode app.js --disable-validator: Forces the HTML validator to be disabled.Default shorthands:--raw-rCombining npm scripts and command line argumentsThe npm scripts can be combined with the command line flags.For example, running npm run dev -- --disable-validator will run your app in development mode and force the HTML validator to be disabled."})
window.siteTexts.push({file: "docs/0.31.1/deployment/index.html", title: "deployment (0.31.1)", text: "If you want to deploy a Roosevelt multi-page app or single-page app live to the internet, there are some things you should do to harden it appropriately if you expect to take significant traffic.Run the app behind a reverse proxy and use all the CPU coresTo do this, use the production-proxy-mode command line flag and run the process on multiple cores using a tool like pm2.Then host your app behind a reverse proxy from a web server like Apache or nginx, which is considered a best practice for Node.js deployments.Running the app in production-proxy mode runs the app in production mode, but with localhostOnly set to true and hostPublic set to false. This mode will make it so your app only responds to requests coming from the proxy server and does not serve anything in the public folder. You will then need to serve the contents of the public folder directly via Apache or nginx.Use HTTPSSetting up HTTPS can be tricky to configure properly especially for novices, so it can be tempting not do it to simplify deployment, but your website won't be seen as professional if it isn't served up via HTTPS. It's worth the effort to set it up.Use a caching service or a database to store sessionsRoosevelt's default session store for express-session works great if your app only needs a single process, but if you're spreading your app across multiple processes or servers, you will need to reconfigure express-session to use a caching service that supports replication like redis or a database that supports replication like PostgreSQL in order to scale your app.Use Roosevelt's static site generator instead if you canNot all sites need to execute logic dynamically on the backend. If you can get away with making a site using a static site generator, then that will dramatically simplify deployment. rooseveltframework.org is itself a static site generated with Roosevelt's static site generator, and you can view its source code here."})
window.siteTexts.push({file: "docs/0.31.1/get-started/index.html", title: "get started (0.31.1)", text: "🧸 roosevelt PrerequisitesFirst you will need to install Node.js. Both the current and LTS version of Node.js are supported. It is recommended that you have both the current and LTS versions of Node.js installed on your system. To do that, it is recommended that you install Node.js using a Node.js version manager like nvm or nvm-windows rather than the official installer, as a version manager will allow you to switch between multiple versions of Node.js easily.Make a Roosevelt app🏭🧸 mkroosevelt The simplest way to make a Roosevelt app is to simply run the following command:npx mkrooseveltThen follow the prompts to decide whether to make a multi-page app, static site generator, or a single page app.Other ways to make Roosevelt apps🏭🧸 generator-roosevelt What the mkroosevelt command does under the hood is call the Roosevelt app generator, a command line script based on Yeoman, to create a sample Roosevelt app for you. You could also install the app generator to your system if you like. To do that, first globally install Yeoman and the Yeoman-based Roosevelt app generator:npm i -g yo generator-rooseveltThen create a Roosevelt app using the Roosevelt app generator:yo rooseveltThen follow the prompts.Create a Roosevelt app manuallyIt is also possible to create a Roosevelt app without using the app generator. This will result in a more minimalist default configuration (e.g. no CSS or JS preprocessors enabled by default).To do that:First create a new folder and cd into it.Then npm i roosevelt. This will create a node_modules folder with Roosevelt and its bare minimum dependencies.Create a file named app.js.Put this code in app.js:(async () => {   await require('roosevelt')({     makeBuildArtifacts: true   }).startServer() })()Then node app.js. If the makeBuildArtifacts parameter is set to true like the above code example, an entire Roosevelt app with bare minimum viability will be created and the server will be started.Default directory structureBelow is the default directory structure for an app created using the Roosevelt app generator.Application logicapp.js or build.js: Entry point to your application. Feel free to rename this, but make sure to update package.json's references to it. It defaults to app.js when building a multi-page app or a single page app. It defaults to build.js when building a static site generator.lib: A folder for any includable JS files that don't belong in any of the other directories. It has been added to the require stack so you can simply require('lib/someFile').mvc: Folder for models, views, and controllers.controllers: Folder for controller files; the \"C\" in MVC. This is where your HTTP routes will go.models: Folder for model files; the \"M\" in MVC. This is where you will get data to display in your views e.g. by querying a database or do other business logic.views: Folder for view files; the \"V\" in MVC. This is where your HTML templates will go.Static filesstatics: Folder for source CSS, image, JS, and other static files. By default some of the contents of this folder are symlinked to the public folder, which you can configure via params.css: Folder for source CSS files.images: Folder for source image files.js: Folder for source frontend JS files.pages: Folder for HTML templates that get rendered as static pages and deposited into the public folder.Build artifacts.build: Folder for build artifacts.preprocessed_statics: Static files that have been preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled.preprocessed_views: View files that have had their uses of web components progressively enhanced using the progressively-enhance-web-components module and/or preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled.The output JS files from the clientControllers or clientViews features.public: All contents within this folder will be exposed as static files. For the most part, the contents of this folder will be populated from the statics folder. This folder is added to .gitignore by default because it is considered a build artifact.Application infrastructure.gitignore: A standard file which contains a list of files and folders to ignore if your project is in a git repo. Delete it if you're not using git. The default .gitignore file contains many common important things to ignore, however you may need to tweak it to your liking before committing a fresh Roosevelt app to your git repo.node_modules: A standard folder created by Node.js where all modules your app depends on (such as Roosevelt) are installed to. This folder is created when installing dependencies using the npm i command. It is added to .gitignore by default because it is considered a build artifact.package.json: A file common to most Node.js apps for configuring your app.package-lock.json: An auto-generated file common to most Node.js apps containing a map of your dependency tree. This is created after you run npm i for the first time. Once the file exists within your project, you can run npm ci instead of npm i when installing dependencies, which will be more performant and will result in reproducible builds that always have the same versions of every dependency, including downstream dependencies.rooseveltConfig.json: Where your Roosevelt config is stored and what your params are set to. These values can be overridden when calling Roosevelt's constructor.secrets: A folder for \"secret\" files, e.g. session keys, HTTPS certs, passwords, etc. It is added to .gitignore by default because it contains sensitive information, so it should not be committed to git."})
window.siteTexts.push({file: "docs/0.31.2/changelog/index.html", title: "changelog (0.31.2)", text: "0.31.2Fixed bug that caused cookie parser to not load under certain circumstances.Updated dependencies.0.31.1Changed expressSession default to true so that csrfProtection's default being true will actually function.Updated dependencies.0.31.0Breaking: npm run generate-csrf-secret script removed, as it is no longer necessary due to an internal switch of Roosevelt's CSRF dependency from csrf-csrf to csrf-sync. You should delete any csrfSecret.json files in your secrets directory after upgrading Roosevelt, as the file is no longer needed. You should also remove the npm run generate-csrf-secret from your package.json.Added expressVersion param which lets you decide which version of Express to use. Choose between either 4 or 5. This option exists because there are significant differences between Express 4 and Express 5. Default: 5.Added glob pattern support to CSRF route exemption param.Removed enableCLIFlags param which has been obsolete for some time and didn't actually do anything.Changed the deprecation checker to only run in development mode and added a new param deprecationChecks that will let you disable it entirely.Updated dependencies.0.30.7Added new onBeforeControllers event.Added new html.folderPerPage param.Made it easier to debug HTML validation errors on static sites.Fixed bugs associated with the stopServer() method.Fixed bugs associated with using a roosevelt.config.json file in your app.Fixed a bug that could cause middleware errors not to flow through the middleware stack correctly.Copyedited documentation significantly.Updated dependencies.0.30.6Added onBeforeStatics event.Altered makeBuildArtifacts log to be a warning.Fixed writing JS file log to be properly classified as info instead of log.Fixed a bug that could cause the static site generator to not write new files even if the file has changed.Updated dependencies.0.30.5Added error handling for if you supply Roosevelt constructor params to initServer or startServer.Fixed bugs that could cause initServer, startServer, and stopServer to not be properly awaitable.Fixed bug that would cause undefined to print on error pages in Roosevelt apps without a package.json version defined.Updated dependencies.0.30.4Fixed bugs that prevented CSS source maps from working correctly.Updated dependencies.0.30.3Fixed model overriding precedent in static site generator.0.30.2Fixed a crash associated with the default catch-all route.0.30.1Fixed a bug that caused two catch-all routes to appear in the router stack.Updated dependencies.0.30.0Breaking: Upgraded to Express 5.x.To migrate:Most Roosevelt apps probably only need to change * routes to *all.Apps that use more complex routing may need other changes.Full list of considerations for migrating to Express 5: https://expressjs.com/en/guide/migrating-5.htmlAdded expressSessionStore Express variable, which is the session store instance used by express-session module Roosevelt uses internally.Added support for catch-all * in static site generator model definitions.Updated dependencies.0.29.5Added new copy param that will copy files from a source location to a destination location.Added new feature to integrated webpack bundler to disable LICENSE.txt generation by default. This can be overridden by supplying your own optimization param to your webpack config.Improved docs.Updated dependencies.0.29.4Added first-line comment blocklist support to the static site generator.Added static site generator folder to the require module path.Added async/await support for static site models.Updated dependencies.0.29.3Fixed a bug that could cause some routes not to load.Fixed a bug that could cause more than one * route to end up in the router stack.Updated dependencies.0.29.2Fixed a bug that would cause MAKE_BUILD_ARTIFACTS to supersede the --build CLI flag.Fixed a bug that would cause an error to falsely print about not being able to create symlinks.Updated dependencies.0.29.1Fixed bugs associated with MAKE_BUILD_ARTIFACTS sometimes not working properly.Updated dependencies.0.29.0Breaking: Moved default output location for clientControllers and clientViews to the .build folder.To migrate your app, you will likely need to change js.webpack.bundles.config.resolve.modules to replace any entry that has \"${publicFolder}/js\" with \"${buildFolder}/js\".Breaking: Changed default of preprocessedViewsPath param from \".build/.preprocessed_views\" to \".build/preprocessed_views\" and changed default of preprocessedStaticsPath param from \".build/.preprocessed_statics\" to \".build/preprocessed_statics\".Added buildFolder param to customize the name of the .build folder.Altered output of controllersBundler and viewsBundler feature to produce files that are easier to read.Updated dependencies.0.28.1Fixed a bug where HTTPS certs wouldn't always automatically generate when they should.Updated various dependencies.0.28.0Breaking: Removed config auditor feature.Added more checks to the deprecation checker.Updated dependencies.0.27.0Breaking: Changed http/s param structure:Changed port param to http.port and changed the default to 43763.Changed https.port param default to 43711.Removed https.force param. Non-secure http can now be disabled via http.enable being set to false.Removed authInfoPath, passphrase, caCert, requestCert, and rejectUnauthorized params. Replaced them with options where you can pass any native option.The ca, cert, key, and pfx params can take file paths relative to your secretsDir in addition to everything else natively supported (strings, buffers, and arrays of strings or buffers).The file paths get resolved within arrays if you pass arrays to any of those as well.These collective changes mean most Roosevelt apps will need to alter their Roosevelt configs from something that looks like:\"port\": 19679, \"https\": {   \"enable\": true,   \"port\": 19679,   \"force\": true,   \"authInfoPath\": {     \"authCertAndKey\": {       \"cert\": \"cert.pem\",       \"key\": \"key.pem\"     }   } },To be something like this instead:\"http\": {   \"enable\": false }, \"https\": {   \"enable\": true,   \"port\": 19679,   \"options\": {     \"cert\": \"cert.pem\",     \"key\": \"key.pem\"   } },Breaking: Changed behavior of NODE_PORT environment variable to now set https port when https is enabled and fall back to http if https is disabled.Breaking: Moved the versioning of webpack from Roosevelt itself to the app. You will need to declare webpack as a dependency in your app if you intend to use the JS bundler feature in Roosevelt.Breaking: Changed js.webpack.bundles.env param to require values development or production instead of dev or prod.Breaking: Changed js.webpack.bundles.verbose param to js.verbose.Breaking: Changed --webpack, --wp, and --w CLI flags to --jsbundler, --jsb, and --j respectively.Breaking: Changed default of preprocessedViewsPath param from 'mvc/.preprocessed_views' to '.build/.preprocessed_views' and changed default of preprocessedStaticsPath param from '.preprocessed_statics' to '.build/.preprocessed_statics'. Collectively these changes mean most Roosevelt apps should remove .preprocessed_views and .preprocessed_statics from .gitignore and add .build instead.Added new param js.customBundler that will let you define a custom JS bundler.Added new param js[bundler].customBundlerFunction that will let you define custom behavior for default supported JS bundlers like Webpack.Updated dependencies.0.26.1Added new Express variable debugMarkup that contains HTML you can add to your custom error pages if you define any that will print server errors if any exist, display the route list, add some inline JavaScript that will serialize the request's err, req, and res objects so you can interactively examine them in the browser's developer tools. Only available in development mode.Added the aforementioned debug markup to the default error pages in development mode as well.Added routes Express variable which will list all routes in the app.Added new recognized environment variable: MAKE_BUILD_ARTIFACTS will allow you to set Roosevelt's makeBuildArtifacts config.Added new param minifyHtmlAttributes: Settings to pass to minify-html-attributes.Options:enable: Whether or not to enable minify-html-attributes.Default: [Boolean] false.Available options:'production': Enable only in production mode.'development': Enable in all modes.true: Will be taken to mean 'production'.minifyHtmlAttributesParams: Params to pass to minify-html-attributes.Default: [Object] {}Default: [Object]{   \"enable\": true,   \"minifyHtmlAttributesParams\": {} }Note: Roosevelt will always override 3 params from minify-html-attributes:htmlDir will always be set to Roosevelt's preprocessedViewsPath.cssDir will always be set to Roosevelt's preprocessedStaticsPath.jsDir will always be set to Roosevelt's preprocessedStaticsPath.Added new param preprocessedStaticsPath: Relative path on filesystem to where your preprocessed static files will be written to. Preprocessed static files are view files that have been preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled.Default: [String] \".preprocessed_statics\".This feature will only be active if minifyHtmlAttributes is enabled.Replaced isomorphicControllers param with clientControllers param and made it function similarly to clientViews.Fixed a bug with displaying app version on default error pages.Fixed a bug that could lead to a counter-intuitive error if your template rendered an empty response in dev mode.Updated various dependencies.0.26.0Breaking: Added new param preprocessedViewsPath: Relative path on filesystem to where your preprocessed view files will be written to. Preprocessed view files are view files that have had their uses of web components progressively enhanced using the progressively-enhance-web-components module.Default: [String] \"mvc/.preprocessed_views\".To disable this feature, set the value to false.This is breaking because if you leave it enabled by default (recommended), you will need to add .preprocessed_views to your .gitignore.Breaking: Switched to external source maps for the CSS preprocessor. This necessitated changing the custom CSS preprocessor API to require returning an object instead of a string.If you have written a custom CSS preprocessor, the new return value is:return {   css: 'write code to output css here',   sourceMap: 'write code to output source map here (optional)' }Added new param prodSourceMaps to allow source maps to be generated in prod mode for both CSS and JS.Added IP address to the output when the server starts.Added new CLI script secretsGenerator.js that allows you to combine certsGenerator.js, csrfSecretGenerator.js, and sessionSecretGenerator.js into one command.Added feature to override appDir and secretsPath for the CLI scripts using --appDir somewhere and --secretsPath somewhere CLI flags.Added exceptionRoutes option to the frontendReload param.Added a check for broken symlinks in the public folder, which will be purged if any exist.Added support for placing your Roosevelt config in a roosevelt.config.json file in addition to the previous options.Added better error when attempting to start a Roosevelt app on a file system that does not support symlinks.Changed source maps from inline to external.Fixed a bug that caused the JS bundler to not log when it was writing JS files.Fixed a bug that caused a statics/pages directory being created when it isn't needed.Fixed a bug that could cause the public folder and statics folder to be created even when makeBuildArtifacts is disabled.Fixed a bug that caused the views bundler and isomorphic controllers finder to write a new views bundle to disk even when it wasn't needed.Fixed frontendReload not working in Firefox with the default HTTPS config.Updated various dependencies.0.25.0Breaking: Supplying an allowlist to the views bundler will now implicitly disable exposeAll.Breaking: Renamed secretsDir param to secretsPath.Updated all file path express variables to include full absolute paths.Fixed various bugs in the views bundler feature.Fixed a rare bug where CSRF and session secrets could be written to the wrong directory.Fixed a bug where HTTPS certs could be automatically generated when they shouldn't be.Updated various dependencies.0.24.0Breaking: Altered startServer and initServer methods to now be async. They now need to be awaited to avoid possible race conditions.As a result, starting the app in a single line needs to be updated to await (require('roosevelt').startServer()).Callback arguments have been removed from these methods as well.Breaking: Removed app.get('routes'), onReqAfterRoute, onReqBeforeRoute, onReqStart, and onStaticAssetsGenerated.Breaking: Renamed app.httpServer to app.get('httpServer') and app.httpsServer to app.get('httpsServer').Breaking: Added enable param to clientViews. If your app uses the clientViews feature, you will need to add this param to continue using the feature.Added new method onBeforeMiddleware.Added start and stop method shorthands for startServer and stopServer respectively.Refactored various things under the hood to improve code quality, performance, and reduce unnecessary dependencies.Updated various dependencies.0.23.2Removed toobusy feature since it is temperamental and the dependency is no longer maintained.Refactored internal wildcardMatch to use minimatch under the hood.Replaced html-minifier with html-minifier-terser since html-minifier-terser is better-maintained.Updated various dependencies.0.23.1Added feature that scans the router stack to move the 404 route (the * route) to the end of the stack every time a new route is added, even if the route is added at runtime so that you can dynamically add routes while the app is running.Updated various dependencies.0.23.0Removed cores feature since it is largely redundant now thanks to the widespread popularity of tools like pm2. Also removed various deprecated cluster module support as well.Updated various dependencies.0.22.16Made it possible to disable helmet by setting the helmet param to false.Updated various dependencies.0.22.15Added option to exempt certain routes from CSRF protection.Updated various dependencies.0.22.14The JS bundler will now add mode: \"development\" and devtool: \"source-map\" automatically to your Webpack bundles in development mode.Updated various dependencies.0.22.13Altered helmet's defaults again. The form-action directive has been set to null. This makes it possible to submit forms to other domains in production mode.0.22.12Added 'unsafe-inline' option to helmet's Content-Security-Policy's script-src directive by default in Roosevelt. This will prevent inline scripts from being blocked in production mode.Updated various dependencies.0.22.11Added DISABLE_HTTPS environment variable which when set to true, the HTTPS server will be disabled and the app will revert to HTTP regardless of what is set in the rooseveltConfig.Updated various dependencies.0.22.10Enabled WAL in the SQLite instance used for session storage by default.Updated various dependencies.0.22.9Fixed an issue with cert generation from CLI scripts properly this time.0.22.8Fixed an issue with cert generation from CLI scripts.Updated various dependencies.0.22.7Added a max age to the default express-session configuration.Fixed an issue with cert generation in production mode.Updated various dependencies.0.22.6Fixed a bug that caused self-signed certs to get regenerated every time the app restarted.Updated various dependencies.0.22.5Certs generator will now run in production mode as well if https is enabled and if the files do not already exist. This behavior can be suppressed by setting https.autoCert to false.Fixed bug that prevented the static site generator feature from working in dev mode when the HTML validator was enabled.Fixed README formatting typos.Updated various dependencies.0.22.4Made it possible to set expressSession to true which will set a sane default config so you don't have to spell one out.0.22.3Updated default session store to use SQLite instead of an in-memory database so that sessions are not invalidated when the server restarts.Updated various dependencies.0.22.2Fixed a bug that caused self-signed certs to get regenerated every time the app restarted.Updated various dependencies.0.22.1Exposed the express-session middleware for use in Roosevelt apps.Updated various dependencies.0.22.0Breaking: Added a unified secrets directory for various app secrets such as HTTPS certs, session secret, CSRF secret, etc. The name of the directory is configurable, but when upgrading an app from the previous version, you may need to alter your rooseveltConfig to remove directories from your cert or key paths. You must now specify only a file name in those params.Added support for express-session for session support.Added CSRF protection.Improved dev sync script for developing Roosevelt significantly.Updated various dependencies.0.21.16Fixed an issue that could cause the server to start before all the controller routes were loaded.Updated various dependencies.0.21.15Updated various dependencies.0.21.14Updated various dependencies.0.21.13Certs will be auto-generated in dev mode now if they don't exist.Various dependencies updated.0.21.12Fixed isomorphic controllers bundler webpack bug in Windows.Various dependencies updated.0.21.11Added a new --build CLI flag that will instruct Roosevelt to just build the build artifacts but not start the server.Added new onStaticAssetsGenerated event that is fired when the server finishes init but before the server starts.Fixed an issue that would cause the server to start even when makeBuildArtifacts is set to staticsOnly. This has the side effect of causing serverStart() to revert to the behavior of init() if makeBuildArtifacts is set to staticsOnly.Fixed a bug that would cause roosevelt-router to produce a false negative when detecting teddy.Various dependencies updated.0.21.10Added --webpack=verbose and --wp=verbose-file CLI flags to make it easier to see verbose webpack errors. Available shorthands: --wp and -w.Added detection of undefined template literal variables (e.g. via typo) in rooseveltConfig.Added more helpful error if starting an app with broken symlinks.Various dependencies updated.0.21.9Fixed frontend reload when https is enabled with self-signed certs.Removed parent-require dependency.Added new dev_sync.sh to make writing code for Roosevelt easier. See instructions on how to use it in the README.Various dependencies updated.0.21.8Added wildcard matching to views bundler feature.Fixed bug that could cause build artifact generation to crash starting the app.Various dependencies updated.0.21.7Fixed CSS preprocessor breaking on Windows when using the default configuration in a newly generated app.Various dependencies updated.0.21.6The certs-generator script's default name has been changed to generate-certs. The config auditor will now expect it to be named that.The config-audit script's default name has been changed to audit-config. The config auditor will now expect it to be named that.allowlist in CSS preprocessor now supports wildcard matching, e.g. dir/*.Various dependencies updated.0.21.5allowlist and blocklist in static site generator feature now supports wildcard matching, e.g. dir/*.Various dependencies updated.0.21.4Added allowlist and blocklist to the static site generator feature.Fixed bug with the static site generator feature that required absolute paths for including child templates in a main template.Various dependencies updated.0.21.3When versionedPublic is true, Roosevelt will no longer deposit static HTML pages into the versioned directory.Various dependencies updated.0.21.2Fixed bug where the config auditor would complain about the makeBuildArtifacts param being set to string.Static site generator will now run the HTML validator against rendered templates in dev mode only.Various dependencies updated.0.21.1Static site generator can now be supplied models by file instead of by configuration. If model data is not supplied by configuration, Roosevelt will try to automatically load a model from a JS file with the same name alongside the template if it exists instead.Static site generator will now run the HTML validator against rendered templates.Bumped CI Node versions.0.21.0Breaking: htmlMinifier param renamed and expanded to html. You will need to update your Roosevelt config.Added feature html.sourcePath, html.models, and html.output which lets you generate static HTML pages from the your statics directory by compiling them with a view engine and depositing the output to the public folder at start time.Fixed issue with symlinks that would cause symlinking to a file rather than a directory to fail in Windows.Some error message copyediting.Some minor refactoring and documentation fixes.Various dependencies updated.0.20.1makeBuildArtifacts will now accept a new value of 'staticsOnly' which will allow Roosevelt to create static files but skip the creation of the MVC directories.initServer can now also be called as init instead.Various dependencies updated.0.20.0Breaking: Renamed generateFolderStructure to makeBuildArtifacts.Various dependencies updated.Breaking: Among them, formidable was updated which is a breaking change for any app that takes file uploads as property names in req.files have been renamed, most notably file.path is now file.filepath and file.name is now file.originalname.Removed checkDependencies.0.19.14Fixed bug that required admin permissions to start an app in Windows.0.19.13Added script to generate self-signed HTTPS certs:npm run certs-generator: Generates self-signed HTTPS certs for your app.Default shorthand:npm run cScript is short for: node ./node_modules/roosevelt/lib/scripts/certsGenerator.jsSome refactoring.Various dependencies updated.0.19.12Various dependencies updated.Migrated colors to @colors/colors.0.19.11Fixed bug that caused isoRequire to only work with absolute paths.Various dependencies updated.0.19.10Added roosevelt-router feature to improve support for writing isomorphic code for SPAs.Added isomorphicControllers config option that will permit Roosevelt to make a list of all your controller files that can be used client-side as well so they can be auto-loaded client-side too.Altered clientViews such that the template list will lack file extensions if the file extension of the template matches the default view engine's file extension.Breaking: Default clientViews output bundle changed from bundle.js to views.js.Fixed confusing console warning.HTML validator frontend scripts moved to <head>.Various dependencies updated.0.19.9Made Webpack errors less verbose.Various dependencies updated.0.19.8Updated for support for Node 16.x. This required a migraiton from node-sass to dart-sass.Dropped official Node 15 support, though it will probably still work. Node 14 remains officially supported.Various dependencies updated.0.19.7clientViews allowlist now allows directories.Default command line flags and environment variables recognized by Roosevelt can now be overridden via source-configs.Various dependencies updated.0.19.6Added onAppExit event.Fixed bug with https feature.Various dependencies updated.0.19.5Fix for Node 15 / npm 7 regression. Config auditor and deprecation checker will no longer run as postinstall scripts to compensate for INIT_CWD being removed from npm. These checks will be run exclusively on application first run instead (or any time the public folder is removed). (Closes https://github.com/rooseveltframework/roosevelt/issues/975)Dropped Node 12 support.Various dependencies updated.0.19.4Fixed bug that caused Roosevelt to not listen to NODE_ENV.Moved symlink creation to a separate step and made happen earlier in the app initialization process to maek it easier to work with the various Roosevelt server starting events.Various dependencies bumped.0.19.3Fixed bug which could cause CSS preprocessor to fail if there are subdirectories in your CSS folder.Various dependencies bumped.0.19.2Breaking: clientViews no longer exports a function, instead exporting a JSON object.Breaking: clientViews will no longer minify templates by default.Fixed bug with clientViews exposeAll feature that would cause it to scoop up any system files that might be present in your views directories.Fixed bug with clientViews blocklist mistakenly defaulting to an object instead of an array which could cause crashes in some configurations.Fixed bug with CSS preprocessor that would cause it to scoop up any system files that might be present in your CSS directories.Various dependencies bumped.0.19.1Added ability to configure helmet dependency.Fixed bug that caused frontend reload not to work.Fixed a bug in the Express env variable that would cause it to be incorrectly set at times.Updated some out of date into in the README.Removed some unnecessary code.Various dependencies bumped.0.19.0Breaking: Production mode behavior changed significantly:localhostOnly and alwaysHostPublic defaults were flipped to false and true respectively.alwaysHostPublic was renamed to hostPublic.The --host-public command line flag was removed, since it is no logner needed because hostPublic defaults to true now.New command line flag added called production-proxy to let you opt-in to localhostOnly and alwaysHostPublic being set to true and false respectively as before.Various dependencies bumped.0.18.3You can now use PHP as your templating engine in a Roosevelt app or any other Express application. PHP should be faster than any JS-based templating engine for complex templates since its parser is written in C rather than JS.Breaking: blacklist/whitelist params throughout the API have been renamed to blocklist/allowlist.README was copyedited to improve the clarity of the default behaviors of some of the API, remove outdated information, and other small improvements.The host-public warning was made more prominent so that production mode default behavior regarding statics is less confusing to people.CI improvements.Breaking: Roosevelt is no longer tested on Node 10.x. We didn't do anything to explicitly break older Node versions, but use at your own risk.Various dependencies bumped.0.18.2Added helmet middleware to improve security by default.Replaced body-parser middleware with native Express integration.Various dependencies bumped.0.18.1Changed passphrase option from https.p12.passphrase to https.passphrase so it can be used for certAndKey configurations as well.CI improvements.Various dependencies bumped.0.18.0Replaced the vnu-jar based HTML validator with express-html-validator 🎉.Roosevelt no longer does any background process management as a result.Moved all developer facing dependencies to optionalDependencies.They can be omitted from installion when using npm i --no-optional.Refactored frontend reload implementation.check-dependencies now only runs in dev mode.API changes:Removed separateProcess from htmlValidator.Removed port from htmlValidator.Removed showWarnings from htmlValidator.Added validatorConfig to htmlValidator which respresents a set of rules for the validator to check for.Rules can also be set in a .htmlValidate.json placed in the app root.Removed verbose from frontendReload.These logs are now controlled by the general verbose logging param.Removed ROOSEVELT_VALIDATOR environment variable.Removed ROOSEVELT_AUTOKILLER environment variable.Removed --attach-validator and -a cli flags.Removed --background-validator and -b cli flags.Removed --disable-validator-autokiller, --no-autokiller, and -n cli flags.Removed --enable-validator-autokiller, --html-validator-autokiller, and -k cli flags.Removed dependencies:execafkillhtml-validatorprismjsps-nodetampervnu-jarVarious dependencies bumped.0.17.1Fixed a CSS bug where CSS files were still not being written due to a file existence check.Fixed a CSS bug where empty CSS files were being written because their LESS equivalent would never generate CSS in that particular file.Various dependencies bumped.0.17.0Breaking: Replaced staticsSymlinksToPublic with symlinks.Breaking: Replaced routers param with a simplified routePrefix param which defines a subfolder to mount the app to.Breaking: Renamed multipart param to formidable.Added ability to configure Roosevelt via a rooseveltConfig.json config file placed in app root instead of from a rooseveltConfig object in package.json.Added router Express variable that opens up access to internally used router instance.Added routePrefix Express variable that exposes currently used routePrefix or an empty string if not used.Fixed bug where changes to CSS files were not being written to the output directory.Refactored internal fsr module.Updated internal usage of formidable API.Internal changes to stabilize the automated tests.Various dependencies bumped.0.16.2Added deprecation check for old compiler sub modules.Various dependencies bumped.0.16.1Stopped the config auditor from complaining about obsolete scripts.Fixed cases where some CLI flags weren't being applied to config.Test fixes.Various dependencies bumped.0.16.0Replaced browserify with webpack. This has significant breaking API changes. You will need to totally rewrite your JS bundles from browserify bundles to webpack bundles to upgrade to this version of Roosevelt. It is also recommended that you remove all references to old build artifacts such as .build and .bundled in your application as well from package.json, .gitignore, etc.Eliminated concept of separate JS compilers in favor of declaring this via your webpack config. Note: webpack defaults to minifying JS using terser.Eliminated concept of CSS preprocessor middleware modules in favor of built-in support for LESS, Sass, and Stylus. Other CSS preprocessors can be used as well with a bit of extra configuration.API changes:Removed symlinkToPublic, compiler, output, whitelist, and blacklist params from js.Replaced js.bundles with js.webpack.Removed css.symlinkToPublic.Replaced css.compiler.params.cleanCSS with css.minifier.Added css.compiler.enable.Replaced css.compiler.nodeModule with css.compiler.module.Replaced css.compiler.params with css.compiler.options.css.output is now relative to publicFolder instead of staticsRoot.clientViews.output is now relative to publicFolder instead of staticsRoot.Removed cleanTimer (Obsolete in absense of .build).App cleaner has been removed.source-configs integration is now more tightly knit.Config auditor no longer complains about missing params.Auditor now checks config params on a case-by-case basis.ES6 style variables can now be used in rooseveltConfig referencing other rooseveltConfig entries.Introduced views bundler: An API that allows you to expose view code to frontend JS for client-side templating.Added a button to the validation error page to display the page anyway and another button to disable the validator entirely until the server restarts.Fixed bug with frontend reload causing it to inject the script tag in the wrong location in some situations.Fixed bug where router would cause app routes to fail when no controller files exist.Fixed bug where auto build scanner would crash the app when generateFolderStructure is false.Fixed bug which resulted in a cryptic error if a Roosevelt app was moved to another directory.Fixed bug where symlink failed errors would appear when generateFolderStructure is false.Complete rewrite of HTML validator and related helper scripts.Refactored multipart middlware.Various dependencies bumped.CI improvements.Many rewritten tests.0.15.1Fixed bug causing apps to crash in dev mode.Various dependencies bumped.0.15.0Moved CSS minification from roosevelt-less to Roosevelt using clean-css as a direct dependency. The clean-css library had an update with breaking changes so the rooseveltConfig params in advanced and aggressiveMerging in cleanCSS are now outdated.New default script npm run proddev: Runs the app in production mode, but with the public folder hosted by the Roosevelt app. This is useful for doing development in production mode without having to stage a complex simulation of your production environment, which would likely include hosting static files via another web server better-suited to serving statics like Apache or nginx.Roosevelt now sources configs internally using source-configs.Validator will now be disabled if HTTP_PROXY or HTTPS_PROXY are set but localhost is not in NO_PROXY.Fixed a bug where not having devDependencies or dependencies objects in your app's package.json would throw errors when installing dependencies. Accordingly re-reverted most changes in 0.14.1 to fix buggy behavior with devDependencies in npm installs.The check-dependencies call will now only apply to production dependencies.Some internal refactoring to clean things up.Various dependencies bumped.0.14.6Fixed a bug that caused devDependencies of Roosevelt to be removed if npm i was run more than once.Fixed a bug that caused the automated testing to break if your clone of Roosevelt was not named \"roosevelt.\"Various dependencies bumped.0.14.5staticsSymlinksToPublic will now create missing subdirectories necessary to create a symlink in a target location.Fixed a bug which caused Java hserrpid error logs to pile up in your app directory under certain conditions.Fixed a bug which caused frontend reload to not work on the various error pages.Added code comment above frontend reload script tag to explain that it is injected by Roosevelt.Did some copyediting on frontend reload logging.Various dependencies bumped.0.14.4Added automatic browser reloading when your frontend code changes (via reload).A console warning will now appear explaining why public static assets don't load in prod mode when alwaysHostPublic is set to false (the default).New Express variable added: routes containing a list of all routes loaded in the application.Various dependencies bumped.CI improvements.0.14.3Restored move of several things to devDependencies to shrink production builds. Feature is now activated using ROOSEVELT_DEPLOYMENT environment variable. There are also new corresponding npm run commands dev-install and dev-prune to manage this. See README for more details.Copyediting on several logs to improve clarity.Various dependencies bumped.CI improvements.0.14.2Reverted most changes in 0.14.1 to fix #713, but preserved modularization of htmlValidator.js so that if any devDependencies are missing, the app will not crash in production mode.Various dependencies bumped.0.14.1Moved several things to devDependencies to shrink production builds.Various dependencies bumped.0.14.0Replaced internal logger with roosevelt-logger. Note: this removes the winston Express variable that was previously provided, but it is still indirectly accessible by drilling down through the logger Express variable now. See roosevelt-logger member variable documentation.If custom routers are being used, the res.redirect() method will now prepend the prefix to redirects that are relative to the hostname. To override this setting pass true as the last argument.HTML validator exceptions param will now accept an array of values instead of just a single string value.Various dependencies bumped.CI improvements.0.13.0Roosevelt will now warn you if your CSS/JS compile directory is getting stale and might need to be cleaned with npm run clean. A new cleanTimer param has been added to configure or disable this check.Added new param routers to add support for Express Routers.Added new feature to create custom CSS/JS preprocessors on the fly.Added environment variable to enable/disable the HTML validator autokiller.Added OpenJDK support to the Java HTML Validator.Various dependencies bumped.CI improvements.0.12.2Introduced changelog.Autokiller now sends human-readable GET.Fixed bug which caused the config auditor to report false errors in the case of third party module params being set to configurations other than the default.Fixed bug related to HTTPS cert parsing.Disabled option in HTML minifier which removes HTML comments by default.Various dependencies bumped.CI improvements.0.12.1 and belowHere be dragons…"})
window.siteTexts.push({file: "docs/0.31.2/coding-apps/index.html", title: "coding apps (0.31.2)", text: "Making model filesPlace a file named dataModel.js in mvc/models.Here's a simple example dataModel.js data model:// dataModel.js module.exports = () => {   return { some: 'data' } }In more complex apps, you might query a database to get your data instead.Making view filesViews by default are Teddy templates. See the Teddy documentation for information about how to write Teddy templates.You can also configure Roosevelt to use any templating system supported by Express for your views.Making controller filesController files are places to write Express routes. A route is the term Express uses for URL endpoints, such as https://yoursite/blog or https://yoursite/about.Controllers bind models and views together.To make a new controller, make a new file in the controllers directory, then follow one of the examples below.Example GET route// someController.js module.exports = (router, app) => {   // router is an Express router   // and app is the Express app created by Roosevelt    // standard Express route   router.route('/about').get((req, res) => {     // load a data model     const model = require('models/dataModel')()      // render a template and pass it the model     res.render('about', model)   }) }Example POST routeIn Roosevelt, Cross-Site Request Forgery protection is enabled by default. That means in order to make requests to any POST route, you will need to pass a CSRF token from the server to the browser, and then return that token when making a request from the browser to the server.To do that, include the CSRF token in your HTML form as a hidden input _csrf:// someController.js module.exports = (router, app) => {   router.route('/form').get((req, res) => {     const model = require('models/dataModel')()     model.token = req.csrfToken() // add CSRF token to the model     res.render('about', model)   }) }<!-- form that include the token in a request body --> <form action=\"/some-protected-endpoint\" method=\"post\">   <input type=\"hidden\" name=\"_csrf\" value=\"{token}\"> </form>You can also add the token as a request header when performing fetch requests by setting the x-csrf-token header:// request that includes the token in headers const response = await fetch('/some-protected-endpoint', {   method: 'POST',   headers: {     'X-CSRF-TOKEN': token   } })You can also exempt certain routes from CSRF protection or disable the feature entirely by configuration. See configuration section for details.Reusable controllersSometimes it is also useful to separate controller logic from your routing. This can be done by creating a reusable controller module. Reusable controller modules differ from standard controller modules in that they are meant to be called from within other controllers and do not define routes.To create a reusable controller, put a file in your controllers directory that accepts app, req, and res arguments with logic that is meant to execute from within a predefined route.An example of when this might be needed would be having a reusable controller for \"404 Not Found\" pages:// notFound.js — reusable controller module.exports = (app, req, res) => {   const model = { content: 'Cannot find this page' }   res.status(404)   res.render('404', model) }You can then call the reusable controller in any other controller when needed:// someController.js module.exports = (router, app) => {   router.route('/whatever').get((req, res) => {     // test some logic that could fail     // thus triggering the need for the 404 controller     if (something) {       // logic didn't fail       // so render the page normally       let model = require('models/dataModel')       res.render('whatever', model)     }     else {       // logic failed       // so throw the 404 by executing your reusable controller       require('controllers/notFound')(app, req, res)     }   }) }Any controller file that has no arguments or more than two arguments will be considered a reusable controller.Making static pagesYou can also generate static files from templates and models as well.Templates for static pages go in your statics folder (staticsRoot) under the HTML source path (html.sourcePath), which is statics/pages by default.Data models for the templates will be merged from different possible locations to source them from in the following order of precedence:* model in htmlModels.File-level override in htmlModels.Model file.Setting static page modelsTo declare a global model in htmlModels, use the * character:// build.js (async () => {   await require('roosevelt')({     html: {       models: {         '*': {           hello: 'world!'         }       }     }   }).init() })()To declare a model for a specific file in htmlModels:// build.js (async () => {   await require('roosevelt')({     html: {       models: {         'index.html': {           hello: 'world!'         }       }     }   }).init() })()You can also declare a model for a specific page by placing a JS file with the same name alongside the template.For example if an index.js file exists next to index.html, the JS file will be used to set the model so long as it exports either an object or a function that returns an object."})
window.siteTexts.push({file: "docs/0.31.2/configuration/index.html", title: "configuration (0.31.2)", text: "App nameRoosevelt will determine your app's name by examining \"name\" in package.json. If none is provided, it will use Roosevelt Express instead.The rooseveltConfig APIRoosevelt is highly configurable and you can configure it from the following hierarchy of sources in increasing order of precedence:A rooseveltConfig section in your package.json.A roosevelt.config.json file.A rooseveltConfig.json file.Constructor parameters.Environment variables.Command line flags.What \"increasing order of precedence\" means is that command line flags will override environment variables, environment variables will override constructor parameters, constructor parameters will override config files, etc.File path optionsappDir [String]: Root directory of your application. Default: The directory where your app's package.json is located.buildFolder [String]: Where build artifacts will be placed such as the output from preprocessed views, preprocessed statics, the views bundler feature, or the controllers bundler feature. Default: \".build\".You should .gitignore this folder.Not all build artifacts will go into this folder. Some notable exceptions include:.npm-cache: Generated by npm.node_modules: Generated by npm.package-lock.json: Generated by npm.public: This is a separate folder for files generated by Roosevelt that should be exposed publicly as static files. The name of this folder is configurable with the publicFolder param.secrets: Directory that stores certs, keys, and secrets. The name of this folder is configurable with the secretsPath param.controllersPath [String]: Relative path on filesystem to where your controller files are located. Default: \"mvc/controllers\".errorPages [Object]: Relative path on filesystem to where your various error page controller files are located. If you do not supply them, Roosevelt will use its default ones instead:forbidden [String]: Your 403 Forbidden error page. Default: \"403.js\".notFound [String]: Your 404 Not Found error page. Default: \"404.js\".internalServerError [String]: Your 5xx Internal Server Error error page. Default: \"5xx.js\".serviceUnavailable [String]: Your 503 Service Unavailable error page. Default: \"503.js\".modelsPath [String]: Relative path on filesystem to where your model files are located. Default: \"mvc/models\".preprocessedStaticsPath [String]: Relative path on filesystem to where your preprocessed static files will be written to. Preprocessed static files are static files that have been preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled. This feature will only be active if minifyHtmlAttributes is enabled. Default: \".build/preprocessed_statics\".preprocessedViewsPath [String]: Relative path on filesystem to where your preprocessed view files will be written to. Preprocessed view files are view files that have had their uses of web components progressively enhanced using the progressively-enhance-web-components module. To disable this feature, set the value to false. Default: \".build/preprocessed_views\".publicFolder [String]: All files and folders in this directory will be exposed as static files in development mode or when hostPublic is enabled. You should .gitignore this folder. Default: \"public\".secretsPath [String]: Directory that stores certs, keys, and secrets. You should .gitignore this folder. Default: secrets.staticsRoot [String]: Relative path on filesystem to where your source static assets are located. By default this folder will not be made public, but is instead meant to store unprocessed or uncompressed source assets that will later be preprocessed and exposed in public. Default: \"statics\".viewsPath [String]: Relative path on filesystem to where your view files are located. Default: \"mvc/views\".Development mode optionsThese features are only available in development mode.frontendReload [Object]: Settings to use for the browser reload feature which automatically reloads your browser when your frontend code changes.Options:enable [Boolean]: Whether or not to enable this feature.exceptionRoutes [Array of Strings]: List of routes to exclude from this feature.expressBrowserReloadParams [Object]: Params to pass to express-browser-reload. This feature will only be active on pages with a <body> tag.Default: [Object]{   \"enable\": true,   \"exceptionRoutes\": [],   \"expressBrowserReloadParams\": {     \"skipDeletingConnections\": true   } }htmlValidator [Object]: Parameters to send to express-html-validator.enable [Boolean]: Enables or disables the built-in HTML validator.exceptions [Object]: A set of params that can be used to prevent validation in certain scenarios.header [String]: A custom header that when set will disable the validator on a per request basis.modelValue [String]: An entry in your data model passed along with a res.render that when set will disable validation on the rendered HTML.validatorConfig [Object]: html-validate configuration that determines what errors the validator looks for.The full list of available validator rules can be found here.This configuration can also be set by a .htmlValidate.json file placed in your app root directory.mode [String]: Decides whether your app starts in production mode or development mode by default. Default: production.Default: [Object]{   \"enable\": true,   \"exceptions\": {     \"requestHeader\": \"Partial\",     \"modelValue\": \"_disableValidator\"   },   \"validatorConfig\": {} }HTTP optionshttp [Object]: Parameters for configuring the HTTP server.enable [Boolean]: Enable HTTP server.port [Number]: The HTTP port your app will run on.Default when an app is created manually: [Object]{   \"enable\": true,   \"port\": 43763 }Default when an app is created with the app generator: [Object]{   \"enable\": false,   \"port\": 43763 }https [Object]: Parameters for configuring the HTTPS server.enable [Boolean]: Enable HTTPS server.port [Number]: The port your app will run the HTTPS server on.autoCert [Boolean]: Will create self-signed HTTPS certificates in development mode as long as they don't already exist.options [Object]: Configuration that gets passed directly to the HTTPS server instance. Accepts all native settings. For convenience, the ca, cert, key, and pfx params can take file path strings or arrays of file path strings relative to your secretsPath in addition to the native strings and buffers.Default when an app is created manually: [Object]{   \"enable\": false,   \"port\": 43711,   \"autoCert\": true,   \"options\": {} }Default when an app is created with the app generator: [Object]{   \"enable\": true,   \"port\": 43711,   \"autoCert\": true,   \"options\": {     \"cert\": \"cert.pem\",     \"key\": \"key.pem\"   } }App behavior optionsdeprecationChecks: [String] or [Boolean]: Whether or not to run the deprecation checker in Roosevelt. The deprecation checker is a script that runs when your app starts to determine if you have code targeting an older version of Roosevelt that needs to be refactored. Default: 'developmemnt-mode' which will run the checks in development mode only. Set to false to disable it entirely.expressVersion: [Number]: Which version of Express to use. Choose between either 4 or 5. This option exists because there are significant differences between Express 4 and Express 5. Default: 5.bodyParser [Object]: Parameters to supply to the body-parser module which handles POST requests.urlEncoded [Object]: Parameters to supply to body-parser.urlencoded.json [Object]: Parameters to supply to body-parser.json.Default: [Object]{   \"urlEncoded\": {     \"extended\": true   },   \"json\": {} }csrfProtection [Boolean or Object]: Whether to enable Cross-Site Request Forgery protection. Default: true.Requires expressSession to be enabled.To disable the feature, set it to false. To exempt certain routes from protection, supply an object as your config with an array of exemptions.See the CSRF Protection section for more information.Example of exemptions list: [Object]{   \"exemptions\": [     \"/foo\",     \"/bar\",     \"/baz\"   ] }expressSession [Boolean or Object]: Parameters to pass to the express-session module. Default: true.Default if expressSession is set to true: [Object]{   \"secret\": [an auto-generated secret],   \"resave\": false, // usually a bad idea to set to true   \"saveUninitialized\": false, // usually a bad idea to set to true   \"cookie\": {     \"secure\": false, // will automatically be set to true if https is enabled     \"sameSite\": \"strict\", // adds same site enforcement     \"maxAge\": 347126472000 // sets expiration very far in the future (~11 years) to basically never expire   }   \"store\": [the expressSessionStore.instance Roosevelt param] }expressSessionStore [Object]: Define a custom session store to use with express-session instead of the default one provided by Roosevelt. This is recommended if you plan to shard your app across multiple separate processes or scale it to multiple servers.filename [String]: Name of the session file.instance: [Object] A store instance. See this list for compatible stores.preset [String]: Available presets provided by Roosevelt. Only used if instance is not provided.Available options:\"default\": Use Roosevelt's default session store, which is better-sqlite3-session-store.\"express-session-default\": Use express-session's default session store (not recommended).presetOptions [Object]: Options to pass to the preset session store if one is selected. Only used if instance is not provided.checkPeriod [Number]: How long, in milliseconds, the memory store will check for expired items.ttl [Number]: How long, in milliseconds, before a session is expired. If not set, it will default to the value of checkPeriod.max [Number]: The maximum size of the cache, checked by applying the length function to all values in the cache. If not set, there will be no maximum.Either instance or preset must be set for this param to work properly.Default: [Object]{   \"filename\": \"sessions.sqlite\",   \"instance\": null,   \"preset\": \"default\",   \"presetOptions\": {     \"checkPeriod\": 86400000, // one day     \"ttl\": null,     \"max\": null   } }formidable: Parameters to pass to formidable using formidable's API for multipart form processing (file uploads). Access files uploaded in your controllers by examining the req.files object. Roosevelt will remove any files uploaded to the upload directory when the request ends automatically. To keep any, be sure to move them before the request ends.Default: [Object]{   \"multiples\": true // enables multiple files to be uploaded simultaneously }To disable multipart forms entirely, set formidable to false.helmet [Object]: Parameters to pass to the helmet module. This module helps secure Express apps by setting HTTP response headers.The default options are specified in the helmet docs, with the following exceptions that Roosevelt makes to the default Content-Security-Policy settings:The upgrade-insecure-requests directive has been removed. This change prevents this bug.The script-src directive has been set to \"unsafe-inline\". This makes it possible to use inline scripts.The form-action directive has been set to null. This makes it possible to submit forms to other domains.You can reverse any of these changes by configuring helmet yourself.To disable helmet entirely, set the param to false.logging: Parameters to pass to roosevelt-logger. See roosevelt-logger parameters documentation for configuration options.Default: [Object]{   \"methods\": {     \"http\": true,     \"info\": true,     \"warn\": true,     \"error\": true,     \"verbose\": false   } }makeBuildArtifacts [Boolean or String]: When enabled Roosevelt will generate user-specified directories, CSS/JS bundles, etc.Defaults to false for apps created manually.Will be set to true in apps generated with the app generator.Can also accept a value of \"staticsOnly\" which will allow Roosevelt to create static files but skip the creation of the MVC directories.routePrefix [String]: A prefix prepended to your application's routes. Applies to all routes and static files. Default: null.Example: When set to \"foo\" a route bound to / will be instead be bound to /foo/.This prefix is exposed via the routePrefix Express variable which should be used for resolving the absolute paths to statics programmatically.Example: An image located at /images/teddy.jpg can be resolved in a prefix-agnostic way via ${app.get('routePrefix')/images/teddy.jpg}.viewEngine [String]: What templating engine to use, formatted as \"fileExtension: nodeModule\".Defaults to \"none\" for apps created manually.Will be set to \"html: teddy\" in apps generated with the app generator.Also by default when using the app generator, the teddy module is marked as a dependency in package.json.To use multiple templating systems, supply an array of engines to use in the same string format. Each engine you use must also be marked as a dependency in your app's package.json. Whichever engine you supply first with this parameter will be considered the default.Example configuration using multiple templating systems: [Object]{   \"viewEngine\": [     \"html: teddy\",     \"php: php\",     \"ejs: ejs\"   ] }Isomorphic (single page app) optionsclientControllers [Object]: Allows you to expose controller (route) file code to frontend JS for client-side routing.enable [Boolean]: Whether or not to bundle controller files.exposeAll [Boolean]: Option to expose all templates.blocklist [Array of Strings]: List of files or folders to exclude when exposeAll is enabled.Can also be set declaratively by putting a // roosevelt-blocklist comment at the top of any controller file.allowlist [Object of Arrays]: List of JS files to create mapped to which controller files to expose.Example: { \"mainPages.js\": [\"index.js\", \"about.js\"] }Can also be set declaratively by putting a // roosevelt-allowlist file_path comment at the top of any controller file.defaultBundle [String]: File name for the default JS controller bundle.output [String]: Subdirectory within buildFolder to write JS controller bundles to.Default: [Object]\"clientControllers\": {   \"enable\": false,   \"exposeAll\": false,   \"blocklist\": [],   \"allowlist\": {},   \"defaultBundle\": \"controllers.js\",   \"output\": \"js\" }clientViews [Object]: Allows you to expose view (template) file code to frontend JS for client-side templating.enable [Boolean]: Whether or not to bundle view files.exposeAll [Boolean]: Option to expose all templates.blocklist [Array of Strings]: List of files or folders to exclude when exposeAll is enabled.Can also be set declaratively by putting a <!-- roosevelt-blocklist --> tag at the top of any template.allowlist [Object of Arrays]: List of JS files to create mapped to which view files to expose.Example: { \"mainPages.js\": [\"baseLayout.html\", \"footer.html\"] }Can also be set declaratively by putting a <!-- roosevelt-allowlist file_path --> tag at the top of any template.defaultBundle [String]: File name for the default JS view bundle.output [String]: Subdirectory within buildFolder to write JS view bundles to.minify [Boolean]: Option to minify templates that are exposed via this feature.Be careful with this feature because it can break your templates depending on which templating system you use, and as such it is off by default. You may need to make liberal use of the minifyOptions param to make it work right with your templating system.minifyOptions [Object]: Parameters to supply to html-minifier's API.Uses the params you set in html.minifier.options if empty.Default: [Object]\"clientViews\": {   \"enable\": false,   \"exposeAll\": false,   \"blocklist\": [],   \"allowlist\": {},   \"defaultBundle\": \"views.js\",   \"output\": \"js\",   \"minify\": false,   \"minifyOptions\": {} }Static file optionscopy [Array of Objects]: Declare one or more files or folders to copy at runtime. Default: [].source [String]: Path to be copied from.Roosevelt will not attempt to copy files or folders that do not exist.dest [String]: Path to place the copy.If this destination path already exists it will be overwritten.html [Object]: Generate static HTML pages:sourcePath [String]: Subdirectory within staticsRoot where your static HTML files are located. By default this folder will not be made public, but is instead meant to store unminified / unprocessed HTML template source files which will be rendered by your templating system, minified, and written to the public folder when the app is started.allowlist: [Array of Strings] List of templates to render, minify, and write to the public folder when the app is started. If the list is empty, all templates in your sourcePath will be sourced. Supports wildcard matching, e.g. dir/*.blocklist: [Array of Strings] List of templates in your sourcePath to skip. Supports wildcard matching, e.g. dir/*.You can also block a file from being exposed by adding a comment on the first line of the file with the string roosevelt-blocklist anywhere on the line.models [Object]: Data to pass to templates by file path / file name.Example: { \"index.html\": { \"some\": \"data\" } }You can also pass a global model using a * catch-all character: { \"*\": { \"some\": \"data\" } }If this data is not supplied by configuration, Roosevelt will try to automatically load a model from a JS file with the same name alongside the template if it exists instead. For example if an index.js file exists next to index.html and the model is not defined by configuration like in the example above, then the index.js file will be used to set the model so long as it exports either an object or a function that returns an object.output [String]: Subdirectory within publicFolder where parsed and minified HTML files will be written to.folderPerPage [Boolean or String]: Make a folder for each page and place the page within it.Example values:true: Given a page called example.html, this feature will create a folder called \"example\" in the public folder and place \"example.html\" within it.\"index.html\": Given a page called example.html, this feature will create a folder called \"example\" in the public folder and place \"index.html\" within it. This is useful for creating \"pretty URLs\" with static sites.false: Disables the feature.minifier [Object]: How you want Roosevelt to minify your HTML:enable [Boolean]: Whether or not to minify HTML.Can also be disabled by the minify param.Minification is automatically disabled in development mode.exceptionRoutes [Array of Strings]: List of controller routes that will skip minification entirely. Set to false to minify all URLs.options [Object]: Parameters to supply to html-minifier's API.Default: [Object]{   \"sourcePath\": \"pages\",   \"allowlist\": null,   \"blocklist\": null,   \"models\": {},   \"output\": \"\",   \"folderPerPage\": false,   \"minifier\": {     \"enable\": true,     \"exceptionRoutes\": false,     \"options\": {       \"removeComments\": true,       \"collapseWhitespace\": true,       \"collapseBooleanAttributes\": true,       \"removeAttributeQuotes\": true,       \"removeEmptyAttributes\": true     }   } }css [Object]: How you want Roosevelt to configure your CSS preprocessor:sourcePath [String]: Subdirectory within staticsRoot where your CSS files are located. By default this folder will not be made public, but is instead meant to store unminified CSS source files which will be minified and written to the public folder when the app is started.compiler [Object]: Which CSS preprocessor (if any) to use.enable [Boolean]: Whether or not to use a preprocessor.module [String]: Node module name of the CSS preprocessor you wish to use.Currently less, sass, and stylus are supported.Your chosen CSS preprocessor module must also be marked as a dependency in your app's package.json.options [Object]: Parameters to send to the CSS preprocessor if it accepts any.minifier [Object]: Params pertaining to CSS minifcation.enable [Boolean]: Whether or not to minify CSS. Can also be disabled by the minify param.options [Object]: Parameters to pass to the CSS minifier clean-css, a list of which can be found in the clean-css docs.allowlist [Array of Strings]: List of CSS files to allow for compiling. Leave undefined to compile all files. Supply a : character after each file name to delimit an alternate file path and/or file name for the minified file.Example array member: \"example.less:example.min.css\" compiles example.less into example.min.css.output [String]: Subdirectory within publicFolder where compiled CSS files will be written to.versionFile [Object]: If enabled, Roosevelt will create a CSS file which declares a CSS variable containing your app's version number from package.json. Enable this option by supplying an object with the member variables fileName and varName. Versioning your static files is useful for resetting your users' browser cache when you release a new version of your app.Example usage (with SASS): { \"fileName\": \"_version.scss\", \"varName\": \"appVersion\" }Assuming the default Roosevelt configuration otherwise, this will result in a file statics/css/_version.scss with the following content: /* do not edit; generated automatically by Roosevelt */ $appVersion: '0.1.0';Some things to note:If there is already a file there with that name, this will overwrite it, so be careful!It's generally a good idea to add this file to .gitignore, since it is a build artifact.Default: [Object]{   \"sourcePath\": \"css\",   \"compiler\": {     \"enable\" : false,     \"module\": \"less\",     \"options\": {}   },   \"minifier\": {     \"enable\": true,     \"options\": {}   },   \"allowlist\": null,   \"output\": \"css\",   \"versionFile\": null }cssCompiler [Function]: Use this param to supply a custom CSS preprocessor function.To do so, supply a function which accepts argument app, which is a reference to the Express app created by Roosevelt.The function should return an object with the following members:versionCode(app) [Function]: Function to return the version of your app. This is needed to support the versionFile feature of Roosevelt's CSS preprocessor API.app [Object]: The Express app created by Roosevelt.parse(app, fileName) [Function]: Function to preprocess CSS.app [Object]: The Express app created by Roosevelt.filePath [String]: The path to the file being preprocessed.When a custom preprocessor is defined in this way it will override the selected preprocessor specified in css.compiler.module.This param can only set via Roosevelt's constructor, like this:(async () => {   await require('roosevelt')({     cssCompiler: app => {       return {         versionCode: app => {           // write code to return the version of your app here           // generally you should return a css variable with your app version         },         parse: (app, filePath) => {           // write code to preprocess CSS here           return {             css: 'write code to output css here',             sourceMap: 'write code to output source map here (optional)'           }         }       }     }   }).startServer() })()favicon [String]: Location of your favicon file. Default: \"none\".Will be set to \"images/favicon.ico\" in apps generated with the app generator.js [Object]: How you want Roosevelt to handle module bundling and minifying your frontend JS:sourcePath [String]: Subdirectory within staticsRoot where your JS files are located. By default this folder will not be made public, but is instead meant to store unminified JS source files which will be minified and written to the public folder when the app is started.[bundler name] [String]: Parameters related to bundling JS the specified bundler module:Values you can supply to [bundler name]:webpack: See Webpack site for more details about Webpack configuration.customBundler: Allows you to define your own custom bundler.Params you can pass to your chosen bundler:enable [Boolean]: Enable the bundler.bundles: [Array of Objects] Declare one or more JavaScript bundle files.env: [String] Bundle only in development or production mode.Accepted values:\"development\": Development mode.\"production\": Production mode.If no value is set, it will bundle in both modes.config: [Object or String] The config to send to the module bundler. Can also be a path to a config file relative to the app directory.customBundlerFunction: [Function] A custom async function to execute for this bundler instead of executing the default one supplied by Roosevelt. This param is required if your bundler is set to customBundler.Arguments provided:bundle: The bundle object supplied by Roosevelt.config: The config object after it has been postprocessed by Roosevelt.app: The Roosevelt app.verbose [String]: Enable verbose error handling.Accepted values:true: Will print verbose logs to the console.\"file\": Will print verbose logs to the console and write them to a file for debugging.Default when an app is created manually: [Object]{   \"sourcePath\": \"js\",   \"webpack\": {     \"enable\": false,     \"bundles\": [],     \"customBundlerFunction\": null   },   \"customBundler\": {     \"enable\": false,     \"bundles\": [],     \"customBundlerFunction\": null   },   \"verbose\": false }Default when an app is created with the app generator: [Object]{   \"sourcePath\": \"js\",   \"webpack\": {     \"enable\": true,     \"bundles\": [       {         \"config\": {           \"entry\": \"${js.sourcePath}/main.js\",           \"devtool\": \"source-map\",           \"output\": {             \"path\": \"${publicFolder}/js\"           },           \"resolve\": {             \"alias\": {               \"fs\": false,               \"path\": false             },             \"modules\": [\"${js.sourcePath}\", \"${publicFolder}/js\", \"${appDir}\", \"node_modules\"]           }         }       }     ],     \"customBundlerFunction\": null   },   \"customBundler\": {     \"enable\": false,     \"bundles\": [],     \"customBundlerFunction\": null   },   \"verbose\": false }If you're using webpack, Roosevelt will also postprocess your webpack config to do the following things:If your config does not set mode, then Roosevelt will set mode to development if Roosevelt is in development mode.If your config does not set devtool, then Roosevelt will set devtool to source-map if Roosevelt is in development mode.If Roosevelt's prodSourceMaps feature is enabled, then Roosevelt will set devtool to source-map if Roosevelt is in production mode.If your config does not set optimization, then Roosevelt will set optimization to the following:optimization = {   minimize: true,   minimizer: [     new TerserPlugin({       extractComments: false // disable LICENSE.txt file generation     })   ] }minify [Boolean]: Enables HTML and CSS minification. This feature is automatically disabled during development mode. Minification for JS files is handled by the js params above. Default: true.minifyHtmlAttributes [Object]: Settings to pass to minify-html-attributes.enable [Boolean or String]: Whether or not to enable minify-html-attributes.Available options:\"production\": Enable only in production mode.\"development\": Enable in all modes.true: Will be taken to mean \"production\".minifyHtmlAttributesParams: Params to pass to minify-html-attributes.Note: Roosevelt will always override 3 params from minify-html-attributes:htmlDir will always be set to Roosevelt's preprocessedViewsPath.cssDir will always be set to Roosevelt's preprocessedStaticsPath.jsDir will always be set to Roosevelt's preprocessedStaticsPath.Default: [Object]{   \"enable\": false,   \"minifyHtmlAttributesParams\": {} }prodSourceMaps [Boolean]: Enables source maps for minified CSS and JS files in production mode. Default: false.symlinks [Array of Objects]: Declare one or more symlinks to be generated at runtime. Default: [].source [String]: Path to be linked to.Roosevelt will not attempt to generate a symlink to a source path that does not exist.dest [String]: Path to place symlink.If this destination path already exists it will not be overwritten.Will be set to the following in apps generated with the app generator:[   {     \"source\": \"${staticsRoot}/images\",     \"dest\": \"${publicFolder}/images\"   } ]versionedPublic [Boolean]: If set to true, Roosevelt will prepend your app's version number from package.json to your public folder. Versioning your public folder is useful for resetting your users' browser cache when you release a new version. Default: false.Deployment optionshostPublic [Boolean]: Whether or not to allow Roosevelt to host the public folder. By default in production-proxy mode Roosevelt will not expose the public folder. It's recommended instead that you host the public folder through another web server, such as Apache or nginx that is better optimized for hosting static files. Default: false.localhostOnly [Boolean]: Listen only to requests coming from localhost in production mode. This is useful in environments where it is expected that HTTP requests to your app will be proxied through a more traditional web server like Apache or nginx. This setting is ignored in development mode. Default: true.shutdownTimeout [Number]: Maximum amount of time in milliseconds given to Roosevelt to gracefully shut itself down when sent the kill signal. Default: 30000 (30 seconds).Template literals in rooseveltConfig valuesAll config values support template literal style variable syntax that you can use to refer to other Roosevelt parameters. For example:{   \"css\": {     \"sourcePath\": \"css\",     \"output\": \".build/${css.sourcePath}\"   } }Resolves to:{   \"css\": {     \"sourcePath\": \"css\",     \"output\": \".build/css\"   } }EventsRoosevelt provides a series of events you can attach code to by passing a function to the desired event as a parameter to Roosevelt's constructor like so:(async () => {   await require('roosevelt')({     onServerStart: (app) => { /* do something */ }   }).startServer() })()Event listThese are sorted in order of when they are executed during the lifecycle of a Roosevelt app.onBeforeMiddleware(app): Fired when the app begins initializing, prior to any middleware being loaded into the app.app: The Express app created by Roosevelt.onBeforeControllers(app): Fired during initialization, prior to any routes being loaded.app: The Express app created by Roosevelt.onBeforeStatics(app): Fired during initialization, prior to any statics being written.app: The Express app created by Roosevelt.onClientViewsProcess(template): Fired to preprocess templates before being exposed to the client.template: A string containing a template written in any JS-based templating engine (e.g. Teddy, Pug, ejs, etc).onServerInit(app): Fired when the server is fully initialized and all middleware has been loaded but before the server has started.app: The Express app created by Roosevelt.onServerStart(app): Fired when the server starts.app: The Express app created by Roosevelt.onAppExit(app): Fired when the app recieves a kill signal.app: The Express app created by Roosevelt.Express variables exposed by RooseveltRoosevelt supplies several variables to Express that you may find handy. Access them using app.get('variableName').appDir: The directory the main module is in.appName: The name of your app derived from package.json. Uses \"Roosevelt Express\" if no name is supplied.appVersion: The version number of your app derived from package.json.controllersPath: Full path on the file system to where your app's controllers folder is located.clientControllersBundledOutput: Full path on the file system to where your app's client-exposed controllers folder is located.clientViewsBundledOutput: Full path on the file system to where your app's client-exposed views folder is located.cssCompiledOutput: Full path on the file system to where your app's minified CSS files are located.cssPath: Full path on the file system to where your app's CSS source files are located.debugMarkup: HTML you can add to your custom error pages if you define any that will print server errors if any exist, display the route list, and add some inline JavaScript that will serialize the request's err, req, and res objects so you can interactively examine them in the browser's developer tools. Only available in development mode.env: Either development or production.express: The Express module.expressSession: The express-session module Roosevelt uses internally. Session middleware.expressSessionStore: The session store instance used by express-session module Roosevelt uses internally.htmlPath: Full path on the file system to where your app's HTML static page source files are located.htmlRenderedOutput: Full path on the file system to where your app's rendered and minified static HTML files are located.httpServer: The http server created by Roosevelt.httpsServer: The https server created by Roosevelt.jsPath: Full path on the file system to where your app's JS source files are located.logger: The roosevelt-logger module Roosevelt uses internally. Used for console logging.modelsPath: Full path on the file system to where your app's models folder is located.package: The contents of package.json.params: The parameters you sent to Roosevelt.preprocessedStaticsPath or preprocessedStatics: Full path on the file system to where your app's preprocessed statics folder is located.preprocessedViewsPath or preprocessedViews: Full path on the file system to where your app's preprocessed views folder is located.publicFolder: Full path on the file system to where your app's public folder is located.roosevelt:state: Application state, e.g. disconnecting if the app is currently being shut down.router: Instance of router module used by Roosevelt.routePrefix: Prefix appended to routes via the routePrefix param. Will be '' if not set.routes: List of all routes in the app.staticsRoot: Full path on the file system to where your app's statics folder is located.view engine: Default view engine file extension, e.g. .html.viewEngine e.g. teddy by default: Any view engine(s) you define will be exposed as an Express variable. For instance, the default view engine is teddy. So by default app.get('teddy') will return the teddy module.viewsPath or views: Full path on the file system to where your app's views folder is located.Additionally the Roosevelt constructor returns the following object:expressApp [Object]: The Express app created by Roosevelt.initServer(callback) or init(callback) [async Function]: Starts the HTML validator, sets up some middleware, runs the CSS and JS preprocessors, and maps routes, but does not start the HTTP server. Call this method manually first instead of startServer if you need to setup the Express app, but still need to do additional setup before the HTTP server is started. This method is automatically called by startServer once per instance if it has not yet already been called. Takes an optional callback.startServer() or start() [async Function]: Calls the listen method of http, https, or both (depending on your configuration) to start the web server with Roosevelt's config.stopServer(params) or stop(params) [Function]: Stops the server from accepting new connections before exiting and takes an optional argument stopServer({ persistProcess: true }) which will allow the process to remain active after the server has closed.Recognized environment variablesThe following is a list of environment variables that Roosevelt listens for.NODE_ENV:Set to production to force the app into production mode.Set to development to force the app into development mode.NODE_PORT: Default HTTPS port to run your app on.Will set HTTP port instead if HTTPS is disabled.HTTP_PORT: Default HTTP port to run your app on. Takes precedence over NODE_PORT.HTTPS_PORT: Default HTTPS port to run your app on.DISABLE_HTTPS: When set to true, the HTTPS server will be disabled and the app will revert to HTTP regardless of what is set in the rooseveltConfig.MAKE_BUILD_ARTIFACTS: Lets you set Roosevelt's makeBuildArtifacts param via environment variable.Environment variable precedence:Environment variables supersede your app's rooseveltConfig.Environment variables can be overridden with command line arguments.Command line usageAvailable npm scriptsRoosevelt apps created with the app generator come with the following notable npm scripts prepopulated in package.json:npm run production: Runs the app in production mode.Default shorthands:npm run prodnpm run pnpm startScript is short for: nodemon app.js --production-modenpm run development: Runs the app in development mode.Default shorthands:npm run devnpm run dScript is short for: nodemon app.js --development-modenpm run production-proxy: Runs the app in production mode, but with localhostOnly set to true and hostPublic set to false. This mode will make it so your app only listens to requests coming from localhost and does not serve anything in the public folder. This mode is useful when you want to host your app behind a reverse proxy from a web server like Apache or nginx and is considered a best practice for Node.js deployments.Default shorthands:npm run prodproxynpm run xScript is short for: nodemon app.js --production-proxy-modenpm run generate-certs: Generates self-signed HTTPS certs for your app.Script is short for: node ./node_modules/roosevelt/lib/scripts/certsGenerator.jsSupports command line flags --appDir somewhere --secretsPath somewhere to override those default locations.npm run generate-session-secret: Generates a secret key for the express-session module.Script is short for: node ./node_modules/roosevelt/lib/scripts/sessionSecretGenerator.jsSupports command line flags --appDir somewhere --secretsPath somewhere to override those default locations.npm run generate-secrets: Runs the above three scripts.Supports command line flags --appDir somewhere --secretsPath somewhere to override those default locations.Available command line argumentsnode app.js --production-mode: Runs the app in production mode.Default shorthands:--prod-pnode app.js --development-mode: Runs the app in development mode.Default shorthands:--dev-dnode app.js --build: Only runs the build scripts and doesn't start the app.Default shorthands:-bnode app.js --jsbundler=verbose: Prints verbose errors from the JS bundler to the console.Default shorthands:--jsb=verbose-j=verbosenode app.js --jsbundler=verbose-file: Prints verbose errors from the JS bundler to the console as well as write a jsBundlerError.txt file to the app's root directory containing the full error.Default shorthands:--jsb=verbose-file-j=verbose-filenode app.js --production-proxy-mode: Runs the app in production mode, but with localhostOnly set to true and hostPublic set to false. This mode will make it so your app only listens to requests coming from localhost and does not serve anything in the public folder. This mode is useful when you want to host your app behind a reverse proxy from a web server like Apache or nginx and is considered a best practice for Node.js deployments.Default shorthands:--prodproxy-xnode app.js --enable-validator: Forces the HTML validator to be enabled.Default shorthands:--html-validator-hnode app.js --disable-validator: Forces the HTML validator to be disabled.Default shorthands:--raw-rCombining npm scripts and command line argumentsThe npm scripts can be combined with the command line flags.For example, running npm run dev -- --disable-validator will run your app in development mode and force the HTML validator to be disabled."})
window.siteTexts.push({file: "docs/0.31.2/deployment/index.html", title: "deployment (0.31.2)", text: "If you want to deploy a Roosevelt multi-page app or single-page app live to the internet, there are some things you should do to harden it appropriately if you expect to take significant traffic.Run the app behind a reverse proxy and use all the CPU coresTo do this, use the production-proxy-mode command line flag and run the process on multiple cores using a tool like pm2.Then host your app behind a reverse proxy from a web server like Apache or nginx, which is considered a best practice for Node.js deployments.Running the app in production-proxy mode runs the app in production mode, but with localhostOnly set to true and hostPublic set to false. This mode will make it so your app only responds to requests coming from the proxy server and does not serve anything in the public folder. You will then need to serve the contents of the public folder directly via Apache or nginx.Use HTTPSSetting up HTTPS can be tricky to configure properly especially for novices, so it can be tempting not do it to simplify deployment, but your website won't be seen as professional if it isn't served up via HTTPS. It's worth the effort to set it up.Use a caching service or a database to store sessionsRoosevelt's default session store for express-session works great if your app only needs a single process, but if you're spreading your app across multiple processes or servers, you will need to reconfigure express-session to use a caching service that supports replication like redis or a database that supports replication like PostgreSQL in order to scale your app.Use Roosevelt's static site generator instead if you canNot all sites need to execute logic dynamically on the backend. If you can get away with making a site using a static site generator, then that will dramatically simplify deployment. rooseveltframework.org is itself a static site generated with Roosevelt's static site generator, and you can view its source code here."})
window.siteTexts.push({file: "docs/0.31.2/get-started/index.html", title: "get started (0.31.2)", text: "🧸 roosevelt PrerequisitesFirst you will need to install Node.js. Both the current and LTS version of Node.js are supported. It is recommended that you have both the current and LTS versions of Node.js installed on your system. To do that, it is recommended that you install Node.js using a Node.js version manager like nvm or nvm-windows rather than the official installer, as a version manager will allow you to switch between multiple versions of Node.js easily.Make a Roosevelt app🏭🧸 mkroosevelt The simplest way to make a Roosevelt app is to simply run the following command:npx mkrooseveltThen follow the prompts to decide whether to make a multi-page app, static site generator, or a single page app.Other ways to make Roosevelt apps🏭🧸 generator-roosevelt What the mkroosevelt command does under the hood is call the Roosevelt app generator, a command line script based on Yeoman, to create a sample Roosevelt app for you. You could also install the app generator to your system if you like. To do that, first globally install Yeoman and the Yeoman-based Roosevelt app generator:npm i -g yo generator-rooseveltThen create a Roosevelt app using the Roosevelt app generator:yo rooseveltThen follow the prompts.Create a Roosevelt app manuallyIt is also possible to create a Roosevelt app without using the app generator. This will result in a more minimalist default configuration (e.g. no CSS or JS preprocessors enabled by default).To do that:First create a new folder and cd into it.Then npm i roosevelt. This will create a node_modules folder with Roosevelt and its bare minimum dependencies.Create a file named app.js.Put this code in app.js:(async () => {   await require('roosevelt')({     makeBuildArtifacts: true   }).startServer() })()Then node app.js. If the makeBuildArtifacts parameter is set to true like the above code example, an entire Roosevelt app with bare minimum viability will be created and the server will be started.Default directory structureBelow is the default directory structure for an app created using the Roosevelt app generator.Application logicapp.js or build.js: Entry point to your application. Feel free to rename this, but make sure to update package.json's references to it. It defaults to app.js when building a multi-page app or a single page app. It defaults to build.js when building a static site generator.lib: A folder for any includable JS files that don't belong in any of the other directories. It has been added to the require stack so you can simply require('lib/someFile').mvc: Folder for models, views, and controllers.controllers: Folder for controller files; the \"C\" in MVC. This is where your HTTP routes will go.models: Folder for model files; the \"M\" in MVC. This is where you will get data to display in your views e.g. by querying a database or do other business logic.views: Folder for view files; the \"V\" in MVC. This is where your HTML templates will go.Static filesstatics: Folder for source CSS, image, JS, and other static files. By default some of the contents of this folder are symlinked to the public folder, which you can configure via params.css: Folder for source CSS files.images: Folder for source image files.js: Folder for source frontend JS files.pages: Folder for HTML templates that get rendered as static pages and deposited into the public folder.Build artifacts.build: Folder for build artifacts.preprocessed_statics: Static files that have been preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled.preprocessed_views: View files that have had their uses of web components progressively enhanced using the progressively-enhance-web-components module and/or preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled.The output JS files from the clientControllers or clientViews features.public: All contents within this folder will be exposed as static files. For the most part, the contents of this folder will be populated from the statics folder. This folder is added to .gitignore by default because it is considered a build artifact.Application infrastructure.gitignore: A standard file which contains a list of files and folders to ignore if your project is in a git repo. Delete it if you're not using git. The default .gitignore file contains many common important things to ignore, however you may need to tweak it to your liking before committing a fresh Roosevelt app to your git repo.node_modules: A standard folder created by Node.js where all modules your app depends on (such as Roosevelt) are installed to. This folder is created when installing dependencies using the npm i command. It is added to .gitignore by default because it is considered a build artifact.package.json: A file common to most Node.js apps for configuring your app.package-lock.json: An auto-generated file common to most Node.js apps containing a map of your dependency tree. This is created after you run npm i for the first time. Once the file exists within your project, you can run npm ci instead of npm i when installing dependencies, which will be more performant and will result in reproducible builds that always have the same versions of every dependency, including downstream dependencies.rooseveltConfig.json: Where your Roosevelt config is stored and what your params are set to. These values can be overridden when calling Roosevelt's constructor.secrets: A folder for \"secret\" files, e.g. session keys, HTTPS certs, passwords, etc. It is added to .gitignore by default because it contains sensitive information, so it should not be committed to git."})
window.siteTexts.push({file: "docs/0.31.3/changelog/index.html", title: "changelog (0.31.3)", text: "0.31.3Added warning to the debug markup on 403 \"forbidden\" POST error pages instructing the user to include the CSRF token in their request.Fixed a bug that could cause undefined to print on error pages in certain circumstances.Updated dependencies.0.31.2Fixed bug that caused cookie parser to not load under certain circumstances.Updated dependencies.0.31.1Changed expressSession default to true so that csrfProtection's default being true will actually function.Updated dependencies.0.31.0Breaking: npm run generate-csrf-secret script removed, as it is no longer necessary due to an internal switch of Roosevelt's CSRF dependency from csrf-csrf to csrf-sync. You should delete any csrfSecret.json files in your secrets directory after upgrading Roosevelt, as the file is no longer needed. You should also remove the npm run generate-csrf-secret from your package.json.Added expressVersion param which lets you decide which version of Express to use. Choose between either 4 or 5. This option exists because there are significant differences between Express 4 and Express 5. Default: 5.Added glob pattern support to CSRF route exemption param.Removed enableCLIFlags param which has been obsolete for some time and didn't actually do anything.Changed the deprecation checker to only run in development mode and added a new param deprecationChecks that will let you disable it entirely.Updated dependencies.0.30.7Added new onBeforeControllers event.Added new html.folderPerPage param.Made it easier to debug HTML validation errors on static sites.Fixed bugs associated with the stopServer() method.Fixed bugs associated with using a roosevelt.config.json file in your app.Fixed a bug that could cause middleware errors not to flow through the middleware stack correctly.Copyedited documentation significantly.Updated dependencies.0.30.6Added onBeforeStatics event.Altered makeBuildArtifacts log to be a warning.Fixed writing JS file log to be properly classified as info instead of log.Fixed a bug that could cause the static site generator to not write new files even if the file has changed.Updated dependencies.0.30.5Added error handling for if you supply Roosevelt constructor params to initServer or startServer.Fixed bugs that could cause initServer, startServer, and stopServer to not be properly awaitable.Fixed bug that would cause undefined to print on error pages in Roosevelt apps without a package.json version defined.Updated dependencies.0.30.4Fixed bugs that prevented CSS source maps from working correctly.Updated dependencies.0.30.3Fixed model overriding precedent in static site generator.0.30.2Fixed a crash associated with the default catch-all route.0.30.1Fixed a bug that caused two catch-all routes to appear in the router stack.Updated dependencies.0.30.0Breaking: Upgraded to Express 5.x.To migrate:Most Roosevelt apps probably only need to change * routes to *all.Apps that use more complex routing may need other changes.Full list of considerations for migrating to Express 5: https://expressjs.com/en/guide/migrating-5.htmlAdded expressSessionStore Express variable, which is the session store instance used by express-session module Roosevelt uses internally.Added support for catch-all * in static site generator model definitions.Updated dependencies.0.29.5Added new copy param that will copy files from a source location to a destination location.Added new feature to integrated webpack bundler to disable LICENSE.txt generation by default. This can be overridden by supplying your own optimization param to your webpack config.Improved docs.Updated dependencies.0.29.4Added first-line comment blocklist support to the static site generator.Added static site generator folder to the require module path.Added async/await support for static site models.Updated dependencies.0.29.3Fixed a bug that could cause some routes not to load.Fixed a bug that could cause more than one * route to end up in the router stack.Updated dependencies.0.29.2Fixed a bug that would cause MAKE_BUILD_ARTIFACTS to supersede the --build CLI flag.Fixed a bug that would cause an error to falsely print about not being able to create symlinks.Updated dependencies.0.29.1Fixed bugs associated with MAKE_BUILD_ARTIFACTS sometimes not working properly.Updated dependencies.0.29.0Breaking: Moved default output location for clientControllers and clientViews to the .build folder.To migrate your app, you will likely need to change js.webpack.bundles.config.resolve.modules to replace any entry that has \"${publicFolder}/js\" with \"${buildFolder}/js\".Breaking: Changed default of preprocessedViewsPath param from \".build/.preprocessed_views\" to \".build/preprocessed_views\" and changed default of preprocessedStaticsPath param from \".build/.preprocessed_statics\" to \".build/preprocessed_statics\".Added buildFolder param to customize the name of the .build folder.Altered output of controllersBundler and viewsBundler feature to produce files that are easier to read.Updated dependencies.0.28.1Fixed a bug where HTTPS certs wouldn't always automatically generate when they should.Updated various dependencies.0.28.0Breaking: Removed config auditor feature.Added more checks to the deprecation checker.Updated dependencies.0.27.0Breaking: Changed http/s param structure:Changed port param to http.port and changed the default to 43763.Changed https.port param default to 43711.Removed https.force param. Non-secure http can now be disabled via http.enable being set to false.Removed authInfoPath, passphrase, caCert, requestCert, and rejectUnauthorized params. Replaced them with options where you can pass any native option.The ca, cert, key, and pfx params can take file paths relative to your secretsDir in addition to everything else natively supported (strings, buffers, and arrays of strings or buffers).The file paths get resolved within arrays if you pass arrays to any of those as well.These collective changes mean most Roosevelt apps will need to alter their Roosevelt configs from something that looks like:\"port\": 19679, \"https\": {   \"enable\": true,   \"port\": 19679,   \"force\": true,   \"authInfoPath\": {     \"authCertAndKey\": {       \"cert\": \"cert.pem\",       \"key\": \"key.pem\"     }   } },To be something like this instead:\"http\": {   \"enable\": false }, \"https\": {   \"enable\": true,   \"port\": 19679,   \"options\": {     \"cert\": \"cert.pem\",     \"key\": \"key.pem\"   } },Breaking: Changed behavior of NODE_PORT environment variable to now set https port when https is enabled and fall back to http if https is disabled.Breaking: Moved the versioning of webpack from Roosevelt itself to the app. You will need to declare webpack as a dependency in your app if you intend to use the JS bundler feature in Roosevelt.Breaking: Changed js.webpack.bundles.env param to require values development or production instead of dev or prod.Breaking: Changed js.webpack.bundles.verbose param to js.verbose.Breaking: Changed --webpack, --wp, and --w CLI flags to --jsbundler, --jsb, and --j respectively.Breaking: Changed default of preprocessedViewsPath param from 'mvc/.preprocessed_views' to '.build/.preprocessed_views' and changed default of preprocessedStaticsPath param from '.preprocessed_statics' to '.build/.preprocessed_statics'. Collectively these changes mean most Roosevelt apps should remove .preprocessed_views and .preprocessed_statics from .gitignore and add .build instead.Added new param js.customBundler that will let you define a custom JS bundler.Added new param js[bundler].customBundlerFunction that will let you define custom behavior for default supported JS bundlers like Webpack.Updated dependencies.0.26.1Added new Express variable debugMarkup that contains HTML you can add to your custom error pages if you define any that will print server errors if any exist, display the route list, add some inline JavaScript that will serialize the request's err, req, and res objects so you can interactively examine them in the browser's developer tools. Only available in development mode.Added the aforementioned debug markup to the default error pages in development mode as well.Added routes Express variable which will list all routes in the app.Added new recognized environment variable: MAKE_BUILD_ARTIFACTS will allow you to set Roosevelt's makeBuildArtifacts config.Added new param minifyHtmlAttributes: Settings to pass to minify-html-attributes.Options:enable: Whether or not to enable minify-html-attributes.Default: [Boolean] false.Available options:'production': Enable only in production mode.'development': Enable in all modes.true: Will be taken to mean 'production'.minifyHtmlAttributesParams: Params to pass to minify-html-attributes.Default: [Object] {}Default: [Object]{   \"enable\": true,   \"minifyHtmlAttributesParams\": {} }Note: Roosevelt will always override 3 params from minify-html-attributes:htmlDir will always be set to Roosevelt's preprocessedViewsPath.cssDir will always be set to Roosevelt's preprocessedStaticsPath.jsDir will always be set to Roosevelt's preprocessedStaticsPath.Added new param preprocessedStaticsPath: Relative path on filesystem to where your preprocessed static files will be written to. Preprocessed static files are view files that have been preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled.Default: [String] \".preprocessed_statics\".This feature will only be active if minifyHtmlAttributes is enabled.Replaced isomorphicControllers param with clientControllers param and made it function similarly to clientViews.Fixed a bug with displaying app version on default error pages.Fixed a bug that could lead to a counter-intuitive error if your template rendered an empty response in dev mode.Updated various dependencies.0.26.0Breaking: Added new param preprocessedViewsPath: Relative path on filesystem to where your preprocessed view files will be written to. Preprocessed view files are view files that have had their uses of web components progressively enhanced using the progressively-enhance-web-components module.Default: [String] \"mvc/.preprocessed_views\".To disable this feature, set the value to false.This is breaking because if you leave it enabled by default (recommended), you will need to add .preprocessed_views to your .gitignore.Breaking: Switched to external source maps for the CSS preprocessor. This necessitated changing the custom CSS preprocessor API to require returning an object instead of a string.If you have written a custom CSS preprocessor, the new return value is:return {   css: 'write code to output css here',   sourceMap: 'write code to output source map here (optional)' }Added new param prodSourceMaps to allow source maps to be generated in prod mode for both CSS and JS.Added IP address to the output when the server starts.Added new CLI script secretsGenerator.js that allows you to combine certsGenerator.js, csrfSecretGenerator.js, and sessionSecretGenerator.js into one command.Added feature to override appDir and secretsPath for the CLI scripts using --appDir somewhere and --secretsPath somewhere CLI flags.Added exceptionRoutes option to the frontendReload param.Added a check for broken symlinks in the public folder, which will be purged if any exist.Added support for placing your Roosevelt config in a roosevelt.config.json file in addition to the previous options.Added better error when attempting to start a Roosevelt app on a file system that does not support symlinks.Changed source maps from inline to external.Fixed a bug that caused the JS bundler to not log when it was writing JS files.Fixed a bug that caused a statics/pages directory being created when it isn't needed.Fixed a bug that could cause the public folder and statics folder to be created even when makeBuildArtifacts is disabled.Fixed a bug that caused the views bundler and isomorphic controllers finder to write a new views bundle to disk even when it wasn't needed.Fixed frontendReload not working in Firefox with the default HTTPS config.Updated various dependencies.0.25.0Breaking: Supplying an allowlist to the views bundler will now implicitly disable exposeAll.Breaking: Renamed secretsDir param to secretsPath.Updated all file path express variables to include full absolute paths.Fixed various bugs in the views bundler feature.Fixed a rare bug where CSRF and session secrets could be written to the wrong directory.Fixed a bug where HTTPS certs could be automatically generated when they shouldn't be.Updated various dependencies.0.24.0Breaking: Altered startServer and initServer methods to now be async. They now need to be awaited to avoid possible race conditions.As a result, starting the app in a single line needs to be updated to await (require('roosevelt').startServer()).Callback arguments have been removed from these methods as well.Breaking: Removed app.get('routes'), onReqAfterRoute, onReqBeforeRoute, onReqStart, and onStaticAssetsGenerated.Breaking: Renamed app.httpServer to app.get('httpServer') and app.httpsServer to app.get('httpsServer').Breaking: Added enable param to clientViews. If your app uses the clientViews feature, you will need to add this param to continue using the feature.Added new method onBeforeMiddleware.Added start and stop method shorthands for startServer and stopServer respectively.Refactored various things under the hood to improve code quality, performance, and reduce unnecessary dependencies.Updated various dependencies.0.23.2Removed toobusy feature since it is temperamental and the dependency is no longer maintained.Refactored internal wildcardMatch to use minimatch under the hood.Replaced html-minifier with html-minifier-terser since html-minifier-terser is better-maintained.Updated various dependencies.0.23.1Added feature that scans the router stack to move the 404 route (the * route) to the end of the stack every time a new route is added, even if the route is added at runtime so that you can dynamically add routes while the app is running.Updated various dependencies.0.23.0Removed cores feature since it is largely redundant now thanks to the widespread popularity of tools like pm2. Also removed various deprecated cluster module support as well.Updated various dependencies.0.22.16Made it possible to disable helmet by setting the helmet param to false.Updated various dependencies.0.22.15Added option to exempt certain routes from CSRF protection.Updated various dependencies.0.22.14The JS bundler will now add mode: \"development\" and devtool: \"source-map\" automatically to your Webpack bundles in development mode.Updated various dependencies.0.22.13Altered helmet's defaults again. The form-action directive has been set to null. This makes it possible to submit forms to other domains in production mode.0.22.12Added 'unsafe-inline' option to helmet's Content-Security-Policy's script-src directive by default in Roosevelt. This will prevent inline scripts from being blocked in production mode.Updated various dependencies.0.22.11Added DISABLE_HTTPS environment variable which when set to true, the HTTPS server will be disabled and the app will revert to HTTP regardless of what is set in the rooseveltConfig.Updated various dependencies.0.22.10Enabled WAL in the SQLite instance used for session storage by default.Updated various dependencies.0.22.9Fixed an issue with cert generation from CLI scripts properly this time.0.22.8Fixed an issue with cert generation from CLI scripts.Updated various dependencies.0.22.7Added a max age to the default express-session configuration.Fixed an issue with cert generation in production mode.Updated various dependencies.0.22.6Fixed a bug that caused self-signed certs to get regenerated every time the app restarted.Updated various dependencies.0.22.5Certs generator will now run in production mode as well if https is enabled and if the files do not already exist. This behavior can be suppressed by setting https.autoCert to false.Fixed bug that prevented the static site generator feature from working in dev mode when the HTML validator was enabled.Fixed README formatting typos.Updated various dependencies.0.22.4Made it possible to set expressSession to true which will set a sane default config so you don't have to spell one out.0.22.3Updated default session store to use SQLite instead of an in-memory database so that sessions are not invalidated when the server restarts.Updated various dependencies.0.22.2Fixed a bug that caused self-signed certs to get regenerated every time the app restarted.Updated various dependencies.0.22.1Exposed the express-session middleware for use in Roosevelt apps.Updated various dependencies.0.22.0Breaking: Added a unified secrets directory for various app secrets such as HTTPS certs, session secret, CSRF secret, etc. The name of the directory is configurable, but when upgrading an app from the previous version, you may need to alter your rooseveltConfig to remove directories from your cert or key paths. You must now specify only a file name in those params.Added support for express-session for session support.Added CSRF protection.Improved dev sync script for developing Roosevelt significantly.Updated various dependencies.0.21.16Fixed an issue that could cause the server to start before all the controller routes were loaded.Updated various dependencies.0.21.15Updated various dependencies.0.21.14Updated various dependencies.0.21.13Certs will be auto-generated in dev mode now if they don't exist.Various dependencies updated.0.21.12Fixed isomorphic controllers bundler webpack bug in Windows.Various dependencies updated.0.21.11Added a new --build CLI flag that will instruct Roosevelt to just build the build artifacts but not start the server.Added new onStaticAssetsGenerated event that is fired when the server finishes init but before the server starts.Fixed an issue that would cause the server to start even when makeBuildArtifacts is set to staticsOnly. This has the side effect of causing serverStart() to revert to the behavior of init() if makeBuildArtifacts is set to staticsOnly.Fixed a bug that would cause roosevelt-router to produce a false negative when detecting teddy.Various dependencies updated.0.21.10Added --webpack=verbose and --wp=verbose-file CLI flags to make it easier to see verbose webpack errors. Available shorthands: --wp and -w.Added detection of undefined template literal variables (e.g. via typo) in rooseveltConfig.Added more helpful error if starting an app with broken symlinks.Various dependencies updated.0.21.9Fixed frontend reload when https is enabled with self-signed certs.Removed parent-require dependency.Added new dev_sync.sh to make writing code for Roosevelt easier. See instructions on how to use it in the README.Various dependencies updated.0.21.8Added wildcard matching to views bundler feature.Fixed bug that could cause build artifact generation to crash starting the app.Various dependencies updated.0.21.7Fixed CSS preprocessor breaking on Windows when using the default configuration in a newly generated app.Various dependencies updated.0.21.6The certs-generator script's default name has been changed to generate-certs. The config auditor will now expect it to be named that.The config-audit script's default name has been changed to audit-config. The config auditor will now expect it to be named that.allowlist in CSS preprocessor now supports wildcard matching, e.g. dir/*.Various dependencies updated.0.21.5allowlist and blocklist in static site generator feature now supports wildcard matching, e.g. dir/*.Various dependencies updated.0.21.4Added allowlist and blocklist to the static site generator feature.Fixed bug with the static site generator feature that required absolute paths for including child templates in a main template.Various dependencies updated.0.21.3When versionedPublic is true, Roosevelt will no longer deposit static HTML pages into the versioned directory.Various dependencies updated.0.21.2Fixed bug where the config auditor would complain about the makeBuildArtifacts param being set to string.Static site generator will now run the HTML validator against rendered templates in dev mode only.Various dependencies updated.0.21.1Static site generator can now be supplied models by file instead of by configuration. If model data is not supplied by configuration, Roosevelt will try to automatically load a model from a JS file with the same name alongside the template if it exists instead.Static site generator will now run the HTML validator against rendered templates.Bumped CI Node versions.0.21.0Breaking: htmlMinifier param renamed and expanded to html. You will need to update your Roosevelt config.Added feature html.sourcePath, html.models, and html.output which lets you generate static HTML pages from the your statics directory by compiling them with a view engine and depositing the output to the public folder at start time.Fixed issue with symlinks that would cause symlinking to a file rather than a directory to fail in Windows.Some error message copyediting.Some minor refactoring and documentation fixes.Various dependencies updated.0.20.1makeBuildArtifacts will now accept a new value of 'staticsOnly' which will allow Roosevelt to create static files but skip the creation of the MVC directories.initServer can now also be called as init instead.Various dependencies updated.0.20.0Breaking: Renamed generateFolderStructure to makeBuildArtifacts.Various dependencies updated.Breaking: Among them, formidable was updated which is a breaking change for any app that takes file uploads as property names in req.files have been renamed, most notably file.path is now file.filepath and file.name is now file.originalname.Removed checkDependencies.0.19.14Fixed bug that required admin permissions to start an app in Windows.0.19.13Added script to generate self-signed HTTPS certs:npm run certs-generator: Generates self-signed HTTPS certs for your app.Default shorthand:npm run cScript is short for: node ./node_modules/roosevelt/lib/scripts/certsGenerator.jsSome refactoring.Various dependencies updated.0.19.12Various dependencies updated.Migrated colors to @colors/colors.0.19.11Fixed bug that caused isoRequire to only work with absolute paths.Various dependencies updated.0.19.10Added roosevelt-router feature to improve support for writing isomorphic code for SPAs.Added isomorphicControllers config option that will permit Roosevelt to make a list of all your controller files that can be used client-side as well so they can be auto-loaded client-side too.Altered clientViews such that the template list will lack file extensions if the file extension of the template matches the default view engine's file extension.Breaking: Default clientViews output bundle changed from bundle.js to views.js.Fixed confusing console warning.HTML validator frontend scripts moved to <head>.Various dependencies updated.0.19.9Made Webpack errors less verbose.Various dependencies updated.0.19.8Updated for support for Node 16.x. This required a migraiton from node-sass to dart-sass.Dropped official Node 15 support, though it will probably still work. Node 14 remains officially supported.Various dependencies updated.0.19.7clientViews allowlist now allows directories.Default command line flags and environment variables recognized by Roosevelt can now be overridden via source-configs.Various dependencies updated.0.19.6Added onAppExit event.Fixed bug with https feature.Various dependencies updated.0.19.5Fix for Node 15 / npm 7 regression. Config auditor and deprecation checker will no longer run as postinstall scripts to compensate for INIT_CWD being removed from npm. These checks will be run exclusively on application first run instead (or any time the public folder is removed). (Closes https://github.com/rooseveltframework/roosevelt/issues/975)Dropped Node 12 support.Various dependencies updated.0.19.4Fixed bug that caused Roosevelt to not listen to NODE_ENV.Moved symlink creation to a separate step and made happen earlier in the app initialization process to maek it easier to work with the various Roosevelt server starting events.Various dependencies bumped.0.19.3Fixed bug which could cause CSS preprocessor to fail if there are subdirectories in your CSS folder.Various dependencies bumped.0.19.2Breaking: clientViews no longer exports a function, instead exporting a JSON object.Breaking: clientViews will no longer minify templates by default.Fixed bug with clientViews exposeAll feature that would cause it to scoop up any system files that might be present in your views directories.Fixed bug with clientViews blocklist mistakenly defaulting to an object instead of an array which could cause crashes in some configurations.Fixed bug with CSS preprocessor that would cause it to scoop up any system files that might be present in your CSS directories.Various dependencies bumped.0.19.1Added ability to configure helmet dependency.Fixed bug that caused frontend reload not to work.Fixed a bug in the Express env variable that would cause it to be incorrectly set at times.Updated some out of date into in the README.Removed some unnecessary code.Various dependencies bumped.0.19.0Breaking: Production mode behavior changed significantly:localhostOnly and alwaysHostPublic defaults were flipped to false and true respectively.alwaysHostPublic was renamed to hostPublic.The --host-public command line flag was removed, since it is no logner needed because hostPublic defaults to true now.New command line flag added called production-proxy to let you opt-in to localhostOnly and alwaysHostPublic being set to true and false respectively as before.Various dependencies bumped.0.18.3You can now use PHP as your templating engine in a Roosevelt app or any other Express application. PHP should be faster than any JS-based templating engine for complex templates since its parser is written in C rather than JS.Breaking: blacklist/whitelist params throughout the API have been renamed to blocklist/allowlist.README was copyedited to improve the clarity of the default behaviors of some of the API, remove outdated information, and other small improvements.The host-public warning was made more prominent so that production mode default behavior regarding statics is less confusing to people.CI improvements.Breaking: Roosevelt is no longer tested on Node 10.x. We didn't do anything to explicitly break older Node versions, but use at your own risk.Various dependencies bumped.0.18.2Added helmet middleware to improve security by default.Replaced body-parser middleware with native Express integration.Various dependencies bumped.0.18.1Changed passphrase option from https.p12.passphrase to https.passphrase so it can be used for certAndKey configurations as well.CI improvements.Various dependencies bumped.0.18.0Replaced the vnu-jar based HTML validator with express-html-validator 🎉.Roosevelt no longer does any background process management as a result.Moved all developer facing dependencies to optionalDependencies.They can be omitted from installion when using npm i --no-optional.Refactored frontend reload implementation.check-dependencies now only runs in dev mode.API changes:Removed separateProcess from htmlValidator.Removed port from htmlValidator.Removed showWarnings from htmlValidator.Added validatorConfig to htmlValidator which respresents a set of rules for the validator to check for.Rules can also be set in a .htmlValidate.json placed in the app root.Removed verbose from frontendReload.These logs are now controlled by the general verbose logging param.Removed ROOSEVELT_VALIDATOR environment variable.Removed ROOSEVELT_AUTOKILLER environment variable.Removed --attach-validator and -a cli flags.Removed --background-validator and -b cli flags.Removed --disable-validator-autokiller, --no-autokiller, and -n cli flags.Removed --enable-validator-autokiller, --html-validator-autokiller, and -k cli flags.Removed dependencies:execafkillhtml-validatorprismjsps-nodetampervnu-jarVarious dependencies bumped.0.17.1Fixed a CSS bug where CSS files were still not being written due to a file existence check.Fixed a CSS bug where empty CSS files were being written because their LESS equivalent would never generate CSS in that particular file.Various dependencies bumped.0.17.0Breaking: Replaced staticsSymlinksToPublic with symlinks.Breaking: Replaced routers param with a simplified routePrefix param which defines a subfolder to mount the app to.Breaking: Renamed multipart param to formidable.Added ability to configure Roosevelt via a rooseveltConfig.json config file placed in app root instead of from a rooseveltConfig object in package.json.Added router Express variable that opens up access to internally used router instance.Added routePrefix Express variable that exposes currently used routePrefix or an empty string if not used.Fixed bug where changes to CSS files were not being written to the output directory.Refactored internal fsr module.Updated internal usage of formidable API.Internal changes to stabilize the automated tests.Various dependencies bumped.0.16.2Added deprecation check for old compiler sub modules.Various dependencies bumped.0.16.1Stopped the config auditor from complaining about obsolete scripts.Fixed cases where some CLI flags weren't being applied to config.Test fixes.Various dependencies bumped.0.16.0Replaced browserify with webpack. This has significant breaking API changes. You will need to totally rewrite your JS bundles from browserify bundles to webpack bundles to upgrade to this version of Roosevelt. It is also recommended that you remove all references to old build artifacts such as .build and .bundled in your application as well from package.json, .gitignore, etc.Eliminated concept of separate JS compilers in favor of declaring this via your webpack config. Note: webpack defaults to minifying JS using terser.Eliminated concept of CSS preprocessor middleware modules in favor of built-in support for LESS, Sass, and Stylus. Other CSS preprocessors can be used as well with a bit of extra configuration.API changes:Removed symlinkToPublic, compiler, output, whitelist, and blacklist params from js.Replaced js.bundles with js.webpack.Removed css.symlinkToPublic.Replaced css.compiler.params.cleanCSS with css.minifier.Added css.compiler.enable.Replaced css.compiler.nodeModule with css.compiler.module.Replaced css.compiler.params with css.compiler.options.css.output is now relative to publicFolder instead of staticsRoot.clientViews.output is now relative to publicFolder instead of staticsRoot.Removed cleanTimer (Obsolete in absense of .build).App cleaner has been removed.source-configs integration is now more tightly knit.Config auditor no longer complains about missing params.Auditor now checks config params on a case-by-case basis.ES6 style variables can now be used in rooseveltConfig referencing other rooseveltConfig entries.Introduced views bundler: An API that allows you to expose view code to frontend JS for client-side templating.Added a button to the validation error page to display the page anyway and another button to disable the validator entirely until the server restarts.Fixed bug with frontend reload causing it to inject the script tag in the wrong location in some situations.Fixed bug where router would cause app routes to fail when no controller files exist.Fixed bug where auto build scanner would crash the app when generateFolderStructure is false.Fixed bug which resulted in a cryptic error if a Roosevelt app was moved to another directory.Fixed bug where symlink failed errors would appear when generateFolderStructure is false.Complete rewrite of HTML validator and related helper scripts.Refactored multipart middlware.Various dependencies bumped.CI improvements.Many rewritten tests.0.15.1Fixed bug causing apps to crash in dev mode.Various dependencies bumped.0.15.0Moved CSS minification from roosevelt-less to Roosevelt using clean-css as a direct dependency. The clean-css library had an update with breaking changes so the rooseveltConfig params in advanced and aggressiveMerging in cleanCSS are now outdated.New default script npm run proddev: Runs the app in production mode, but with the public folder hosted by the Roosevelt app. This is useful for doing development in production mode without having to stage a complex simulation of your production environment, which would likely include hosting static files via another web server better-suited to serving statics like Apache or nginx.Roosevelt now sources configs internally using source-configs.Validator will now be disabled if HTTP_PROXY or HTTPS_PROXY are set but localhost is not in NO_PROXY.Fixed a bug where not having devDependencies or dependencies objects in your app's package.json would throw errors when installing dependencies. Accordingly re-reverted most changes in 0.14.1 to fix buggy behavior with devDependencies in npm installs.The check-dependencies call will now only apply to production dependencies.Some internal refactoring to clean things up.Various dependencies bumped.0.14.6Fixed a bug that caused devDependencies of Roosevelt to be removed if npm i was run more than once.Fixed a bug that caused the automated testing to break if your clone of Roosevelt was not named \"roosevelt.\"Various dependencies bumped.0.14.5staticsSymlinksToPublic will now create missing subdirectories necessary to create a symlink in a target location.Fixed a bug which caused Java hserrpid error logs to pile up in your app directory under certain conditions.Fixed a bug which caused frontend reload to not work on the various error pages.Added code comment above frontend reload script tag to explain that it is injected by Roosevelt.Did some copyediting on frontend reload logging.Various dependencies bumped.0.14.4Added automatic browser reloading when your frontend code changes (via reload).A console warning will now appear explaining why public static assets don't load in prod mode when alwaysHostPublic is set to false (the default).New Express variable added: routes containing a list of all routes loaded in the application.Various dependencies bumped.CI improvements.0.14.3Restored move of several things to devDependencies to shrink production builds. Feature is now activated using ROOSEVELT_DEPLOYMENT environment variable. There are also new corresponding npm run commands dev-install and dev-prune to manage this. See README for more details.Copyediting on several logs to improve clarity.Various dependencies bumped.CI improvements.0.14.2Reverted most changes in 0.14.1 to fix #713, but preserved modularization of htmlValidator.js so that if any devDependencies are missing, the app will not crash in production mode.Various dependencies bumped.0.14.1Moved several things to devDependencies to shrink production builds.Various dependencies bumped.0.14.0Replaced internal logger with roosevelt-logger. Note: this removes the winston Express variable that was previously provided, but it is still indirectly accessible by drilling down through the logger Express variable now. See roosevelt-logger member variable documentation.If custom routers are being used, the res.redirect() method will now prepend the prefix to redirects that are relative to the hostname. To override this setting pass true as the last argument.HTML validator exceptions param will now accept an array of values instead of just a single string value.Various dependencies bumped.CI improvements.0.13.0Roosevelt will now warn you if your CSS/JS compile directory is getting stale and might need to be cleaned with npm run clean. A new cleanTimer param has been added to configure or disable this check.Added new param routers to add support for Express Routers.Added new feature to create custom CSS/JS preprocessors on the fly.Added environment variable to enable/disable the HTML validator autokiller.Added OpenJDK support to the Java HTML Validator.Various dependencies bumped.CI improvements.0.12.2Introduced changelog.Autokiller now sends human-readable GET.Fixed bug which caused the config auditor to report false errors in the case of third party module params being set to configurations other than the default.Fixed bug related to HTTPS cert parsing.Disabled option in HTML minifier which removes HTML comments by default.Various dependencies bumped.CI improvements.0.12.1 and belowHere be dragons…"})
window.siteTexts.push({file: "docs/0.31.3/coding-apps/index.html", title: "coding apps (0.31.3)", text: "Making model filesPlace a file named dataModel.js in mvc/models.Here's a simple example dataModel.js data model:// dataModel.js module.exports = () => {   return { some: 'data' } }In more complex apps, you might query a database to get your data instead.Making view filesViews by default are Teddy templates. See the Teddy documentation for information about how to write Teddy templates.You can also configure Roosevelt to use any templating system supported by Express for your views.Making controller filesController files are places to write Express routes. A route is the term Express uses for URL endpoints, such as https://yoursite/blog or https://yoursite/about.Controllers bind models and views together.To make a new controller, make a new file in the controllers directory, then follow one of the examples below.Example GET route// someController.js module.exports = (router, app) => {   // router is an Express router   // and app is the Express app created by Roosevelt    // standard Express route   router.route('/about').get((req, res) => {     // load a data model     const model = require('models/dataModel')()      // render a template and pass it the model     res.render('about', model)   }) }Example POST routeIn Roosevelt, Cross-Site Request Forgery protection is enabled by default. That means in order to make requests to any POST route, you will need to pass a CSRF token from the server to the browser, and then return that token when making a request from the browser to the server.To do that, include the CSRF token in your HTML form as a hidden input _csrf:// someController.js module.exports = (router, app) => {   router.route('/form').get((req, res) => {     const model = require('models/dataModel')()     model.csrfToken = req.csrfToken() // add CSRF token to the model     res.render('about', model)   }) }<!-- form that include the token in a request body --> <form action=\"/some-protected-endpoint\" method=\"post\">   <input type=\"hidden\" name=\"_csrf\" value=\"{csrfToken}\"> </form>You can also add the token as a request header when performing fetch requests by setting the x-csrf-token header:// request that includes the token in headers const response = await fetch('/some-protected-endpoint', {   method: 'POST',   headers: {     'X-CSRF-TOKEN': csrfToken // extract it from the DOM or something   } })You can also exempt certain routes from CSRF protection or disable the feature entirely by configuration. See configuration section for details.Reusable controllersSometimes it is also useful to separate controller logic from your routing. This can be done by creating a reusable controller module. Reusable controller modules differ from standard controller modules in that they are meant to be called from within other controllers and do not define routes.To create a reusable controller, put a file in your controllers directory that accepts app, req, and res arguments with logic that is meant to execute from within a predefined route.An example of when this might be needed would be having a reusable controller for \"404 Not Found\" pages:// notFound.js — reusable controller module.exports = (app, req, res) => {   const model = { content: 'Cannot find this page' }   res.status(404)   res.render('404', model) }You can then call the reusable controller in any other controller when needed:// someController.js module.exports = (router, app) => {   router.route('/whatever').get((req, res) => {     // test some logic that could fail     // thus triggering the need for the 404 controller     if (something) {       // logic didn't fail       // so render the page normally       let model = require('models/dataModel')       res.render('whatever', model)     }     else {       // logic failed       // so throw the 404 by executing your reusable controller       require('controllers/notFound')(app, req, res)     }   }) }Any controller file that has no arguments or more than two arguments will be considered a reusable controller.Making static pagesYou can also generate static files from templates and models as well.Templates for static pages go in your statics folder (staticsRoot) under the HTML source path (html.sourcePath), which is statics/pages by default.Data models for the templates will be merged from different possible locations to source them from in the following order of precedence:* model in htmlModels.File-level override in htmlModels.Model file.Setting static page modelsTo declare a global model in htmlModels, use the * character:// build.js (async () => {   await require('roosevelt')({     html: {       models: {         '*': {           hello: 'world!'         }       }     }   }).init() })()To declare a model for a specific file in htmlModels:// build.js (async () => {   await require('roosevelt')({     html: {       models: {         'index.html': {           hello: 'world!'         }       }     }   }).init() })()You can also declare a model for a specific page by placing a JS file with the same name alongside the template.For example if an index.js file exists next to index.html, the JS file will be used to set the model so long as it exports either an object or a function that returns an object."})
window.siteTexts.push({file: "docs/0.31.3/configuration/index.html", title: "configuration (0.31.3)", text: "App nameRoosevelt will determine your app's name by examining \"name\" in package.json. If none is provided, it will use Roosevelt Express instead.The rooseveltConfig APIRoosevelt is highly configurable and you can configure it from the following hierarchy of sources in increasing order of precedence:A rooseveltConfig section in your package.json.A roosevelt.config.json file.A rooseveltConfig.json file.Constructor parameters.Environment variables.Command line flags.What \"increasing order of precedence\" means is that command line flags will override environment variables, environment variables will override constructor parameters, constructor parameters will override config files, etc.File path optionsappDir [String]: Root directory of your application. Default: The directory where your app's package.json is located.buildFolder [String]: Where build artifacts will be placed such as the output from preprocessed views, preprocessed statics, the views bundler feature, or the controllers bundler feature. Default: \".build\".You should .gitignore this folder.Not all build artifacts will go into this folder. Some notable exceptions include:.npm-cache: Generated by npm.node_modules: Generated by npm.package-lock.json: Generated by npm.public: This is a separate folder for files generated by Roosevelt that should be exposed publicly as static files. The name of this folder is configurable with the publicFolder param.secrets: Directory that stores certs, keys, and secrets. The name of this folder is configurable with the secretsPath param.controllersPath [String]: Relative path on filesystem to where your controller files are located. Default: \"mvc/controllers\".errorPages [Object]: Relative path on filesystem to where your various error page controller files are located. If you do not supply them, Roosevelt will use its default ones instead:forbidden [String]: Your 403 Forbidden error page. Default: \"403.js\".notFound [String]: Your 404 Not Found error page. Default: \"404.js\".internalServerError [String]: Your 5xx Internal Server Error error page. Default: \"5xx.js\".serviceUnavailable [String]: Your 503 Service Unavailable error page. Default: \"503.js\".modelsPath [String]: Relative path on filesystem to where your model files are located. Default: \"mvc/models\".preprocessedStaticsPath [String]: Relative path on filesystem to where your preprocessed static files will be written to. Preprocessed static files are static files that have been preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled. This feature will only be active if minifyHtmlAttributes is enabled. Default: \".build/preprocessed_statics\".preprocessedViewsPath [String]: Relative path on filesystem to where your preprocessed view files will be written to. Preprocessed view files are view files that have had their uses of web components progressively enhanced using the progressively-enhance-web-components module. To disable this feature, set the value to false. Default: \".build/preprocessed_views\".publicFolder [String]: All files and folders in this directory will be exposed as static files in development mode or when hostPublic is enabled. You should .gitignore this folder. Default: \"public\".secretsPath [String]: Directory that stores certs, keys, and secrets. You should .gitignore this folder. Default: secrets.staticsRoot [String]: Relative path on filesystem to where your source static assets are located. By default this folder will not be made public, but is instead meant to store unprocessed or uncompressed source assets that will later be preprocessed and exposed in public. Default: \"statics\".viewsPath [String]: Relative path on filesystem to where your view files are located. Default: \"mvc/views\".Development mode optionsThese features are only available in development mode.frontendReload [Object]: Settings to use for the browser reload feature which automatically reloads your browser when your frontend code changes.Options:enable [Boolean]: Whether or not to enable this feature.exceptionRoutes [Array of Strings]: List of routes to exclude from this feature.expressBrowserReloadParams [Object]: Params to pass to express-browser-reload. This feature will only be active on pages with a <body> tag.Default: [Object]{   \"enable\": true,   \"exceptionRoutes\": [],   \"expressBrowserReloadParams\": {     \"skipDeletingConnections\": true   } }htmlValidator [Object]: Parameters to send to express-html-validator.enable [Boolean]: Enables or disables the built-in HTML validator.exceptions [Object]: A set of params that can be used to prevent validation in certain scenarios.header [String]: A custom header that when set will disable the validator on a per request basis.modelValue [String]: An entry in your data model passed along with a res.render that when set will disable validation on the rendered HTML.validatorConfig [Object]: html-validate configuration that determines what errors the validator looks for.The full list of available validator rules can be found here.This configuration can also be set by a .htmlValidate.json file placed in your app root directory.mode [String]: Decides whether your app starts in production mode or development mode by default. Default: production.Default: [Object]{   \"enable\": true,   \"exceptions\": {     \"requestHeader\": \"Partial\",     \"modelValue\": \"_disableValidator\"   },   \"validatorConfig\": {} }HTTP optionshttp [Object]: Parameters for configuring the HTTP server.enable [Boolean]: Enable HTTP server.port [Number]: The HTTP port your app will run on.Default when an app is created manually: [Object]{   \"enable\": true,   \"port\": 43763 }Default when an app is created with the app generator: [Object]{   \"enable\": false,   \"port\": 43763 }https [Object]: Parameters for configuring the HTTPS server.enable [Boolean]: Enable HTTPS server.port [Number]: The port your app will run the HTTPS server on.autoCert [Boolean]: Will create self-signed HTTPS certificates in development mode as long as they don't already exist.options [Object]: Configuration that gets passed directly to the HTTPS server instance. Accepts all native settings. For convenience, the ca, cert, key, and pfx params can take file path strings or arrays of file path strings relative to your secretsPath in addition to the native strings and buffers.Default when an app is created manually: [Object]{   \"enable\": false,   \"port\": 43711,   \"autoCert\": true,   \"options\": {} }Default when an app is created with the app generator: [Object]{   \"enable\": true,   \"port\": 43711,   \"autoCert\": true,   \"options\": {     \"cert\": \"cert.pem\",     \"key\": \"key.pem\"   } }App behavior optionsdeprecationChecks: [String] or [Boolean]: Whether or not to run the deprecation checker in Roosevelt. The deprecation checker is a script that runs when your app starts to determine if you have code targeting an older version of Roosevelt that needs to be refactored. Default: 'developmemnt-mode' which will run the checks in development mode only. Set to false to disable it entirely.expressVersion: [Number]: Which version of Express to use. Choose between either 4 or 5. This option exists because there are significant differences between Express 4 and Express 5. Default: 5.bodyParser [Object]: Parameters to supply to the body-parser module which handles POST requests.urlEncoded [Object]: Parameters to supply to body-parser.urlencoded.json [Object]: Parameters to supply to body-parser.json.Default: [Object]{   \"urlEncoded\": {     \"extended\": true   },   \"json\": {} }csrfProtection [Boolean or Object]: Whether to enable Cross-Site Request Forgery protection. Default: true.Requires expressSession to be enabled.To disable the feature, set it to false. To exempt certain routes from protection, supply an object as your config with an array of exemptions.See the CSRF Protection section for more information.Example of exemptions list: [Object]{   \"exemptions\": [     \"/foo\",     \"/bar\",     \"/baz\"   ] }expressSession [Boolean or Object]: Parameters to pass to the express-session module. Default: true.Default if expressSession is set to true: [Object]{   \"secret\": [an auto-generated secret],   \"resave\": false, // usually a bad idea to set to true   \"saveUninitialized\": false, // usually a bad idea to set to true   \"cookie\": {     \"secure\": false, // will automatically be set to true if https is enabled     \"sameSite\": \"strict\", // adds same site enforcement     \"maxAge\": 347126472000 // sets expiration very far in the future (~11 years) to basically never expire   }   \"store\": [the expressSessionStore.instance Roosevelt param] }expressSessionStore [Object]: Define a custom session store to use with express-session instead of the default one provided by Roosevelt. This is recommended if you plan to shard your app across multiple separate processes or scale it to multiple servers.filename [String]: Name of the session file.instance: [Object] A store instance. See this list for compatible stores.preset [String]: Available presets provided by Roosevelt. Only used if instance is not provided.Available options:\"default\": Use Roosevelt's default session store, which is better-sqlite3-session-store.\"express-session-default\": Use express-session's default session store (not recommended).presetOptions [Object]: Options to pass to the preset session store if one is selected. Only used if instance is not provided.checkPeriod [Number]: How long, in milliseconds, the memory store will check for expired items.ttl [Number]: How long, in milliseconds, before a session is expired. If not set, it will default to the value of checkPeriod.max [Number]: The maximum size of the cache, checked by applying the length function to all values in the cache. If not set, there will be no maximum.Either instance or preset must be set for this param to work properly.Default: [Object]{   \"filename\": \"sessions.sqlite\",   \"instance\": null,   \"preset\": \"default\",   \"presetOptions\": {     \"checkPeriod\": 86400000, // one day     \"ttl\": null,     \"max\": null   } }formidable: Parameters to pass to formidable using formidable's API for multipart form processing (file uploads). Access files uploaded in your controllers by examining the req.files object. Roosevelt will remove any files uploaded to the upload directory when the request ends automatically. To keep any, be sure to move them before the request ends.Default: [Object]{   \"multiples\": true // enables multiple files to be uploaded simultaneously }To disable multipart forms entirely, set formidable to false.helmet [Object]: Parameters to pass to the helmet module. This module helps secure Express apps by setting HTTP response headers.The default options are specified in the helmet docs, with the following exceptions that Roosevelt makes to the default Content-Security-Policy settings:The upgrade-insecure-requests directive has been removed. This change prevents this bug.The script-src directive has been set to \"unsafe-inline\". This makes it possible to use inline scripts.The form-action directive has been set to null. This makes it possible to submit forms to other domains.You can reverse any of these changes by configuring helmet yourself.To disable helmet entirely, set the param to false.logging: Parameters to pass to roosevelt-logger. See roosevelt-logger parameters documentation for configuration options.Default: [Object]{   \"methods\": {     \"http\": true,     \"info\": true,     \"warn\": true,     \"error\": true,     \"verbose\": false   } }makeBuildArtifacts [Boolean or String]: When enabled Roosevelt will generate user-specified directories, CSS/JS bundles, etc.Defaults to false for apps created manually.Will be set to true in apps generated with the app generator.Can also accept a value of \"staticsOnly\" which will allow Roosevelt to create static files but skip the creation of the MVC directories.routePrefix [String]: A prefix prepended to your application's routes. Applies to all routes and static files. Default: null.Example: When set to \"foo\" a route bound to / will be instead be bound to /foo/.This prefix is exposed via the routePrefix Express variable which should be used for resolving the absolute paths to statics programmatically.Example: An image located at /images/teddy.jpg can be resolved in a prefix-agnostic way via ${app.get('routePrefix')/images/teddy.jpg}.viewEngine [String]: What templating engine to use, formatted as \"fileExtension: nodeModule\".Defaults to \"none\" for apps created manually.Will be set to \"html: teddy\" in apps generated with the app generator.Also by default when using the app generator, the teddy module is marked as a dependency in package.json.To use multiple templating systems, supply an array of engines to use in the same string format. Each engine you use must also be marked as a dependency in your app's package.json. Whichever engine you supply first with this parameter will be considered the default.Example configuration using multiple templating systems: [Object]{   \"viewEngine\": [     \"html: teddy\",     \"php: php\",     \"ejs: ejs\"   ] }Isomorphic (single page app) optionsclientControllers [Object]: Allows you to expose controller (route) file code to frontend JS for client-side routing.enable [Boolean]: Whether or not to bundle controller files.exposeAll [Boolean]: Option to expose all templates.blocklist [Array of Strings]: List of files or folders to exclude when exposeAll is enabled.Can also be set declaratively by putting a // roosevelt-blocklist comment at the top of any controller file.allowlist [Object of Arrays]: List of JS files to create mapped to which controller files to expose.Example: { \"mainPages.js\": [\"index.js\", \"about.js\"] }Can also be set declaratively by putting a // roosevelt-allowlist file_path comment at the top of any controller file.defaultBundle [String]: File name for the default JS controller bundle.output [String]: Subdirectory within buildFolder to write JS controller bundles to.Default: [Object]\"clientControllers\": {   \"enable\": false,   \"exposeAll\": false,   \"blocklist\": [],   \"allowlist\": {},   \"defaultBundle\": \"controllers.js\",   \"output\": \"js\" }clientViews [Object]: Allows you to expose view (template) file code to frontend JS for client-side templating.enable [Boolean]: Whether or not to bundle view files.exposeAll [Boolean]: Option to expose all templates.blocklist [Array of Strings]: List of files or folders to exclude when exposeAll is enabled.Can also be set declaratively by putting a <!-- roosevelt-blocklist --> tag at the top of any template.allowlist [Object of Arrays]: List of JS files to create mapped to which view files to expose.Example: { \"mainPages.js\": [\"baseLayout.html\", \"footer.html\"] }Can also be set declaratively by putting a <!-- roosevelt-allowlist file_path --> tag at the top of any template.defaultBundle [String]: File name for the default JS view bundle.output [String]: Subdirectory within buildFolder to write JS view bundles to.minify [Boolean]: Option to minify templates that are exposed via this feature.Be careful with this feature because it can break your templates depending on which templating system you use, and as such it is off by default. You may need to make liberal use of the minifyOptions param to make it work right with your templating system.minifyOptions [Object]: Parameters to supply to html-minifier's API.Uses the params you set in html.minifier.options if empty.Default: [Object]\"clientViews\": {   \"enable\": false,   \"exposeAll\": false,   \"blocklist\": [],   \"allowlist\": {},   \"defaultBundle\": \"views.js\",   \"output\": \"js\",   \"minify\": false,   \"minifyOptions\": {} }Static file optionscopy [Array of Objects]: Declare one or more files or folders to copy at runtime. Default: [].source [String]: Path to be copied from.Roosevelt will not attempt to copy files or folders that do not exist.dest [String]: Path to place the copy.If this destination path already exists it will be overwritten.html [Object]: Generate static HTML pages:sourcePath [String]: Subdirectory within staticsRoot where your static HTML files are located. By default this folder will not be made public, but is instead meant to store unminified / unprocessed HTML template source files which will be rendered by your templating system, minified, and written to the public folder when the app is started.allowlist: [Array of Strings] List of templates to render, minify, and write to the public folder when the app is started. If the list is empty, all templates in your sourcePath will be sourced. Supports wildcard matching, e.g. dir/*.blocklist: [Array of Strings] List of templates in your sourcePath to skip. Supports wildcard matching, e.g. dir/*.You can also block a file from being exposed by adding a comment on the first line of the file with the string roosevelt-blocklist anywhere on the line.models [Object]: Data to pass to templates by file path / file name.Example: { \"index.html\": { \"some\": \"data\" } }You can also pass a global model using a * catch-all character: { \"*\": { \"some\": \"data\" } }If this data is not supplied by configuration, Roosevelt will try to automatically load a model from a JS file with the same name alongside the template if it exists instead. For example if an index.js file exists next to index.html and the model is not defined by configuration like in the example above, then the index.js file will be used to set the model so long as it exports either an object or a function that returns an object.output [String]: Subdirectory within publicFolder where parsed and minified HTML files will be written to.folderPerPage [Boolean or String]: Make a folder for each page and place the page within it.Example values:true: Given a page called example.html, this feature will create a folder called \"example\" in the public folder and place \"example.html\" within it.\"index.html\": Given a page called example.html, this feature will create a folder called \"example\" in the public folder and place \"index.html\" within it. This is useful for creating \"pretty URLs\" with static sites.false: Disables the feature.minifier [Object]: How you want Roosevelt to minify your HTML:enable [Boolean]: Whether or not to minify HTML.Can also be disabled by the minify param.Minification is automatically disabled in development mode.exceptionRoutes [Array of Strings]: List of controller routes that will skip minification entirely. Set to false to minify all URLs.options [Object]: Parameters to supply to html-minifier's API.Default: [Object]{   \"sourcePath\": \"pages\",   \"allowlist\": null,   \"blocklist\": null,   \"models\": {},   \"output\": \"\",   \"folderPerPage\": false,   \"minifier\": {     \"enable\": true,     \"exceptionRoutes\": false,     \"options\": {       \"removeComments\": true,       \"collapseWhitespace\": true,       \"collapseBooleanAttributes\": true,       \"removeAttributeQuotes\": true,       \"removeEmptyAttributes\": true     }   } }css [Object]: How you want Roosevelt to configure your CSS preprocessor:sourcePath [String]: Subdirectory within staticsRoot where your CSS files are located. By default this folder will not be made public, but is instead meant to store unminified CSS source files which will be minified and written to the public folder when the app is started.compiler [Object]: Which CSS preprocessor (if any) to use.enable [Boolean]: Whether or not to use a preprocessor.module [String]: Node module name of the CSS preprocessor you wish to use.Currently less, sass, and stylus are supported.Your chosen CSS preprocessor module must also be marked as a dependency in your app's package.json.options [Object]: Parameters to send to the CSS preprocessor if it accepts any.minifier [Object]: Params pertaining to CSS minifcation.enable [Boolean]: Whether or not to minify CSS. Can also be disabled by the minify param.options [Object]: Parameters to pass to the CSS minifier clean-css, a list of which can be found in the clean-css docs.allowlist [Array of Strings]: List of CSS files to allow for compiling. Leave undefined to compile all files. Supply a : character after each file name to delimit an alternate file path and/or file name for the minified file.Example array member: \"example.less:example.min.css\" compiles example.less into example.min.css.output [String]: Subdirectory within publicFolder where compiled CSS files will be written to.versionFile [Object]: If enabled, Roosevelt will create a CSS file which declares a CSS variable containing your app's version number from package.json. Enable this option by supplying an object with the member variables fileName and varName. Versioning your static files is useful for resetting your users' browser cache when you release a new version of your app.Example usage (with SASS): { \"fileName\": \"_version.scss\", \"varName\": \"appVersion\" }Assuming the default Roosevelt configuration otherwise, this will result in a file statics/css/_version.scss with the following content: /* do not edit; generated automatically by Roosevelt */ $appVersion: '0.1.0';Some things to note:If there is already a file there with that name, this will overwrite it, so be careful!It's generally a good idea to add this file to .gitignore, since it is a build artifact.Default: [Object]{   \"sourcePath\": \"css\",   \"compiler\": {     \"enable\" : false,     \"module\": \"less\",     \"options\": {}   },   \"minifier\": {     \"enable\": true,     \"options\": {}   },   \"allowlist\": null,   \"output\": \"css\",   \"versionFile\": null }cssCompiler [Function]: Use this param to supply a custom CSS preprocessor function.To do so, supply a function which accepts argument app, which is a reference to the Express app created by Roosevelt.The function should return an object with the following members:versionCode(app) [Function]: Function to return the version of your app. This is needed to support the versionFile feature of Roosevelt's CSS preprocessor API.app [Object]: The Express app created by Roosevelt.parse(app, fileName) [Function]: Function to preprocess CSS.app [Object]: The Express app created by Roosevelt.filePath [String]: The path to the file being preprocessed.When a custom preprocessor is defined in this way it will override the selected preprocessor specified in css.compiler.module.This param can only set via Roosevelt's constructor, like this:(async () => {   await require('roosevelt')({     cssCompiler: app => {       return {         versionCode: app => {           // write code to return the version of your app here           // generally you should return a css variable with your app version         },         parse: (app, filePath) => {           // write code to preprocess CSS here           return {             css: 'write code to output css here',             sourceMap: 'write code to output source map here (optional)'           }         }       }     }   }).startServer() })()favicon [String]: Location of your favicon file. Default: \"none\".Will be set to \"images/favicon.ico\" in apps generated with the app generator.js [Object]: How you want Roosevelt to handle module bundling and minifying your frontend JS:sourcePath [String]: Subdirectory within staticsRoot where your JS files are located. By default this folder will not be made public, but is instead meant to store unminified JS source files which will be minified and written to the public folder when the app is started.[bundler name] [String]: Parameters related to bundling JS the specified bundler module:Values you can supply to [bundler name]:webpack: See Webpack site for more details about Webpack configuration.customBundler: Allows you to define your own custom bundler.Params you can pass to your chosen bundler:enable [Boolean]: Enable the bundler.bundles: [Array of Objects] Declare one or more JavaScript bundle files.env: [String] Bundle only in development or production mode.Accepted values:\"development\": Development mode.\"production\": Production mode.If no value is set, it will bundle in both modes.config: [Object or String] The config to send to the module bundler. Can also be a path to a config file relative to the app directory.customBundlerFunction: [Function] A custom async function to execute for this bundler instead of executing the default one supplied by Roosevelt. This param is required if your bundler is set to customBundler.Arguments provided:bundle: The bundle object supplied by Roosevelt.config: The config object after it has been postprocessed by Roosevelt.app: The Roosevelt app.verbose [String]: Enable verbose error handling.Accepted values:true: Will print verbose logs to the console.\"file\": Will print verbose logs to the console and write them to a file for debugging.Default when an app is created manually: [Object]{   \"sourcePath\": \"js\",   \"webpack\": {     \"enable\": false,     \"bundles\": [],     \"customBundlerFunction\": null   },   \"customBundler\": {     \"enable\": false,     \"bundles\": [],     \"customBundlerFunction\": null   },   \"verbose\": false }Default when an app is created with the app generator: [Object]{   \"sourcePath\": \"js\",   \"webpack\": {     \"enable\": true,     \"bundles\": [       {         \"config\": {           \"entry\": \"${js.sourcePath}/main.js\",           \"devtool\": \"source-map\",           \"output\": {             \"path\": \"${publicFolder}/js\"           },           \"resolve\": {             \"alias\": {               \"fs\": false,               \"path\": false             },             \"modules\": [\"${js.sourcePath}\", \"${publicFolder}/js\", \"${appDir}\", \"node_modules\"]           }         }       }     ],     \"customBundlerFunction\": null   },   \"customBundler\": {     \"enable\": false,     \"bundles\": [],     \"customBundlerFunction\": null   },   \"verbose\": false }If you're using webpack, Roosevelt will also postprocess your webpack config to do the following things:If your config does not set mode, then Roosevelt will set mode to development if Roosevelt is in development mode.If your config does not set devtool, then Roosevelt will set devtool to source-map if Roosevelt is in development mode.If Roosevelt's prodSourceMaps feature is enabled, then Roosevelt will set devtool to source-map if Roosevelt is in production mode.If your config does not set optimization, then Roosevelt will set optimization to the following:optimization = {   minimize: true,   minimizer: [     new TerserPlugin({       extractComments: false // disable LICENSE.txt file generation     })   ] }minify [Boolean]: Enables HTML and CSS minification. This feature is automatically disabled during development mode. Minification for JS files is handled by the js params above. Default: true.minifyHtmlAttributes [Object]: Settings to pass to minify-html-attributes.enable [Boolean or String]: Whether or not to enable minify-html-attributes.Available options:\"production\": Enable only in production mode.\"development\": Enable in all modes.true: Will be taken to mean \"production\".minifyHtmlAttributesParams: Params to pass to minify-html-attributes.Note: Roosevelt will always override 3 params from minify-html-attributes:htmlDir will always be set to Roosevelt's preprocessedViewsPath.cssDir will always be set to Roosevelt's preprocessedStaticsPath.jsDir will always be set to Roosevelt's preprocessedStaticsPath.Default: [Object]{   \"enable\": false,   \"minifyHtmlAttributesParams\": {} }prodSourceMaps [Boolean]: Enables source maps for minified CSS and JS files in production mode. Default: false.symlinks [Array of Objects]: Declare one or more symlinks to be generated at runtime. Default: [].source [String]: Path to be linked to.Roosevelt will not attempt to generate a symlink to a source path that does not exist.dest [String]: Path to place symlink.If this destination path already exists it will not be overwritten.Will be set to the following in apps generated with the app generator:[   {     \"source\": \"${staticsRoot}/images\",     \"dest\": \"${publicFolder}/images\"   } ]versionedPublic [Boolean]: If set to true, Roosevelt will prepend your app's version number from package.json to your public folder. Versioning your public folder is useful for resetting your users' browser cache when you release a new version. Default: false.Deployment optionshostPublic [Boolean]: Whether or not to allow Roosevelt to host the public folder. By default in production-proxy mode Roosevelt will not expose the public folder. It's recommended instead that you host the public folder through another web server, such as Apache or nginx that is better optimized for hosting static files. Default: false.localhostOnly [Boolean]: Listen only to requests coming from localhost in production mode. This is useful in environments where it is expected that HTTP requests to your app will be proxied through a more traditional web server like Apache or nginx. This setting is ignored in development mode. Default: true.shutdownTimeout [Number]: Maximum amount of time in milliseconds given to Roosevelt to gracefully shut itself down when sent the kill signal. Default: 30000 (30 seconds).Template literals in rooseveltConfig valuesAll config values support template literal style variable syntax that you can use to refer to other Roosevelt parameters. For example:{   \"css\": {     \"sourcePath\": \"css\",     \"output\": \".build/${css.sourcePath}\"   } }Resolves to:{   \"css\": {     \"sourcePath\": \"css\",     \"output\": \".build/css\"   } }EventsRoosevelt provides a series of events you can attach code to by passing a function to the desired event as a parameter to Roosevelt's constructor like so:(async () => {   await require('roosevelt')({     onServerStart: (app) => { /* do something */ }   }).startServer() })()Event listThese are sorted in order of when they are executed during the lifecycle of a Roosevelt app.onBeforeMiddleware(app): Fired when the app begins initializing, prior to any middleware being loaded into the app.app: The Express app created by Roosevelt.onBeforeControllers(app): Fired during initialization, prior to any routes being loaded.app: The Express app created by Roosevelt.onBeforeStatics(app): Fired during initialization, prior to any statics being written.app: The Express app created by Roosevelt.onClientViewsProcess(template): Fired to preprocess templates before being exposed to the client.template: A string containing a template written in any JS-based templating engine (e.g. Teddy, Pug, ejs, etc).onServerInit(app): Fired when the server is fully initialized and all middleware has been loaded but before the server has started.app: The Express app created by Roosevelt.onServerStart(app): Fired when the server starts.app: The Express app created by Roosevelt.onAppExit(app): Fired when the app recieves a kill signal.app: The Express app created by Roosevelt.Express variables exposed by RooseveltRoosevelt supplies several variables to Express that you may find handy. Access them using app.get('variableName').appDir: The directory the main module is in.appName: The name of your app derived from package.json. Uses \"Roosevelt Express\" if no name is supplied.appVersion: The version number of your app derived from package.json.controllersPath: Full path on the file system to where your app's controllers folder is located.clientControllersBundledOutput: Full path on the file system to where your app's client-exposed controllers folder is located.clientViewsBundledOutput: Full path on the file system to where your app's client-exposed views folder is located.cssCompiledOutput: Full path on the file system to where your app's minified CSS files are located.cssPath: Full path on the file system to where your app's CSS source files are located.debugMarkup: HTML you can add to your custom error pages if you define any that will print server errors if any exist, display the route list, and add some inline JavaScript that will serialize the request's err, req, and res objects so you can interactively examine them in the browser's developer tools. Only available in development mode.env: Either development or production.express: The Express module.expressSession: The express-session module Roosevelt uses internally. Session middleware.expressSessionStore: The session store instance used by express-session module Roosevelt uses internally.htmlPath: Full path on the file system to where your app's HTML static page source files are located.htmlRenderedOutput: Full path on the file system to where your app's rendered and minified static HTML files are located.httpServer: The http server created by Roosevelt.httpsServer: The https server created by Roosevelt.jsPath: Full path on the file system to where your app's JS source files are located.logger: The roosevelt-logger module Roosevelt uses internally. Used for console logging.modelsPath: Full path on the file system to where your app's models folder is located.package: The contents of package.json.params: The parameters you sent to Roosevelt.preprocessedStaticsPath or preprocessedStatics: Full path on the file system to where your app's preprocessed statics folder is located.preprocessedViewsPath or preprocessedViews: Full path on the file system to where your app's preprocessed views folder is located.publicFolder: Full path on the file system to where your app's public folder is located.roosevelt:state: Application state, e.g. disconnecting if the app is currently being shut down.router: Instance of router module used by Roosevelt.routePrefix: Prefix appended to routes via the routePrefix param. Will be '' if not set.routes: List of all routes in the app.staticsRoot: Full path on the file system to where your app's statics folder is located.view engine: Default view engine file extension, e.g. .html.viewEngine e.g. teddy by default: Any view engine(s) you define will be exposed as an Express variable. For instance, the default view engine is teddy. So by default app.get('teddy') will return the teddy module.viewsPath or views: Full path on the file system to where your app's views folder is located.Additionally the Roosevelt constructor returns the following object:expressApp [Object]: The Express app created by Roosevelt.initServer(callback) or init(callback) [async Function]: Starts the HTML validator, sets up some middleware, runs the CSS and JS preprocessors, and maps routes, but does not start the HTTP server. Call this method manually first instead of startServer if you need to setup the Express app, but still need to do additional setup before the HTTP server is started. This method is automatically called by startServer once per instance if it has not yet already been called. Takes an optional callback.startServer() or start() [async Function]: Calls the listen method of http, https, or both (depending on your configuration) to start the web server with Roosevelt's config.stopServer(params) or stop(params) [Function]: Stops the server from accepting new connections before exiting and takes an optional argument stopServer({ persistProcess: true }) which will allow the process to remain active after the server has closed.Recognized environment variablesThe following is a list of environment variables that Roosevelt listens for.NODE_ENV:Set to production to force the app into production mode.Set to development to force the app into development mode.NODE_PORT: Default HTTPS port to run your app on.Will set HTTP port instead if HTTPS is disabled.HTTP_PORT: Default HTTP port to run your app on. Takes precedence over NODE_PORT.HTTPS_PORT: Default HTTPS port to run your app on.DISABLE_HTTPS: When set to true, the HTTPS server will be disabled and the app will revert to HTTP regardless of what is set in the rooseveltConfig.MAKE_BUILD_ARTIFACTS: Lets you set Roosevelt's makeBuildArtifacts param via environment variable.Environment variable precedence:Environment variables supersede your app's rooseveltConfig.Environment variables can be overridden with command line arguments.Command line usageAvailable npm scriptsRoosevelt apps created with the app generator come with the following notable npm scripts prepopulated in package.json:npm run production: Runs the app in production mode.Default shorthands:npm run prodnpm run pnpm startScript is short for: nodemon app.js --production-modenpm run development: Runs the app in development mode.Default shorthands:npm run devnpm run dScript is short for: nodemon app.js --development-modenpm run production-proxy: Runs the app in production mode, but with localhostOnly set to true and hostPublic set to false. This mode will make it so your app only listens to requests coming from localhost and does not serve anything in the public folder. This mode is useful when you want to host your app behind a reverse proxy from a web server like Apache or nginx and is considered a best practice for Node.js deployments.Default shorthands:npm run prodproxynpm run xScript is short for: nodemon app.js --production-proxy-modenpm run generate-certs: Generates self-signed HTTPS certs for your app.Script is short for: node ./node_modules/roosevelt/lib/scripts/certsGenerator.jsSupports command line flags --appDir somewhere --secretsPath somewhere to override those default locations.npm run generate-session-secret: Generates a secret key for the express-session module.Script is short for: node ./node_modules/roosevelt/lib/scripts/sessionSecretGenerator.jsSupports command line flags --appDir somewhere --secretsPath somewhere to override those default locations.npm run generate-secrets: Runs the above three scripts.Supports command line flags --appDir somewhere --secretsPath somewhere to override those default locations.Available command line argumentsnode app.js --production-mode: Runs the app in production mode.Default shorthands:--prod-pnode app.js --development-mode: Runs the app in development mode.Default shorthands:--dev-dnode app.js --build: Only runs the build scripts and doesn't start the app.Default shorthands:-bnode app.js --jsbundler=verbose: Prints verbose errors from the JS bundler to the console.Default shorthands:--jsb=verbose-j=verbosenode app.js --jsbundler=verbose-file: Prints verbose errors from the JS bundler to the console as well as write a jsBundlerError.txt file to the app's root directory containing the full error.Default shorthands:--jsb=verbose-file-j=verbose-filenode app.js --production-proxy-mode: Runs the app in production mode, but with localhostOnly set to true and hostPublic set to false. This mode will make it so your app only listens to requests coming from localhost and does not serve anything in the public folder. This mode is useful when you want to host your app behind a reverse proxy from a web server like Apache or nginx and is considered a best practice for Node.js deployments.Default shorthands:--prodproxy-xnode app.js --enable-validator: Forces the HTML validator to be enabled.Default shorthands:--html-validator-hnode app.js --disable-validator: Forces the HTML validator to be disabled.Default shorthands:--raw-rCombining npm scripts and command line argumentsThe npm scripts can be combined with the command line flags.For example, running npm run dev -- --disable-validator will run your app in development mode and force the HTML validator to be disabled."})
window.siteTexts.push({file: "docs/0.31.3/deployment/index.html", title: "deployment (0.31.3)", text: "If you want to deploy a Roosevelt multi-page app or single-page app live to the internet, there are some things you should do to harden it appropriately if you expect to take significant traffic.Run the app behind a reverse proxy and use all the CPU coresTo do this, use the production-proxy-mode command line flag and run the process on multiple cores using a tool like pm2.Then host your app behind a reverse proxy from a web server like Apache or nginx, which is considered a best practice for Node.js deployments.Running the app in production-proxy mode runs the app in production mode, but with localhostOnly set to true and hostPublic set to false. This mode will make it so your app only responds to requests coming from the proxy server and does not serve anything in the public folder. You will then need to serve the contents of the public folder directly via Apache or nginx.Use HTTPSSetting up HTTPS can be tricky to configure properly especially for novices, so it can be tempting not do it to simplify deployment, but your website won't be seen as professional if it isn't served up via HTTPS. It's worth the effort to set it up.Use a caching service or a database to store sessionsRoosevelt's default session store for express-session works great if your app only needs a single process, but if you're spreading your app across multiple processes or servers, you will need to reconfigure express-session to use a caching service that supports replication like redis or a database that supports replication like PostgreSQL in order to scale your app.Use Roosevelt's static site generator instead if you canNot all sites need to execute logic dynamically on the backend. If you can get away with making a site using a static site generator, then that will dramatically simplify deployment. rooseveltframework.org is itself a static site generated with Roosevelt's static site generator, and you can view its source code here."})
window.siteTexts.push({file: "docs/0.31.3/get-started/index.html", title: "get started (0.31.3)", text: "🧸 roosevelt PrerequisitesFirst you will need to install Node.js. Both the current and LTS version of Node.js are supported. It is recommended that you have both the current and LTS versions of Node.js installed on your system. To do that, it is recommended that you install Node.js using a Node.js version manager like nvm or nvm-windows rather than the official installer, as a version manager will allow you to switch between multiple versions of Node.js easily.Make a Roosevelt app🏭🧸 mkroosevelt The simplest way to make a Roosevelt app is to simply run the following command:npx mkrooseveltThen follow the prompts to decide whether to make a multi-page app, static site generator, or a single page app.Other ways to make Roosevelt apps🏭🧸 generator-roosevelt What the mkroosevelt command does under the hood is call the Roosevelt app generator, a command line script based on Yeoman, to create a sample Roosevelt app for you. You could also install the app generator to your system if you like. To do that, first globally install Yeoman and the Yeoman-based Roosevelt app generator:npm i -g yo generator-rooseveltThen create a Roosevelt app using the Roosevelt app generator:yo rooseveltThen follow the prompts.Create a Roosevelt app manuallyIt is also possible to create a Roosevelt app without using the app generator. This will result in a more minimalist default configuration (e.g. no CSS or JS preprocessors enabled by default).To do that:First create a new folder and cd into it.Then npm i roosevelt. This will create a node_modules folder with Roosevelt and its bare minimum dependencies.Create a file named app.js.Put this code in app.js:(async () => {   await require('roosevelt')({     makeBuildArtifacts: true   }).startServer() })()Then node app.js. If the makeBuildArtifacts parameter is set to true like the above code example, an entire Roosevelt app with bare minimum viability will be created and the server will be started.Default directory structureBelow is the default directory structure for an app created using the Roosevelt app generator.Application logicapp.js or build.js: Entry point to your application. Feel free to rename this, but make sure to update package.json's references to it. It defaults to app.js when building a multi-page app or a single page app. It defaults to build.js when building a static site generator.lib: A folder for any includable JS files that don't belong in any of the other directories. It has been added to the require stack so you can simply require('lib/someFile').mvc: Folder for models, views, and controllers.controllers: Folder for controller files; the \"C\" in MVC. This is where your HTTP routes will go.models: Folder for model files; the \"M\" in MVC. This is where you will get data to display in your views e.g. by querying a database or do other business logic.views: Folder for view files; the \"V\" in MVC. This is where your HTML templates will go.Static filesstatics: Folder for source CSS, image, JS, and other static files. By default some of the contents of this folder are symlinked to the public folder, which you can configure via params.css: Folder for source CSS files.images: Folder for source image files.js: Folder for source frontend JS files.pages: Folder for HTML templates that get rendered as static pages and deposited into the public folder.Build artifacts.build: Folder for build artifacts.preprocessed_statics: Static files that have been preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled.preprocessed_views: View files that have had their uses of web components progressively enhanced using the progressively-enhance-web-components module and/or preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled.The output JS files from the clientControllers or clientViews features.public: All contents within this folder will be exposed as static files. For the most part, the contents of this folder will be populated from the statics folder. This folder is added to .gitignore by default because it is considered a build artifact.Application infrastructure.gitignore: A standard file which contains a list of files and folders to ignore if your project is in a git repo. Delete it if you're not using git. The default .gitignore file contains many common important things to ignore, however you may need to tweak it to your liking before committing a fresh Roosevelt app to your git repo.node_modules: A standard folder created by Node.js where all modules your app depends on (such as Roosevelt) are installed to. This folder is created when installing dependencies using the npm i command. It is added to .gitignore by default because it is considered a build artifact.package.json: A file common to most Node.js apps for configuring your app.package-lock.json: An auto-generated file common to most Node.js apps containing a map of your dependency tree. This is created after you run npm i for the first time. Once the file exists within your project, you can run npm ci instead of npm i when installing dependencies, which will be more performant and will result in reproducible builds that always have the same versions of every dependency, including downstream dependencies.rooseveltConfig.json: Where your Roosevelt config is stored and what your params are set to. These values can be overridden when calling Roosevelt's constructor.secrets: A folder for \"secret\" files, e.g. session keys, HTTPS certs, passwords, etc. It is added to .gitignore by default because it contains sensitive information, so it should not be committed to git."})
window.siteTexts.push({file: "docs/0.31.4/changelog/index.html", title: "changelog (0.31.4)", text: "0.31.4Fixed a bug in the CSRF handler.Updated dependencies.0.31.3Added warning to the debug markup on 403 \"forbidden\" POST error pages instructing the user to include the CSRF token in their request.Fixed a bug that could cause undefined to print on error pages in certain circumstances.Updated dependencies.0.31.2Fixed bug that caused cookie parser to not load under certain circumstances.Updated dependencies.0.31.1Changed expressSession default to true so that csrfProtection's default being true will actually function.Updated dependencies.0.31.0Breaking: npm run generate-csrf-secret script removed, as it is no longer necessary due to an internal switch of Roosevelt's CSRF dependency from csrf-csrf to csrf-sync. You should delete any csrfSecret.json files in your secrets directory after upgrading Roosevelt, as the file is no longer needed. You should also remove the npm run generate-csrf-secret from your package.json.Added expressVersion param which lets you decide which version of Express to use. Choose between either 4 or 5. This option exists because there are significant differences between Express 4 and Express 5. Default: 5.Added glob pattern support to CSRF route exemption param.Removed enableCLIFlags param which has been obsolete for some time and didn't actually do anything.Changed the deprecation checker to only run in development mode and added a new param deprecationChecks that will let you disable it entirely.Updated dependencies.0.30.7Added new onBeforeControllers event.Added new html.folderPerPage param.Made it easier to debug HTML validation errors on static sites.Fixed bugs associated with the stopServer() method.Fixed bugs associated with using a roosevelt.config.json file in your app.Fixed a bug that could cause middleware errors not to flow through the middleware stack correctly.Copyedited documentation significantly.Updated dependencies.0.30.6Added onBeforeStatics event.Altered makeBuildArtifacts log to be a warning.Fixed writing JS file log to be properly classified as info instead of log.Fixed a bug that could cause the static site generator to not write new files even if the file has changed.Updated dependencies.0.30.5Added error handling for if you supply Roosevelt constructor params to initServer or startServer.Fixed bugs that could cause initServer, startServer, and stopServer to not be properly awaitable.Fixed bug that would cause undefined to print on error pages in Roosevelt apps without a package.json version defined.Updated dependencies.0.30.4Fixed bugs that prevented CSS source maps from working correctly.Updated dependencies.0.30.3Fixed model overriding precedent in static site generator.0.30.2Fixed a crash associated with the default catch-all route.0.30.1Fixed a bug that caused two catch-all routes to appear in the router stack.Updated dependencies.0.30.0Breaking: Upgraded to Express 5.x.To migrate:Most Roosevelt apps probably only need to change * routes to *all.Apps that use more complex routing may need other changes.Full list of considerations for migrating to Express 5: https://expressjs.com/en/guide/migrating-5.htmlAdded expressSessionStore Express variable, which is the session store instance used by express-session module Roosevelt uses internally.Added support for catch-all * in static site generator model definitions.Updated dependencies.0.29.5Added new copy param that will copy files from a source location to a destination location.Added new feature to integrated webpack bundler to disable LICENSE.txt generation by default. This can be overridden by supplying your own optimization param to your webpack config.Improved docs.Updated dependencies.0.29.4Added first-line comment blocklist support to the static site generator.Added static site generator folder to the require module path.Added async/await support for static site models.Updated dependencies.0.29.3Fixed a bug that could cause some routes not to load.Fixed a bug that could cause more than one * route to end up in the router stack.Updated dependencies.0.29.2Fixed a bug that would cause MAKE_BUILD_ARTIFACTS to supersede the --build CLI flag.Fixed a bug that would cause an error to falsely print about not being able to create symlinks.Updated dependencies.0.29.1Fixed bugs associated with MAKE_BUILD_ARTIFACTS sometimes not working properly.Updated dependencies.0.29.0Breaking: Moved default output location for clientControllers and clientViews to the .build folder.To migrate your app, you will likely need to change js.webpack.bundles.config.resolve.modules to replace any entry that has \"${publicFolder}/js\" with \"${buildFolder}/js\".Breaking: Changed default of preprocessedViewsPath param from \".build/.preprocessed_views\" to \".build/preprocessed_views\" and changed default of preprocessedStaticsPath param from \".build/.preprocessed_statics\" to \".build/preprocessed_statics\".Added buildFolder param to customize the name of the .build folder.Altered output of controllersBundler and viewsBundler feature to produce files that are easier to read.Updated dependencies.0.28.1Fixed a bug where HTTPS certs wouldn't always automatically generate when they should.Updated various dependencies.0.28.0Breaking: Removed config auditor feature.Added more checks to the deprecation checker.Updated dependencies.0.27.0Breaking: Changed http/s param structure:Changed port param to http.port and changed the default to 43763.Changed https.port param default to 43711.Removed https.force param. Non-secure http can now be disabled via http.enable being set to false.Removed authInfoPath, passphrase, caCert, requestCert, and rejectUnauthorized params. Replaced them with options where you can pass any native option.The ca, cert, key, and pfx params can take file paths relative to your secretsDir in addition to everything else natively supported (strings, buffers, and arrays of strings or buffers).The file paths get resolved within arrays if you pass arrays to any of those as well.These collective changes mean most Roosevelt apps will need to alter their Roosevelt configs from something that looks like:\"port\": 19679, \"https\": {   \"enable\": true,   \"port\": 19679,   \"force\": true,   \"authInfoPath\": {     \"authCertAndKey\": {       \"cert\": \"cert.pem\",       \"key\": \"key.pem\"     }   } },To be something like this instead:\"http\": {   \"enable\": false }, \"https\": {   \"enable\": true,   \"port\": 19679,   \"options\": {     \"cert\": \"cert.pem\",     \"key\": \"key.pem\"   } },Breaking: Changed behavior of NODE_PORT environment variable to now set https port when https is enabled and fall back to http if https is disabled.Breaking: Moved the versioning of webpack from Roosevelt itself to the app. You will need to declare webpack as a dependency in your app if you intend to use the JS bundler feature in Roosevelt.Breaking: Changed js.webpack.bundles.env param to require values development or production instead of dev or prod.Breaking: Changed js.webpack.bundles.verbose param to js.verbose.Breaking: Changed --webpack, --wp, and --w CLI flags to --jsbundler, --jsb, and --j respectively.Breaking: Changed default of preprocessedViewsPath param from 'mvc/.preprocessed_views' to '.build/.preprocessed_views' and changed default of preprocessedStaticsPath param from '.preprocessed_statics' to '.build/.preprocessed_statics'. Collectively these changes mean most Roosevelt apps should remove .preprocessed_views and .preprocessed_statics from .gitignore and add .build instead.Added new param js.customBundler that will let you define a custom JS bundler.Added new param js[bundler].customBundlerFunction that will let you define custom behavior for default supported JS bundlers like Webpack.Updated dependencies.0.26.1Added new Express variable debugMarkup that contains HTML you can add to your custom error pages if you define any that will print server errors if any exist, display the route list, add some inline JavaScript that will serialize the request's err, req, and res objects so you can interactively examine them in the browser's developer tools. Only available in development mode.Added the aforementioned debug markup to the default error pages in development mode as well.Added routes Express variable which will list all routes in the app.Added new recognized environment variable: MAKE_BUILD_ARTIFACTS will allow you to set Roosevelt's makeBuildArtifacts config.Added new param minifyHtmlAttributes: Settings to pass to minify-html-attributes.Options:enable: Whether or not to enable minify-html-attributes.Default: [Boolean] false.Available options:'production': Enable only in production mode.'development': Enable in all modes.true: Will be taken to mean 'production'.minifyHtmlAttributesParams: Params to pass to minify-html-attributes.Default: [Object] {}Default: [Object]{   \"enable\": true,   \"minifyHtmlAttributesParams\": {} }Note: Roosevelt will always override 3 params from minify-html-attributes:htmlDir will always be set to Roosevelt's preprocessedViewsPath.cssDir will always be set to Roosevelt's preprocessedStaticsPath.jsDir will always be set to Roosevelt's preprocessedStaticsPath.Added new param preprocessedStaticsPath: Relative path on filesystem to where your preprocessed static files will be written to. Preprocessed static files are view files that have been preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled.Default: [String] \".preprocessed_statics\".This feature will only be active if minifyHtmlAttributes is enabled.Replaced isomorphicControllers param with clientControllers param and made it function similarly to clientViews.Fixed a bug with displaying app version on default error pages.Fixed a bug that could lead to a counter-intuitive error if your template rendered an empty response in dev mode.Updated various dependencies.0.26.0Breaking: Added new param preprocessedViewsPath: Relative path on filesystem to where your preprocessed view files will be written to. Preprocessed view files are view files that have had their uses of web components progressively enhanced using the progressively-enhance-web-components module.Default: [String] \"mvc/.preprocessed_views\".To disable this feature, set the value to false.This is breaking because if you leave it enabled by default (recommended), you will need to add .preprocessed_views to your .gitignore.Breaking: Switched to external source maps for the CSS preprocessor. This necessitated changing the custom CSS preprocessor API to require returning an object instead of a string.If you have written a custom CSS preprocessor, the new return value is:return {   css: 'write code to output css here',   sourceMap: 'write code to output source map here (optional)' }Added new param prodSourceMaps to allow source maps to be generated in prod mode for both CSS and JS.Added IP address to the output when the server starts.Added new CLI script secretsGenerator.js that allows you to combine certsGenerator.js, csrfSecretGenerator.js, and sessionSecretGenerator.js into one command.Added feature to override appDir and secretsPath for the CLI scripts using --appDir somewhere and --secretsPath somewhere CLI flags.Added exceptionRoutes option to the frontendReload param.Added a check for broken symlinks in the public folder, which will be purged if any exist.Added support for placing your Roosevelt config in a roosevelt.config.json file in addition to the previous options.Added better error when attempting to start a Roosevelt app on a file system that does not support symlinks.Changed source maps from inline to external.Fixed a bug that caused the JS bundler to not log when it was writing JS files.Fixed a bug that caused a statics/pages directory being created when it isn't needed.Fixed a bug that could cause the public folder and statics folder to be created even when makeBuildArtifacts is disabled.Fixed a bug that caused the views bundler and isomorphic controllers finder to write a new views bundle to disk even when it wasn't needed.Fixed frontendReload not working in Firefox with the default HTTPS config.Updated various dependencies.0.25.0Breaking: Supplying an allowlist to the views bundler will now implicitly disable exposeAll.Breaking: Renamed secretsDir param to secretsPath.Updated all file path express variables to include full absolute paths.Fixed various bugs in the views bundler feature.Fixed a rare bug where CSRF and session secrets could be written to the wrong directory.Fixed a bug where HTTPS certs could be automatically generated when they shouldn't be.Updated various dependencies.0.24.0Breaking: Altered startServer and initServer methods to now be async. They now need to be awaited to avoid possible race conditions.As a result, starting the app in a single line needs to be updated to await (require('roosevelt').startServer()).Callback arguments have been removed from these methods as well.Breaking: Removed app.get('routes'), onReqAfterRoute, onReqBeforeRoute, onReqStart, and onStaticAssetsGenerated.Breaking: Renamed app.httpServer to app.get('httpServer') and app.httpsServer to app.get('httpsServer').Breaking: Added enable param to clientViews. If your app uses the clientViews feature, you will need to add this param to continue using the feature.Added new method onBeforeMiddleware.Added start and stop method shorthands for startServer and stopServer respectively.Refactored various things under the hood to improve code quality, performance, and reduce unnecessary dependencies.Updated various dependencies.0.23.2Removed toobusy feature since it is temperamental and the dependency is no longer maintained.Refactored internal wildcardMatch to use minimatch under the hood.Replaced html-minifier with html-minifier-terser since html-minifier-terser is better-maintained.Updated various dependencies.0.23.1Added feature that scans the router stack to move the 404 route (the * route) to the end of the stack every time a new route is added, even if the route is added at runtime so that you can dynamically add routes while the app is running.Updated various dependencies.0.23.0Removed cores feature since it is largely redundant now thanks to the widespread popularity of tools like pm2. Also removed various deprecated cluster module support as well.Updated various dependencies.0.22.16Made it possible to disable helmet by setting the helmet param to false.Updated various dependencies.0.22.15Added option to exempt certain routes from CSRF protection.Updated various dependencies.0.22.14The JS bundler will now add mode: \"development\" and devtool: \"source-map\" automatically to your Webpack bundles in development mode.Updated various dependencies.0.22.13Altered helmet's defaults again. The form-action directive has been set to null. This makes it possible to submit forms to other domains in production mode.0.22.12Added 'unsafe-inline' option to helmet's Content-Security-Policy's script-src directive by default in Roosevelt. This will prevent inline scripts from being blocked in production mode.Updated various dependencies.0.22.11Added DISABLE_HTTPS environment variable which when set to true, the HTTPS server will be disabled and the app will revert to HTTP regardless of what is set in the rooseveltConfig.Updated various dependencies.0.22.10Enabled WAL in the SQLite instance used for session storage by default.Updated various dependencies.0.22.9Fixed an issue with cert generation from CLI scripts properly this time.0.22.8Fixed an issue with cert generation from CLI scripts.Updated various dependencies.0.22.7Added a max age to the default express-session configuration.Fixed an issue with cert generation in production mode.Updated various dependencies.0.22.6Fixed a bug that caused self-signed certs to get regenerated every time the app restarted.Updated various dependencies.0.22.5Certs generator will now run in production mode as well if https is enabled and if the files do not already exist. This behavior can be suppressed by setting https.autoCert to false.Fixed bug that prevented the static site generator feature from working in dev mode when the HTML validator was enabled.Fixed README formatting typos.Updated various dependencies.0.22.4Made it possible to set expressSession to true which will set a sane default config so you don't have to spell one out.0.22.3Updated default session store to use SQLite instead of an in-memory database so that sessions are not invalidated when the server restarts.Updated various dependencies.0.22.2Fixed a bug that caused self-signed certs to get regenerated every time the app restarted.Updated various dependencies.0.22.1Exposed the express-session middleware for use in Roosevelt apps.Updated various dependencies.0.22.0Breaking: Added a unified secrets directory for various app secrets such as HTTPS certs, session secret, CSRF secret, etc. The name of the directory is configurable, but when upgrading an app from the previous version, you may need to alter your rooseveltConfig to remove directories from your cert or key paths. You must now specify only a file name in those params.Added support for express-session for session support.Added CSRF protection.Improved dev sync script for developing Roosevelt significantly.Updated various dependencies.0.21.16Fixed an issue that could cause the server to start before all the controller routes were loaded.Updated various dependencies.0.21.15Updated various dependencies.0.21.14Updated various dependencies.0.21.13Certs will be auto-generated in dev mode now if they don't exist.Various dependencies updated.0.21.12Fixed isomorphic controllers bundler webpack bug in Windows.Various dependencies updated.0.21.11Added a new --build CLI flag that will instruct Roosevelt to just build the build artifacts but not start the server.Added new onStaticAssetsGenerated event that is fired when the server finishes init but before the server starts.Fixed an issue that would cause the server to start even when makeBuildArtifacts is set to staticsOnly. This has the side effect of causing serverStart() to revert to the behavior of init() if makeBuildArtifacts is set to staticsOnly.Fixed a bug that would cause roosevelt-router to produce a false negative when detecting teddy.Various dependencies updated.0.21.10Added --webpack=verbose and --wp=verbose-file CLI flags to make it easier to see verbose webpack errors. Available shorthands: --wp and -w.Added detection of undefined template literal variables (e.g. via typo) in rooseveltConfig.Added more helpful error if starting an app with broken symlinks.Various dependencies updated.0.21.9Fixed frontend reload when https is enabled with self-signed certs.Removed parent-require dependency.Added new dev_sync.sh to make writing code for Roosevelt easier. See instructions on how to use it in the README.Various dependencies updated.0.21.8Added wildcard matching to views bundler feature.Fixed bug that could cause build artifact generation to crash starting the app.Various dependencies updated.0.21.7Fixed CSS preprocessor breaking on Windows when using the default configuration in a newly generated app.Various dependencies updated.0.21.6The certs-generator script's default name has been changed to generate-certs. The config auditor will now expect it to be named that.The config-audit script's default name has been changed to audit-config. The config auditor will now expect it to be named that.allowlist in CSS preprocessor now supports wildcard matching, e.g. dir/*.Various dependencies updated.0.21.5allowlist and blocklist in static site generator feature now supports wildcard matching, e.g. dir/*.Various dependencies updated.0.21.4Added allowlist and blocklist to the static site generator feature.Fixed bug with the static site generator feature that required absolute paths for including child templates in a main template.Various dependencies updated.0.21.3When versionedPublic is true, Roosevelt will no longer deposit static HTML pages into the versioned directory.Various dependencies updated.0.21.2Fixed bug where the config auditor would complain about the makeBuildArtifacts param being set to string.Static site generator will now run the HTML validator against rendered templates in dev mode only.Various dependencies updated.0.21.1Static site generator can now be supplied models by file instead of by configuration. If model data is not supplied by configuration, Roosevelt will try to automatically load a model from a JS file with the same name alongside the template if it exists instead.Static site generator will now run the HTML validator against rendered templates.Bumped CI Node versions.0.21.0Breaking: htmlMinifier param renamed and expanded to html. You will need to update your Roosevelt config.Added feature html.sourcePath, html.models, and html.output which lets you generate static HTML pages from the your statics directory by compiling them with a view engine and depositing the output to the public folder at start time.Fixed issue with symlinks that would cause symlinking to a file rather than a directory to fail in Windows.Some error message copyediting.Some minor refactoring and documentation fixes.Various dependencies updated.0.20.1makeBuildArtifacts will now accept a new value of 'staticsOnly' which will allow Roosevelt to create static files but skip the creation of the MVC directories.initServer can now also be called as init instead.Various dependencies updated.0.20.0Breaking: Renamed generateFolderStructure to makeBuildArtifacts.Various dependencies updated.Breaking: Among them, formidable was updated which is a breaking change for any app that takes file uploads as property names in req.files have been renamed, most notably file.path is now file.filepath and file.name is now file.originalname.Removed checkDependencies.0.19.14Fixed bug that required admin permissions to start an app in Windows.0.19.13Added script to generate self-signed HTTPS certs:npm run certs-generator: Generates self-signed HTTPS certs for your app.Default shorthand:npm run cScript is short for: node ./node_modules/roosevelt/lib/scripts/certsGenerator.jsSome refactoring.Various dependencies updated.0.19.12Various dependencies updated.Migrated colors to @colors/colors.0.19.11Fixed bug that caused isoRequire to only work with absolute paths.Various dependencies updated.0.19.10Added roosevelt-router feature to improve support for writing isomorphic code for SPAs.Added isomorphicControllers config option that will permit Roosevelt to make a list of all your controller files that can be used client-side as well so they can be auto-loaded client-side too.Altered clientViews such that the template list will lack file extensions if the file extension of the template matches the default view engine's file extension.Breaking: Default clientViews output bundle changed from bundle.js to views.js.Fixed confusing console warning.HTML validator frontend scripts moved to <head>.Various dependencies updated.0.19.9Made Webpack errors less verbose.Various dependencies updated.0.19.8Updated for support for Node 16.x. This required a migraiton from node-sass to dart-sass.Dropped official Node 15 support, though it will probably still work. Node 14 remains officially supported.Various dependencies updated.0.19.7clientViews allowlist now allows directories.Default command line flags and environment variables recognized by Roosevelt can now be overridden via source-configs.Various dependencies updated.0.19.6Added onAppExit event.Fixed bug with https feature.Various dependencies updated.0.19.5Fix for Node 15 / npm 7 regression. Config auditor and deprecation checker will no longer run as postinstall scripts to compensate for INIT_CWD being removed from npm. These checks will be run exclusively on application first run instead (or any time the public folder is removed). (Closes https://github.com/rooseveltframework/roosevelt/issues/975)Dropped Node 12 support.Various dependencies updated.0.19.4Fixed bug that caused Roosevelt to not listen to NODE_ENV.Moved symlink creation to a separate step and made happen earlier in the app initialization process to maek it easier to work with the various Roosevelt server starting events.Various dependencies bumped.0.19.3Fixed bug which could cause CSS preprocessor to fail if there are subdirectories in your CSS folder.Various dependencies bumped.0.19.2Breaking: clientViews no longer exports a function, instead exporting a JSON object.Breaking: clientViews will no longer minify templates by default.Fixed bug with clientViews exposeAll feature that would cause it to scoop up any system files that might be present in your views directories.Fixed bug with clientViews blocklist mistakenly defaulting to an object instead of an array which could cause crashes in some configurations.Fixed bug with CSS preprocessor that would cause it to scoop up any system files that might be present in your CSS directories.Various dependencies bumped.0.19.1Added ability to configure helmet dependency.Fixed bug that caused frontend reload not to work.Fixed a bug in the Express env variable that would cause it to be incorrectly set at times.Updated some out of date into in the README.Removed some unnecessary code.Various dependencies bumped.0.19.0Breaking: Production mode behavior changed significantly:localhostOnly and alwaysHostPublic defaults were flipped to false and true respectively.alwaysHostPublic was renamed to hostPublic.The --host-public command line flag was removed, since it is no logner needed because hostPublic defaults to true now.New command line flag added called production-proxy to let you opt-in to localhostOnly and alwaysHostPublic being set to true and false respectively as before.Various dependencies bumped.0.18.3You can now use PHP as your templating engine in a Roosevelt app or any other Express application. PHP should be faster than any JS-based templating engine for complex templates since its parser is written in C rather than JS.Breaking: blacklist/whitelist params throughout the API have been renamed to blocklist/allowlist.README was copyedited to improve the clarity of the default behaviors of some of the API, remove outdated information, and other small improvements.The host-public warning was made more prominent so that production mode default behavior regarding statics is less confusing to people.CI improvements.Breaking: Roosevelt is no longer tested on Node 10.x. We didn't do anything to explicitly break older Node versions, but use at your own risk.Various dependencies bumped.0.18.2Added helmet middleware to improve security by default.Replaced body-parser middleware with native Express integration.Various dependencies bumped.0.18.1Changed passphrase option from https.p12.passphrase to https.passphrase so it can be used for certAndKey configurations as well.CI improvements.Various dependencies bumped.0.18.0Replaced the vnu-jar based HTML validator with express-html-validator 🎉.Roosevelt no longer does any background process management as a result.Moved all developer facing dependencies to optionalDependencies.They can be omitted from installion when using npm i --no-optional.Refactored frontend reload implementation.check-dependencies now only runs in dev mode.API changes:Removed separateProcess from htmlValidator.Removed port from htmlValidator.Removed showWarnings from htmlValidator.Added validatorConfig to htmlValidator which respresents a set of rules for the validator to check for.Rules can also be set in a .htmlValidate.json placed in the app root.Removed verbose from frontendReload.These logs are now controlled by the general verbose logging param.Removed ROOSEVELT_VALIDATOR environment variable.Removed ROOSEVELT_AUTOKILLER environment variable.Removed --attach-validator and -a cli flags.Removed --background-validator and -b cli flags.Removed --disable-validator-autokiller, --no-autokiller, and -n cli flags.Removed --enable-validator-autokiller, --html-validator-autokiller, and -k cli flags.Removed dependencies:execafkillhtml-validatorprismjsps-nodetampervnu-jarVarious dependencies bumped.0.17.1Fixed a CSS bug where CSS files were still not being written due to a file existence check.Fixed a CSS bug where empty CSS files were being written because their LESS equivalent would never generate CSS in that particular file.Various dependencies bumped.0.17.0Breaking: Replaced staticsSymlinksToPublic with symlinks.Breaking: Replaced routers param with a simplified routePrefix param which defines a subfolder to mount the app to.Breaking: Renamed multipart param to formidable.Added ability to configure Roosevelt via a rooseveltConfig.json config file placed in app root instead of from a rooseveltConfig object in package.json.Added router Express variable that opens up access to internally used router instance.Added routePrefix Express variable that exposes currently used routePrefix or an empty string if not used.Fixed bug where changes to CSS files were not being written to the output directory.Refactored internal fsr module.Updated internal usage of formidable API.Internal changes to stabilize the automated tests.Various dependencies bumped.0.16.2Added deprecation check for old compiler sub modules.Various dependencies bumped.0.16.1Stopped the config auditor from complaining about obsolete scripts.Fixed cases where some CLI flags weren't being applied to config.Test fixes.Various dependencies bumped.0.16.0Replaced browserify with webpack. This has significant breaking API changes. You will need to totally rewrite your JS bundles from browserify bundles to webpack bundles to upgrade to this version of Roosevelt. It is also recommended that you remove all references to old build artifacts such as .build and .bundled in your application as well from package.json, .gitignore, etc.Eliminated concept of separate JS compilers in favor of declaring this via your webpack config. Note: webpack defaults to minifying JS using terser.Eliminated concept of CSS preprocessor middleware modules in favor of built-in support for LESS, Sass, and Stylus. Other CSS preprocessors can be used as well with a bit of extra configuration.API changes:Removed symlinkToPublic, compiler, output, whitelist, and blacklist params from js.Replaced js.bundles with js.webpack.Removed css.symlinkToPublic.Replaced css.compiler.params.cleanCSS with css.minifier.Added css.compiler.enable.Replaced css.compiler.nodeModule with css.compiler.module.Replaced css.compiler.params with css.compiler.options.css.output is now relative to publicFolder instead of staticsRoot.clientViews.output is now relative to publicFolder instead of staticsRoot.Removed cleanTimer (Obsolete in absense of .build).App cleaner has been removed.source-configs integration is now more tightly knit.Config auditor no longer complains about missing params.Auditor now checks config params on a case-by-case basis.ES6 style variables can now be used in rooseveltConfig referencing other rooseveltConfig entries.Introduced views bundler: An API that allows you to expose view code to frontend JS for client-side templating.Added a button to the validation error page to display the page anyway and another button to disable the validator entirely until the server restarts.Fixed bug with frontend reload causing it to inject the script tag in the wrong location in some situations.Fixed bug where router would cause app routes to fail when no controller files exist.Fixed bug where auto build scanner would crash the app when generateFolderStructure is false.Fixed bug which resulted in a cryptic error if a Roosevelt app was moved to another directory.Fixed bug where symlink failed errors would appear when generateFolderStructure is false.Complete rewrite of HTML validator and related helper scripts.Refactored multipart middlware.Various dependencies bumped.CI improvements.Many rewritten tests.0.15.1Fixed bug causing apps to crash in dev mode.Various dependencies bumped.0.15.0Moved CSS minification from roosevelt-less to Roosevelt using clean-css as a direct dependency. The clean-css library had an update with breaking changes so the rooseveltConfig params in advanced and aggressiveMerging in cleanCSS are now outdated.New default script npm run proddev: Runs the app in production mode, but with the public folder hosted by the Roosevelt app. This is useful for doing development in production mode without having to stage a complex simulation of your production environment, which would likely include hosting static files via another web server better-suited to serving statics like Apache or nginx.Roosevelt now sources configs internally using source-configs.Validator will now be disabled if HTTP_PROXY or HTTPS_PROXY are set but localhost is not in NO_PROXY.Fixed a bug where not having devDependencies or dependencies objects in your app's package.json would throw errors when installing dependencies. Accordingly re-reverted most changes in 0.14.1 to fix buggy behavior with devDependencies in npm installs.The check-dependencies call will now only apply to production dependencies.Some internal refactoring to clean things up.Various dependencies bumped.0.14.6Fixed a bug that caused devDependencies of Roosevelt to be removed if npm i was run more than once.Fixed a bug that caused the automated testing to break if your clone of Roosevelt was not named \"roosevelt.\"Various dependencies bumped.0.14.5staticsSymlinksToPublic will now create missing subdirectories necessary to create a symlink in a target location.Fixed a bug which caused Java hserrpid error logs to pile up in your app directory under certain conditions.Fixed a bug which caused frontend reload to not work on the various error pages.Added code comment above frontend reload script tag to explain that it is injected by Roosevelt.Did some copyediting on frontend reload logging.Various dependencies bumped.0.14.4Added automatic browser reloading when your frontend code changes (via reload).A console warning will now appear explaining why public static assets don't load in prod mode when alwaysHostPublic is set to false (the default).New Express variable added: routes containing a list of all routes loaded in the application.Various dependencies bumped.CI improvements.0.14.3Restored move of several things to devDependencies to shrink production builds. Feature is now activated using ROOSEVELT_DEPLOYMENT environment variable. There are also new corresponding npm run commands dev-install and dev-prune to manage this. See README for more details.Copyediting on several logs to improve clarity.Various dependencies bumped.CI improvements.0.14.2Reverted most changes in 0.14.1 to fix #713, but preserved modularization of htmlValidator.js so that if any devDependencies are missing, the app will not crash in production mode.Various dependencies bumped.0.14.1Moved several things to devDependencies to shrink production builds.Various dependencies bumped.0.14.0Replaced internal logger with roosevelt-logger. Note: this removes the winston Express variable that was previously provided, but it is still indirectly accessible by drilling down through the logger Express variable now. See roosevelt-logger member variable documentation.If custom routers are being used, the res.redirect() method will now prepend the prefix to redirects that are relative to the hostname. To override this setting pass true as the last argument.HTML validator exceptions param will now accept an array of values instead of just a single string value.Various dependencies bumped.CI improvements.0.13.0Roosevelt will now warn you if your CSS/JS compile directory is getting stale and might need to be cleaned with npm run clean. A new cleanTimer param has been added to configure or disable this check.Added new param routers to add support for Express Routers.Added new feature to create custom CSS/JS preprocessors on the fly.Added environment variable to enable/disable the HTML validator autokiller.Added OpenJDK support to the Java HTML Validator.Various dependencies bumped.CI improvements.0.12.2Introduced changelog.Autokiller now sends human-readable GET.Fixed bug which caused the config auditor to report false errors in the case of third party module params being set to configurations other than the default.Fixed bug related to HTTPS cert parsing.Disabled option in HTML minifier which removes HTML comments by default.Various dependencies bumped.CI improvements.0.12.1 and belowHere be dragons…"})
window.siteTexts.push({file: "docs/0.31.4/coding-apps/index.html", title: "coding apps (0.31.4)", text: "Making model filesPlace a file named dataModel.js in mvc/models.Here's a simple example dataModel.js data model:// dataModel.js module.exports = () => {   return { some: 'data' } }In more complex apps, you might query a database to get your data instead.Making view filesViews by default are Teddy templates. See the Teddy documentation for information about how to write Teddy templates.You can also configure Roosevelt to use any templating system supported by Express for your views.Making controller filesController files are places to write Express routes. A route is the term Express uses for URL endpoints, such as https://yoursite/blog or https://yoursite/about.Controllers bind models and views together.To make a new controller, make a new file in the controllers directory, then follow one of the examples below.Example GET route// someController.js module.exports = (router, app) => {   // router is an Express router   // and app is the Express app created by Roosevelt    // standard Express route   router.route('/about').get((req, res) => {     // load a data model     const model = require('models/dataModel')()      // render a template and pass it the model     res.render('about', model)   }) }Example POST routeIn Roosevelt, Cross-Site Request Forgery protection is enabled by default. That means in order to make requests to any POST route, you will need to pass a CSRF token from the server to the browser, and then return that token when making a request from the browser to the server.To do that, include the CSRF token in your HTML form as a hidden input _csrf:// someController.js module.exports = (router, app) => {   router.route('/form').get((req, res) => {     const model = require('models/dataModel')()     model.csrfToken = req.csrfToken() // add CSRF token to the model     res.render('about', model)   }) }<!-- form that include the token in a request body --> <form action=\"/some-protected-endpoint\" method=\"post\">   <input type=\"hidden\" name=\"_csrf\" value=\"{csrfToken}\"> </form>You can also add the token as a request header when performing fetch requests by setting the x-csrf-token header:// request that includes the token in headers const response = await fetch('/some-protected-endpoint', {   method: 'POST',   headers: {     'X-CSRF-TOKEN': csrfToken // extract it from the DOM or something   } })You can also exempt certain routes from CSRF protection or disable the feature entirely by configuration. See configuration section for details.Reusable controllersSometimes it is also useful to separate controller logic from your routing. This can be done by creating a reusable controller module. Reusable controller modules differ from standard controller modules in that they are meant to be called from within other controllers and do not define routes.To create a reusable controller, put a file in your controllers directory that accepts app, req, and res arguments with logic that is meant to execute from within a predefined route.An example of when this might be needed would be having a reusable controller for \"404 Not Found\" pages:// notFound.js — reusable controller module.exports = (app, req, res) => {   const model = { content: 'Cannot find this page' }   res.status(404)   res.render('404', model) }You can then call the reusable controller in any other controller when needed:// someController.js module.exports = (router, app) => {   router.route('/whatever').get((req, res) => {     // test some logic that could fail     // thus triggering the need for the 404 controller     if (something) {       // logic didn't fail       // so render the page normally       let model = require('models/dataModel')       res.render('whatever', model)     }     else {       // logic failed       // so throw the 404 by executing your reusable controller       require('controllers/notFound')(app, req, res)     }   }) }Any controller file that has no arguments or more than two arguments will be considered a reusable controller.Making static pagesYou can also generate static files from templates and models as well.Templates for static pages go in your statics folder (staticsRoot) under the HTML source path (html.sourcePath), which is statics/pages by default.Data models for the templates will be merged from different possible locations to source them from in the following order of precedence:* model in htmlModels.File-level override in htmlModels.Model file.Setting static page modelsTo declare a global model in htmlModels, use the * character:// build.js (async () => {   await require('roosevelt')({     html: {       models: {         '*': {           hello: 'world!'         }       }     }   }).init() })()To declare a model for a specific file in htmlModels:// build.js (async () => {   await require('roosevelt')({     html: {       models: {         'index.html': {           hello: 'world!'         }       }     }   }).init() })()You can also declare a model for a specific page by placing a JS file with the same name alongside the template.For example if an index.js file exists next to index.html, the JS file will be used to set the model so long as it exports either an object or a function that returns an object."})
window.siteTexts.push({file: "docs/0.31.4/configuration/index.html", title: "configuration (0.31.4)", text: "App nameRoosevelt will determine your app's name by examining \"name\" in package.json. If none is provided, it will use Roosevelt Express instead.The rooseveltConfig APIRoosevelt is highly configurable and you can configure it from the following hierarchy of sources in increasing order of precedence:A rooseveltConfig section in your package.json.A roosevelt.config.json file.A rooseveltConfig.json file.Constructor parameters.Environment variables.Command line flags.What \"increasing order of precedence\" means is that command line flags will override environment variables, environment variables will override constructor parameters, constructor parameters will override config files, etc.File path optionsappDir [String]: Root directory of your application. Default: The directory where your app's package.json is located.buildFolder [String]: Where build artifacts will be placed such as the output from preprocessed views, preprocessed statics, the views bundler feature, or the controllers bundler feature. Default: \".build\".You should .gitignore this folder.Not all build artifacts will go into this folder. Some notable exceptions include:.npm-cache: Generated by npm.node_modules: Generated by npm.package-lock.json: Generated by npm.public: This is a separate folder for files generated by Roosevelt that should be exposed publicly as static files. The name of this folder is configurable with the publicFolder param.secrets: Directory that stores certs, keys, and secrets. The name of this folder is configurable with the secretsPath param.controllersPath [String]: Relative path on filesystem to where your controller files are located. Default: \"mvc/controllers\".errorPages [Object]: Relative path on filesystem to where your various error page controller files are located. If you do not supply them, Roosevelt will use its default ones instead:forbidden [String]: Your 403 Forbidden error page. Default: \"403.js\".notFound [String]: Your 404 Not Found error page. Default: \"404.js\".internalServerError [String]: Your 5xx Internal Server Error error page. Default: \"5xx.js\".serviceUnavailable [String]: Your 503 Service Unavailable error page. Default: \"503.js\".modelsPath [String]: Relative path on filesystem to where your model files are located. Default: \"mvc/models\".preprocessedStaticsPath [String]: Relative path on filesystem to where your preprocessed static files will be written to. Preprocessed static files are static files that have been preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled. This feature will only be active if minifyHtmlAttributes is enabled. Default: \".build/preprocessed_statics\".preprocessedViewsPath [String]: Relative path on filesystem to where your preprocessed view files will be written to. Preprocessed view files are view files that have had their uses of web components progressively enhanced using the progressively-enhance-web-components module. To disable this feature, set the value to false. Default: \".build/preprocessed_views\".publicFolder [String]: All files and folders in this directory will be exposed as static files in development mode or when hostPublic is enabled. You should .gitignore this folder. Default: \"public\".secretsPath [String]: Directory that stores certs, keys, and secrets. You should .gitignore this folder. Default: secrets.staticsRoot [String]: Relative path on filesystem to where your source static assets are located. By default this folder will not be made public, but is instead meant to store unprocessed or uncompressed source assets that will later be preprocessed and exposed in public. Default: \"statics\".viewsPath [String]: Relative path on filesystem to where your view files are located. Default: \"mvc/views\".Development mode optionsThese features are only available in development mode.frontendReload [Object]: Settings to use for the browser reload feature which automatically reloads your browser when your frontend code changes.Options:enable [Boolean]: Whether or not to enable this feature.exceptionRoutes [Array of Strings]: List of routes to exclude from this feature.expressBrowserReloadParams [Object]: Params to pass to express-browser-reload. This feature will only be active on pages with a <body> tag.Default: [Object]{   \"enable\": true,   \"exceptionRoutes\": [],   \"expressBrowserReloadParams\": {     \"skipDeletingConnections\": true   } }htmlValidator [Object]: Parameters to send to express-html-validator.enable [Boolean]: Enables or disables the built-in HTML validator.exceptions [Object]: A set of params that can be used to prevent validation in certain scenarios.header [String]: A custom header that when set will disable the validator on a per request basis.modelValue [String]: An entry in your data model passed along with a res.render that when set will disable validation on the rendered HTML.validatorConfig [Object]: html-validate configuration that determines what errors the validator looks for.The full list of available validator rules can be found here.This configuration can also be set by a .htmlValidate.json file placed in your app root directory.mode [String]: Decides whether your app starts in production mode or development mode by default. Default: production.Default: [Object]{   \"enable\": true,   \"exceptions\": {     \"requestHeader\": \"Partial\",     \"modelValue\": \"_disableValidator\"   },   \"validatorConfig\": {} }HTTP optionshttp [Object]: Parameters for configuring the HTTP server.enable [Boolean]: Enable HTTP server.port [Number]: The HTTP port your app will run on.Default when an app is created manually: [Object]{   \"enable\": true,   \"port\": 43763 }Default when an app is created with the app generator: [Object]{   \"enable\": false,   \"port\": 43763 }https [Object]: Parameters for configuring the HTTPS server.enable [Boolean]: Enable HTTPS server.port [Number]: The port your app will run the HTTPS server on.autoCert [Boolean]: Will create self-signed HTTPS certificates in development mode as long as they don't already exist.options [Object]: Configuration that gets passed directly to the HTTPS server instance. Accepts all native settings. For convenience, the ca, cert, key, and pfx params can take file path strings or arrays of file path strings relative to your secretsPath in addition to the native strings and buffers.Default when an app is created manually: [Object]{   \"enable\": false,   \"port\": 43711,   \"autoCert\": true,   \"options\": {} }Default when an app is created with the app generator: [Object]{   \"enable\": true,   \"port\": 43711,   \"autoCert\": true,   \"options\": {     \"cert\": \"cert.pem\",     \"key\": \"key.pem\"   } }App behavior optionsdeprecationChecks: [String] or [Boolean]: Whether or not to run the deprecation checker in Roosevelt. The deprecation checker is a script that runs when your app starts to determine if you have code targeting an older version of Roosevelt that needs to be refactored. Default: 'developmemnt-mode' which will run the checks in development mode only. Set to false to disable it entirely.expressVersion: [Number]: Which version of Express to use. Choose between either 4 or 5. This option exists because there are significant differences between Express 4 and Express 5. Default: 5.bodyParser [Object]: Parameters to supply to the body-parser module which handles POST requests.urlEncoded [Object]: Parameters to supply to body-parser.urlencoded.json [Object]: Parameters to supply to body-parser.json.Default: [Object]{   \"urlEncoded\": {     \"extended\": true   },   \"json\": {} }csrfProtection [Boolean or Object]: Whether to enable Cross-Site Request Forgery protection. Default: true.Requires expressSession to be enabled.To disable the feature, set it to false. To exempt certain routes from protection, supply an object as your config with an array of exemptions.See the CSRF Protection section for more information.Example of exemptions list: [Object]{   \"exemptions\": [     \"/foo\",     \"/bar\",     \"/baz\"   ] }expressSession [Boolean or Object]: Parameters to pass to the express-session module. Default: true.Default if expressSession is set to true: [Object]{   \"secret\": [an auto-generated secret],   \"resave\": false, // usually a bad idea to set to true   \"saveUninitialized\": false, // usually a bad idea to set to true   \"cookie\": {     \"secure\": false, // will automatically be set to true if https is enabled     \"sameSite\": \"strict\", // adds same site enforcement     \"maxAge\": 347126472000 // sets expiration very far in the future (~11 years) to basically never expire   }   \"store\": [the expressSessionStore.instance Roosevelt param] }expressSessionStore [Object]: Define a custom session store to use with express-session instead of the default one provided by Roosevelt. This is recommended if you plan to shard your app across multiple separate processes or scale it to multiple servers.filename [String]: Name of the session file.instance: [Object] A store instance. See this list for compatible stores.preset [String]: Available presets provided by Roosevelt. Only used if instance is not provided.Available options:\"default\": Use Roosevelt's default session store, which is better-sqlite3-session-store.\"express-session-default\": Use express-session's default session store (not recommended).presetOptions [Object]: Options to pass to the preset session store if one is selected. Only used if instance is not provided.checkPeriod [Number]: How long, in milliseconds, the memory store will check for expired items.ttl [Number]: How long, in milliseconds, before a session is expired. If not set, it will default to the value of checkPeriod.max [Number]: The maximum size of the cache, checked by applying the length function to all values in the cache. If not set, there will be no maximum.Either instance or preset must be set for this param to work properly.Default: [Object]{   \"filename\": \"sessions.sqlite\",   \"instance\": null,   \"preset\": \"default\",   \"presetOptions\": {     \"checkPeriod\": 86400000, // one day     \"ttl\": null,     \"max\": null   } }formidable: Parameters to pass to formidable using formidable's API for multipart form processing (file uploads). Access files uploaded in your controllers by examining the req.files object. Roosevelt will remove any files uploaded to the upload directory when the request ends automatically. To keep any, be sure to move them before the request ends.Default: [Object]{   \"multiples\": true // enables multiple files to be uploaded simultaneously }To disable multipart forms entirely, set formidable to false.helmet [Object]: Parameters to pass to the helmet module. This module helps secure Express apps by setting HTTP response headers.The default options are specified in the helmet docs, with the following exceptions that Roosevelt makes to the default Content-Security-Policy settings:The upgrade-insecure-requests directive has been removed. This change prevents this bug.The script-src directive has been set to \"unsafe-inline\". This makes it possible to use inline scripts.The form-action directive has been set to null. This makes it possible to submit forms to other domains.You can reverse any of these changes by configuring helmet yourself.To disable helmet entirely, set the param to false.logging: Parameters to pass to roosevelt-logger. See roosevelt-logger parameters documentation for configuration options.Default: [Object]{   \"methods\": {     \"http\": true,     \"info\": true,     \"warn\": true,     \"error\": true,     \"verbose\": false   } }makeBuildArtifacts [Boolean or String]: When enabled Roosevelt will generate user-specified directories, CSS/JS bundles, etc.Defaults to false for apps created manually.Will be set to true in apps generated with the app generator.Can also accept a value of \"staticsOnly\" which will allow Roosevelt to create static files but skip the creation of the MVC directories.routePrefix [String]: A prefix prepended to your application's routes. Applies to all routes and static files. Default: null.Example: When set to \"foo\" a route bound to / will be instead be bound to /foo/.This prefix is exposed via the routePrefix Express variable which should be used for resolving the absolute paths to statics programmatically.Example: An image located at /images/teddy.jpg can be resolved in a prefix-agnostic way via ${app.get('routePrefix')/images/teddy.jpg}.viewEngine [String]: What templating engine to use, formatted as \"fileExtension: nodeModule\".Defaults to \"none\" for apps created manually.Will be set to \"html: teddy\" in apps generated with the app generator.Also by default when using the app generator, the teddy module is marked as a dependency in package.json.To use multiple templating systems, supply an array of engines to use in the same string format. Each engine you use must also be marked as a dependency in your app's package.json. Whichever engine you supply first with this parameter will be considered the default.Example configuration using multiple templating systems: [Object]{   \"viewEngine\": [     \"html: teddy\",     \"php: php\",     \"ejs: ejs\"   ] }Isomorphic (single page app) optionsclientControllers [Object]: Allows you to expose controller (route) file code to frontend JS for client-side routing.enable [Boolean]: Whether or not to bundle controller files.exposeAll [Boolean]: Option to expose all templates.blocklist [Array of Strings]: List of files or folders to exclude when exposeAll is enabled.Can also be set declaratively by putting a // roosevelt-blocklist comment at the top of any controller file.allowlist [Object of Arrays]: List of JS files to create mapped to which controller files to expose.Example: { \"mainPages.js\": [\"index.js\", \"about.js\"] }Can also be set declaratively by putting a // roosevelt-allowlist file_path comment at the top of any controller file.defaultBundle [String]: File name for the default JS controller bundle.output [String]: Subdirectory within buildFolder to write JS controller bundles to.Default: [Object]\"clientControllers\": {   \"enable\": false,   \"exposeAll\": false,   \"blocklist\": [],   \"allowlist\": {},   \"defaultBundle\": \"controllers.js\",   \"output\": \"js\" }clientViews [Object]: Allows you to expose view (template) file code to frontend JS for client-side templating.enable [Boolean]: Whether or not to bundle view files.exposeAll [Boolean]: Option to expose all templates.blocklist [Array of Strings]: List of files or folders to exclude when exposeAll is enabled.Can also be set declaratively by putting a <!-- roosevelt-blocklist --> tag at the top of any template.allowlist [Object of Arrays]: List of JS files to create mapped to which view files to expose.Example: { \"mainPages.js\": [\"baseLayout.html\", \"footer.html\"] }Can also be set declaratively by putting a <!-- roosevelt-allowlist file_path --> tag at the top of any template.defaultBundle [String]: File name for the default JS view bundle.output [String]: Subdirectory within buildFolder to write JS view bundles to.minify [Boolean]: Option to minify templates that are exposed via this feature.Be careful with this feature because it can break your templates depending on which templating system you use, and as such it is off by default. You may need to make liberal use of the minifyOptions param to make it work right with your templating system.minifyOptions [Object]: Parameters to supply to html-minifier's API.Uses the params you set in html.minifier.options if empty.Default: [Object]\"clientViews\": {   \"enable\": false,   \"exposeAll\": false,   \"blocklist\": [],   \"allowlist\": {},   \"defaultBundle\": \"views.js\",   \"output\": \"js\",   \"minify\": false,   \"minifyOptions\": {} }Static file optionscopy [Array of Objects]: Declare one or more files or folders to copy at runtime. Default: [].source [String]: Path to be copied from.Roosevelt will not attempt to copy files or folders that do not exist.dest [String]: Path to place the copy.If this destination path already exists it will be overwritten.html [Object]: Generate static HTML pages:sourcePath [String]: Subdirectory within staticsRoot where your static HTML files are located. By default this folder will not be made public, but is instead meant to store unminified / unprocessed HTML template source files which will be rendered by your templating system, minified, and written to the public folder when the app is started.allowlist: [Array of Strings] List of templates to render, minify, and write to the public folder when the app is started. If the list is empty, all templates in your sourcePath will be sourced. Supports wildcard matching, e.g. dir/*.blocklist: [Array of Strings] List of templates in your sourcePath to skip. Supports wildcard matching, e.g. dir/*.You can also block a file from being exposed by adding a comment on the first line of the file with the string roosevelt-blocklist anywhere on the line.models [Object]: Data to pass to templates by file path / file name.Example: { \"index.html\": { \"some\": \"data\" } }You can also pass a global model using a * catch-all character: { \"*\": { \"some\": \"data\" } }If this data is not supplied by configuration, Roosevelt will try to automatically load a model from a JS file with the same name alongside the template if it exists instead. For example if an index.js file exists next to index.html and the model is not defined by configuration like in the example above, then the index.js file will be used to set the model so long as it exports either an object or a function that returns an object.output [String]: Subdirectory within publicFolder where parsed and minified HTML files will be written to.folderPerPage [Boolean or String]: Make a folder for each page and place the page within it.Example values:true: Given a page called example.html, this feature will create a folder called \"example\" in the public folder and place \"example.html\" within it.\"index.html\": Given a page called example.html, this feature will create a folder called \"example\" in the public folder and place \"index.html\" within it. This is useful for creating \"pretty URLs\" with static sites.false: Disables the feature.minifier [Object]: How you want Roosevelt to minify your HTML:enable [Boolean]: Whether or not to minify HTML.Can also be disabled by the minify param.Minification is automatically disabled in development mode.exceptionRoutes [Array of Strings]: List of controller routes that will skip minification entirely. Set to false to minify all URLs.options [Object]: Parameters to supply to html-minifier's API.Default: [Object]{   \"sourcePath\": \"pages\",   \"allowlist\": null,   \"blocklist\": null,   \"models\": {},   \"output\": \"\",   \"folderPerPage\": false,   \"minifier\": {     \"enable\": true,     \"exceptionRoutes\": false,     \"options\": {       \"removeComments\": true,       \"collapseWhitespace\": true,       \"collapseBooleanAttributes\": true,       \"removeAttributeQuotes\": true,       \"removeEmptyAttributes\": true     }   } }css [Object]: How you want Roosevelt to configure your CSS preprocessor:sourcePath [String]: Subdirectory within staticsRoot where your CSS files are located. By default this folder will not be made public, but is instead meant to store unminified CSS source files which will be minified and written to the public folder when the app is started.compiler [Object]: Which CSS preprocessor (if any) to use.enable [Boolean]: Whether or not to use a preprocessor.module [String]: Node module name of the CSS preprocessor you wish to use.Currently less, sass, and stylus are supported.Your chosen CSS preprocessor module must also be marked as a dependency in your app's package.json.options [Object]: Parameters to send to the CSS preprocessor if it accepts any.minifier [Object]: Params pertaining to CSS minifcation.enable [Boolean]: Whether or not to minify CSS. Can also be disabled by the minify param.options [Object]: Parameters to pass to the CSS minifier clean-css, a list of which can be found in the clean-css docs.allowlist [Array of Strings]: List of CSS files to allow for compiling. Leave undefined to compile all files. Supply a : character after each file name to delimit an alternate file path and/or file name for the minified file.Example array member: \"example.less:example.min.css\" compiles example.less into example.min.css.output [String]: Subdirectory within publicFolder where compiled CSS files will be written to.versionFile [Object]: If enabled, Roosevelt will create a CSS file which declares a CSS variable containing your app's version number from package.json. Enable this option by supplying an object with the member variables fileName and varName. Versioning your static files is useful for resetting your users' browser cache when you release a new version of your app.Example usage (with SASS): { \"fileName\": \"_version.scss\", \"varName\": \"appVersion\" }Assuming the default Roosevelt configuration otherwise, this will result in a file statics/css/_version.scss with the following content: /* do not edit; generated automatically by Roosevelt */ $appVersion: '0.1.0';Some things to note:If there is already a file there with that name, this will overwrite it, so be careful!It's generally a good idea to add this file to .gitignore, since it is a build artifact.Default: [Object]{   \"sourcePath\": \"css\",   \"compiler\": {     \"enable\" : false,     \"module\": \"less\",     \"options\": {}   },   \"minifier\": {     \"enable\": true,     \"options\": {}   },   \"allowlist\": null,   \"output\": \"css\",   \"versionFile\": null }cssCompiler [Function]: Use this param to supply a custom CSS preprocessor function.To do so, supply a function which accepts argument app, which is a reference to the Express app created by Roosevelt.The function should return an object with the following members:versionCode(app) [Function]: Function to return the version of your app. This is needed to support the versionFile feature of Roosevelt's CSS preprocessor API.app [Object]: The Express app created by Roosevelt.parse(app, fileName) [Function]: Function to preprocess CSS.app [Object]: The Express app created by Roosevelt.filePath [String]: The path to the file being preprocessed.When a custom preprocessor is defined in this way it will override the selected preprocessor specified in css.compiler.module.This param can only set via Roosevelt's constructor, like this:(async () => {   await require('roosevelt')({     cssCompiler: app => {       return {         versionCode: app => {           // write code to return the version of your app here           // generally you should return a css variable with your app version         },         parse: (app, filePath) => {           // write code to preprocess CSS here           return {             css: 'write code to output css here',             sourceMap: 'write code to output source map here (optional)'           }         }       }     }   }).startServer() })()favicon [String]: Location of your favicon file. Default: \"none\".Will be set to \"images/favicon.ico\" in apps generated with the app generator.js [Object]: How you want Roosevelt to handle module bundling and minifying your frontend JS:sourcePath [String]: Subdirectory within staticsRoot where your JS files are located. By default this folder will not be made public, but is instead meant to store unminified JS source files which will be minified and written to the public folder when the app is started.[bundler name] [String]: Parameters related to bundling JS the specified bundler module:Values you can supply to [bundler name]:webpack: See Webpack site for more details about Webpack configuration.customBundler: Allows you to define your own custom bundler.Params you can pass to your chosen bundler:enable [Boolean]: Enable the bundler.bundles: [Array of Objects] Declare one or more JavaScript bundle files.env: [String] Bundle only in development or production mode.Accepted values:\"development\": Development mode.\"production\": Production mode.If no value is set, it will bundle in both modes.config: [Object or String] The config to send to the module bundler. Can also be a path to a config file relative to the app directory.customBundlerFunction: [Function] A custom async function to execute for this bundler instead of executing the default one supplied by Roosevelt. This param is required if your bundler is set to customBundler.Arguments provided:bundle: The bundle object supplied by Roosevelt.config: The config object after it has been postprocessed by Roosevelt.app: The Roosevelt app.verbose [String]: Enable verbose error handling.Accepted values:true: Will print verbose logs to the console.\"file\": Will print verbose logs to the console and write them to a file for debugging.Default when an app is created manually: [Object]{   \"sourcePath\": \"js\",   \"webpack\": {     \"enable\": false,     \"bundles\": [],     \"customBundlerFunction\": null   },   \"customBundler\": {     \"enable\": false,     \"bundles\": [],     \"customBundlerFunction\": null   },   \"verbose\": false }Default when an app is created with the app generator: [Object]{   \"sourcePath\": \"js\",   \"webpack\": {     \"enable\": true,     \"bundles\": [       {         \"config\": {           \"entry\": \"${js.sourcePath}/main.js\",           \"devtool\": \"source-map\",           \"output\": {             \"path\": \"${publicFolder}/js\"           },           \"resolve\": {             \"alias\": {               \"fs\": false,               \"path\": false             },             \"modules\": [\"${js.sourcePath}\", \"${publicFolder}/js\", \"${appDir}\", \"node_modules\"]           }         }       }     ],     \"customBundlerFunction\": null   },   \"customBundler\": {     \"enable\": false,     \"bundles\": [],     \"customBundlerFunction\": null   },   \"verbose\": false }If you're using webpack, Roosevelt will also postprocess your webpack config to do the following things:If your config does not set mode, then Roosevelt will set mode to development if Roosevelt is in development mode.If your config does not set devtool, then Roosevelt will set devtool to source-map if Roosevelt is in development mode.If Roosevelt's prodSourceMaps feature is enabled, then Roosevelt will set devtool to source-map if Roosevelt is in production mode.If your config does not set optimization, then Roosevelt will set optimization to the following:optimization = {   minimize: true,   minimizer: [     new TerserPlugin({       extractComments: false // disable LICENSE.txt file generation     })   ] }minify [Boolean]: Enables HTML and CSS minification. This feature is automatically disabled during development mode. Minification for JS files is handled by the js params above. Default: true.minifyHtmlAttributes [Object]: Settings to pass to minify-html-attributes.enable [Boolean or String]: Whether or not to enable minify-html-attributes.Available options:\"production\": Enable only in production mode.\"development\": Enable in all modes.true: Will be taken to mean \"production\".minifyHtmlAttributesParams: Params to pass to minify-html-attributes.Note: Roosevelt will always override 3 params from minify-html-attributes:htmlDir will always be set to Roosevelt's preprocessedViewsPath.cssDir will always be set to Roosevelt's preprocessedStaticsPath.jsDir will always be set to Roosevelt's preprocessedStaticsPath.Default: [Object]{   \"enable\": false,   \"minifyHtmlAttributesParams\": {} }prodSourceMaps [Boolean]: Enables source maps for minified CSS and JS files in production mode. Default: false.symlinks [Array of Objects]: Declare one or more symlinks to be generated at runtime. Default: [].source [String]: Path to be linked to.Roosevelt will not attempt to generate a symlink to a source path that does not exist.dest [String]: Path to place symlink.If this destination path already exists it will not be overwritten.Will be set to the following in apps generated with the app generator:[   {     \"source\": \"${staticsRoot}/images\",     \"dest\": \"${publicFolder}/images\"   } ]versionedPublic [Boolean]: If set to true, Roosevelt will prepend your app's version number from package.json to your public folder. Versioning your public folder is useful for resetting your users' browser cache when you release a new version. Default: false.Deployment optionshostPublic [Boolean]: Whether or not to allow Roosevelt to host the public folder. By default in production-proxy mode Roosevelt will not expose the public folder. It's recommended instead that you host the public folder through another web server, such as Apache or nginx that is better optimized for hosting static files. Default: false.localhostOnly [Boolean]: Listen only to requests coming from localhost in production mode. This is useful in environments where it is expected that HTTP requests to your app will be proxied through a more traditional web server like Apache or nginx. This setting is ignored in development mode. Default: true.shutdownTimeout [Number]: Maximum amount of time in milliseconds given to Roosevelt to gracefully shut itself down when sent the kill signal. Default: 30000 (30 seconds).Template literals in rooseveltConfig valuesAll config values support template literal style variable syntax that you can use to refer to other Roosevelt parameters. For example:{   \"css\": {     \"sourcePath\": \"css\",     \"output\": \".build/${css.sourcePath}\"   } }Resolves to:{   \"css\": {     \"sourcePath\": \"css\",     \"output\": \".build/css\"   } }EventsRoosevelt provides a series of events you can attach code to by passing a function to the desired event as a parameter to Roosevelt's constructor like so:(async () => {   await require('roosevelt')({     onServerStart: (app) => { /* do something */ }   }).startServer() })()Event listThese are sorted in order of when they are executed during the lifecycle of a Roosevelt app.onBeforeMiddleware(app): Fired when the app begins initializing, prior to any middleware being loaded into the app.app: The Express app created by Roosevelt.onBeforeControllers(app): Fired during initialization, prior to any routes being loaded.app: The Express app created by Roosevelt.onBeforeStatics(app): Fired during initialization, prior to any statics being written.app: The Express app created by Roosevelt.onClientViewsProcess(template): Fired to preprocess templates before being exposed to the client.template: A string containing a template written in any JS-based templating engine (e.g. Teddy, Pug, ejs, etc).onServerInit(app): Fired when the server is fully initialized and all middleware has been loaded but before the server has started.app: The Express app created by Roosevelt.onServerStart(app): Fired when the server starts.app: The Express app created by Roosevelt.onAppExit(app): Fired when the app recieves a kill signal.app: The Express app created by Roosevelt.Express variables exposed by RooseveltRoosevelt supplies several variables to Express that you may find handy. Access them using app.get('variableName').appDir: The directory the main module is in.appName: The name of your app derived from package.json. Uses \"Roosevelt Express\" if no name is supplied.appVersion: The version number of your app derived from package.json.controllersPath: Full path on the file system to where your app's controllers folder is located.clientControllersBundledOutput: Full path on the file system to where your app's client-exposed controllers folder is located.clientViewsBundledOutput: Full path on the file system to where your app's client-exposed views folder is located.cssCompiledOutput: Full path on the file system to where your app's minified CSS files are located.cssPath: Full path on the file system to where your app's CSS source files are located.debugMarkup: HTML you can add to your custom error pages if you define any that will print server errors if any exist, display the route list, and add some inline JavaScript that will serialize the request's err, req, and res objects so you can interactively examine them in the browser's developer tools. Only available in development mode.env: Either development or production.express: The Express module.expressSession: The express-session module Roosevelt uses internally. Session middleware.expressSessionStore: The session store instance used by express-session module Roosevelt uses internally.htmlPath: Full path on the file system to where your app's HTML static page source files are located.htmlRenderedOutput: Full path on the file system to where your app's rendered and minified static HTML files are located.httpServer: The http server created by Roosevelt.httpsServer: The https server created by Roosevelt.jsPath: Full path on the file system to where your app's JS source files are located.logger: The roosevelt-logger module Roosevelt uses internally. Used for console logging.modelsPath: Full path on the file system to where your app's models folder is located.package: The contents of package.json.params: The parameters you sent to Roosevelt.preprocessedStaticsPath or preprocessedStatics: Full path on the file system to where your app's preprocessed statics folder is located.preprocessedViewsPath or preprocessedViews: Full path on the file system to where your app's preprocessed views folder is located.publicFolder: Full path on the file system to where your app's public folder is located.roosevelt:state: Application state, e.g. disconnecting if the app is currently being shut down.router: Instance of router module used by Roosevelt.routePrefix: Prefix appended to routes via the routePrefix param. Will be '' if not set.routes: List of all routes in the app.staticsRoot: Full path on the file system to where your app's statics folder is located.view engine: Default view engine file extension, e.g. .html.viewEngine e.g. teddy by default: Any view engine(s) you define will be exposed as an Express variable. For instance, the default view engine is teddy. So by default app.get('teddy') will return the teddy module.viewsPath or views: Full path on the file system to where your app's views folder is located.Additionally the Roosevelt constructor returns the following object:expressApp [Object]: The Express app created by Roosevelt.initServer(callback) or init(callback) [async Function]: Starts the HTML validator, sets up some middleware, runs the CSS and JS preprocessors, and maps routes, but does not start the HTTP server. Call this method manually first instead of startServer if you need to setup the Express app, but still need to do additional setup before the HTTP server is started. This method is automatically called by startServer once per instance if it has not yet already been called. Takes an optional callback.startServer() or start() [async Function]: Calls the listen method of http, https, or both (depending on your configuration) to start the web server with Roosevelt's config.stopServer(params) or stop(params) [Function]: Stops the server from accepting new connections before exiting and takes an optional argument stopServer({ persistProcess: true }) which will allow the process to remain active after the server has closed.Recognized environment variablesThe following is a list of environment variables that Roosevelt listens for.NODE_ENV:Set to production to force the app into production mode.Set to development to force the app into development mode.NODE_PORT: Default HTTPS port to run your app on.Will set HTTP port instead if HTTPS is disabled.HTTP_PORT: Default HTTP port to run your app on. Takes precedence over NODE_PORT.HTTPS_PORT: Default HTTPS port to run your app on.DISABLE_HTTPS: When set to true, the HTTPS server will be disabled and the app will revert to HTTP regardless of what is set in the rooseveltConfig.MAKE_BUILD_ARTIFACTS: Lets you set Roosevelt's makeBuildArtifacts param via environment variable.Environment variable precedence:Environment variables supersede your app's rooseveltConfig.Environment variables can be overridden with command line arguments.Command line usageAvailable npm scriptsRoosevelt apps created with the app generator come with the following notable npm scripts prepopulated in package.json:npm run production: Runs the app in production mode.Default shorthands:npm run prodnpm run pnpm startScript is short for: nodemon app.js --production-modenpm run development: Runs the app in development mode.Default shorthands:npm run devnpm run dScript is short for: nodemon app.js --development-modenpm run production-proxy: Runs the app in production mode, but with localhostOnly set to true and hostPublic set to false. This mode will make it so your app only listens to requests coming from localhost and does not serve anything in the public folder. This mode is useful when you want to host your app behind a reverse proxy from a web server like Apache or nginx and is considered a best practice for Node.js deployments.Default shorthands:npm run prodproxynpm run xScript is short for: nodemon app.js --production-proxy-modenpm run generate-certs: Generates self-signed HTTPS certs for your app.Script is short for: node ./node_modules/roosevelt/lib/scripts/certsGenerator.jsSupports command line flags --appDir somewhere --secretsPath somewhere to override those default locations.npm run generate-session-secret: Generates a secret key for the express-session module.Script is short for: node ./node_modules/roosevelt/lib/scripts/sessionSecretGenerator.jsSupports command line flags --appDir somewhere --secretsPath somewhere to override those default locations.npm run generate-secrets: Runs the above three scripts.Supports command line flags --appDir somewhere --secretsPath somewhere to override those default locations.Available command line argumentsnode app.js --production-mode: Runs the app in production mode.Default shorthands:--prod-pnode app.js --development-mode: Runs the app in development mode.Default shorthands:--dev-dnode app.js --build: Only runs the build scripts and doesn't start the app.Default shorthands:-bnode app.js --jsbundler=verbose: Prints verbose errors from the JS bundler to the console.Default shorthands:--jsb=verbose-j=verbosenode app.js --jsbundler=verbose-file: Prints verbose errors from the JS bundler to the console as well as write a jsBundlerError.txt file to the app's root directory containing the full error.Default shorthands:--jsb=verbose-file-j=verbose-filenode app.js --production-proxy-mode: Runs the app in production mode, but with localhostOnly set to true and hostPublic set to false. This mode will make it so your app only listens to requests coming from localhost and does not serve anything in the public folder. This mode is useful when you want to host your app behind a reverse proxy from a web server like Apache or nginx and is considered a best practice for Node.js deployments.Default shorthands:--prodproxy-xnode app.js --enable-validator: Forces the HTML validator to be enabled.Default shorthands:--html-validator-hnode app.js --disable-validator: Forces the HTML validator to be disabled.Default shorthands:--raw-rCombining npm scripts and command line argumentsThe npm scripts can be combined with the command line flags.For example, running npm run dev -- --disable-validator will run your app in development mode and force the HTML validator to be disabled."})
window.siteTexts.push({file: "docs/0.31.4/deployment/index.html", title: "deployment (0.31.4)", text: "If you want to deploy a Roosevelt multi-page app or single-page app live to the internet, there are some things you should do to harden it appropriately if you expect to take significant traffic.Run the app behind a reverse proxy and use all the CPU coresTo do this, use the production-proxy-mode command line flag and run the process on multiple cores using a tool like pm2.Then host your app behind a reverse proxy from a web server like Apache or nginx, which is considered a best practice for Node.js deployments.Running the app in production-proxy mode runs the app in production mode, but with localhostOnly set to true and hostPublic set to false. This mode will make it so your app only responds to requests coming from the proxy server and does not serve anything in the public folder. You will then need to serve the contents of the public folder directly via Apache or nginx.Use HTTPSSetting up HTTPS can be tricky to configure properly especially for novices, so it can be tempting not do it to simplify deployment, but your website won't be seen as professional if it isn't served up via HTTPS. It's worth the effort to set it up.Use a caching service or a database to store sessionsRoosevelt's default session store for express-session works great if your app only needs a single process, but if you're spreading your app across multiple processes or servers, you will need to reconfigure express-session to use a caching service that supports replication like redis or a database that supports replication like PostgreSQL in order to scale your app.Use Roosevelt's static site generator instead if you canNot all sites need to execute logic dynamically on the backend. If you can get away with making a site using a static site generator, then that will dramatically simplify deployment. rooseveltframework.org is itself a static site generated with Roosevelt's static site generator, and you can view its source code here."})
window.siteTexts.push({file: "docs/0.31.4/get-started/index.html", title: "get started (0.31.4)", text: "🧸 roosevelt PrerequisitesFirst you will need to install Node.js. Both the current and LTS version of Node.js are supported. It is recommended that you have both the current and LTS versions of Node.js installed on your system. To do that, it is recommended that you install Node.js using a Node.js version manager like nvm or nvm-windows rather than the official installer, as a version manager will allow you to switch between multiple versions of Node.js easily.Make a Roosevelt app🏭🧸 mkroosevelt The simplest way to make a Roosevelt app is to simply run the following command:npx mkrooseveltThen follow the prompts to decide whether to make a multi-page app, static site generator, or a single page app.Other ways to make Roosevelt apps🏭🧸 generator-roosevelt What the mkroosevelt command does under the hood is call the Roosevelt app generator, a command line script based on Yeoman, to create a sample Roosevelt app for you. You could also install the app generator to your system if you like. To do that, first globally install Yeoman and the Yeoman-based Roosevelt app generator:npm i -g yo generator-rooseveltThen create a Roosevelt app using the Roosevelt app generator:yo rooseveltThen follow the prompts.Create a Roosevelt app manuallyIt is also possible to create a Roosevelt app without using the app generator. This will result in a more minimalist default configuration (e.g. no CSS or JS preprocessors enabled by default).To do that:First create a new folder and cd into it.Then npm i roosevelt. This will create a node_modules folder with Roosevelt and its bare minimum dependencies.Create a file named app.js.Put this code in app.js:(async () => {   await require('roosevelt')({     makeBuildArtifacts: true   }).startServer() })()Then node app.js. If the makeBuildArtifacts parameter is set to true like the above code example, an entire Roosevelt app with bare minimum viability will be created and the server will be started.Default directory structureBelow is the default directory structure for an app created using the Roosevelt app generator.Application logicapp.js or build.js: Entry point to your application. Feel free to rename this, but make sure to update package.json's references to it. It defaults to app.js when building a multi-page app or a single page app. It defaults to build.js when building a static site generator.lib: A folder for any includable JS files that don't belong in any of the other directories. It has been added to the require stack so you can simply require('lib/someFile').mvc: Folder for models, views, and controllers.controllers: Folder for controller files; the \"C\" in MVC. This is where your HTTP routes will go.models: Folder for model files; the \"M\" in MVC. This is where you will get data to display in your views e.g. by querying a database or do other business logic.views: Folder for view files; the \"V\" in MVC. This is where your HTML templates will go.Static filesstatics: Folder for source CSS, image, JS, and other static files. By default some of the contents of this folder are symlinked to the public folder, which you can configure via params.css: Folder for source CSS files.images: Folder for source image files.js: Folder for source frontend JS files.pages: Folder for HTML templates that get rendered as static pages and deposited into the public folder.Build artifacts.build: Folder for build artifacts.preprocessed_statics: Static files that have been preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled.preprocessed_views: View files that have had their uses of web components progressively enhanced using the progressively-enhance-web-components module and/or preprocessed by the minify-html-attributes module, if you have minifyHtmlAttributes enabled.The output JS files from the clientControllers or clientViews features.public: All contents within this folder will be exposed as static files. For the most part, the contents of this folder will be populated from the statics folder. This folder is added to .gitignore by default because it is considered a build artifact.Application infrastructure.gitignore: A standard file which contains a list of files and folders to ignore if your project is in a git repo. Delete it if you're not using git. The default .gitignore file contains many common important things to ignore, however you may need to tweak it to your liking before committing a fresh Roosevelt app to your git repo.node_modules: A standard folder created by Node.js where all modules your app depends on (such as Roosevelt) are installed to. This folder is created when installing dependencies using the npm i command. It is added to .gitignore by default because it is considered a build artifact.package.json: A file common to most Node.js apps for configuring your app.package-lock.json: An auto-generated file common to most Node.js apps containing a map of your dependency tree. This is created after you run npm i for the first time. Once the file exists within your project, you can run npm ci instead of npm i when installing dependencies, which will be more performant and will result in reproducible builds that always have the same versions of every dependency, including downstream dependencies.rooseveltConfig.json: Where your Roosevelt config is stored and what your params are set to. These values can be overridden when calling Roosevelt's constructor.secrets: A folder for \"secret\" files, e.g. session keys, HTTPS certs, passwords, etc. It is added to .gitignore by default because it contains sensitive information, so it should not be committed to git."})
window.siteTexts.push({file: "docs/check-if-CSS-is-disabled/2.0.2/index.html", title: "Check if CSS is disabled (2.0.2)", text: "☂️ check-if-css-is-disabled Frontend JavaScript module that can determine if CSS is disabled or if it failed to load, then take action to stop JS enhancements from applying if the CSS isn't working first.If your CSS fails to load but your JS does load, that can lead to mangled-looking user interfaces. But if you build your website using a progressive enhancement technique, this module will also let you do graceful degradation elegantly by making it easy for you to revert to the non-CSS and non-JS experience if your CSS fails but your JS doesn't.As such, if no CSS or JS loads but you built your site using semantic HTML, it should still look reasonably good with the default styles applied and function reasonably well so long as no JS is mucking with the DOM.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/crossplatform-killport/1.0.1/index.html", title: "Crossplatform killport (1.0.1)", text: "💀 crossplatform-killport Command line program to kill the process running on a given port in any operating system.Unlike many of the other programs out there that do this, this one works in Windows, Linux, and Mac, it is very easily installed in any OS using npm because it is written in Node.js, and it is actively maintained by a team of people rather than being just some guy's project from several years ago that may or may not work."})
window.siteTexts.push({file: "docs/express-browser-reload/4.0.0/index.html", title: "Express browser reloader (4.0.0)", text: "✨ express-browser-reload Node.js module to refresh your browser when your Express server restarts. Works by using a WebSocket to the server and waits for the WebSocket to close to detect the server restarting. Once the server comes back up, the page will be reloaded.This project is a hard fork of reload, which is a more generalized tool with more features beyond the Express world. This fork is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/express-html-validator/1.0.1/index.html", title: "Express HTML validator (1.0.1)", text: "✅ express-html-validator A middleware for the Express framework that automatically validates the HTML on all your Express routes, powered by html-validate.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/fallback-dependencies/1.0.3/index.html", title: "Fallback dependencies (1.0.3)", text: "📦 fallback-dependencies A Node.js module that allows you to add git repo dependencies to your Node.js app from a cascading list of fallback locations.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well.Why?You might be wondering: why not use a private npm registry, let npm clone git repos directly, or use some other package manager?Here are some reasons why you might need fallback-dependencies for certain types of apps:Private npm registries can be difficult to set up and maintain. But private git repos are easy to setup and maintain.Installing dependencies of an app that uses a private npm registry adds extra steps to your build process which can be fussy for your app's users to configure correctly.There is no straightforward way to use npm to consume private packages from multiple fallback locations if the primary URL goes down or you want to limit access to some domains to some users of your app.There is no way to install git repos via npm if the repo in question does not have a package.json, but with fallback-dependencies, you can.If you consume git repos directly with npm, it will deposit those repos into the node_modules folder which could result in naming collisions or just make those repos feel excessively buried if you want more convenient access to the private repos' files. The node_modules folder is also an inappropriate place to deposit dependencies that aren't Node.js modules, which as noted above are possible to fetch with fallback-dependencies. With fallback-dependencies, you can decide where to deposit them.Simplifying the developer experience is the main goal here. With fallback-dependencies, all a user of your app has to do is:Have an account in good standing with at least one of the fallback URLs for each fallback-dependency in the app's dependency list.Clone your app.npm ci.That's it. The app will start now. All the alternative approaches add additional complex steps to the build process that make the developer experience more cumbersome.So if you want to minimize the number of steps that need to be followed to install private dependencies in your Node.js app, then you might want to consider using fallback-dependencies.CaveatsThe fallback-dependencies module is not a standard endorsed by or maintained by the Node.js or npm teams. You're relying on the maintainers of this project to ensure that it keeps working. You can of course just fork this project if you want to do it some other way as well though.You may need to set up git to authenticate against the URL(s) you're cloning from, which can present a similar degree of cumbersomeness to fetching these dependencies from a private npm registry or similar. We think in most cases git authentication is less annoying than the other methods though, particularly if you've already needed to do this authentication to clone the main project.Your build process will likely be slower because it will need to build at least two separate dependency trees.Doing it this way will likely increase your total disk space usage for dependencies since you will likely have multiple copies of the same dependency in the separate dependency trees, particularly if you pile up a lot of fallback-dependencies.Using this technique instead of setting up something like a private npm registry might make you feel less cool because this approach is more straightforward, more flexible, less over-engineered, and a lot of us programmers are addicted to needless complexity. If you want a super complicated build process to make you feel smart, this module won't help you with that."})
window.siteTexts.push({file: "docs/minify-html-attributes/1.0.2/index.html", title: "HTML attribute minifier (1.0.2)", text: "💫 minify-html-attributes A Node.js module that will minify HTML attribute class names, IDs, and data-* attributes in a coordinated fashion across your HTML, CSS, and JS files. This is useful if you want to minify your code even more than standard minifiers do, or if you want to obfuscate your code and make it harder to read, reverse engineer, or repurpose.This module is a pre-minifier that focuses only on HTML class names, IDs, and data-* attributes. It will not minify the rest of your code. As such, this tool should be run on your code before you run it through your standard minifier(s). You could do it in the opposite order if you like, but the outputs from this module will not be minified even if the inputs were.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well.Specific modificationsThis module renames:class attribute values.id attribute values.data-* attribute names.Any other attributes you specify using the extraAttributes param.The new names will be renamed to the shortest possible value, e.g. a, b, c, etc.This module then updates:In HTML files:Attributes that reference any IDs that have been renamed. Attributes that reference IDs are: for, form, headers, itemref, list, usemap, aria-activedescendant, aria-controls, aria-describedby, aria-labelledby, and aria-owns.Inline CSS code in <style> tags that references any renamed attributes.Inline JS code in <script> tags that references any renamed attributes.Inline JS code in event handler attributes like onclick, onmouseover, etc that references any renamed attributes.In CSS files and inline CSS code:Selectors that reference any renamed attributes.CSS properties with attr() function calls that reference any renamed attributes.CSS variables that store references to any renamed attributes.In JS files and inline JS code:JS code that references any renamed attributes.Inline HTML in the JS that references any renamed attributes.Inline CSS in the JS that references any renamed attributes.CaveatsThis module works by running your HTML, CSS, and JS files through a series of parsers that generate abstract syntax trees of your code for analysis.That means it will work best when:Your HTML code is either plain HTML or using a templating system that doesn't break the DOM parser.Your CSS code is either plain CSS or written in a CSS-compatible superset language that doesn't break the CSS parser.For HTML and CSS those limitations shouldn't present a major problem in most web app architectures, but JavaScript is where things might get messy.This module does its best to detect when you reference any classes, IDs, or data-* attributes in your JavaScript — including when you're doing this by assembling the reference from a series of variables — and will update the references accordingly. But there are probably edge cases this module doesn't handle yet.For best results, simplify any DOM manipulation code you write that references classes, IDs, or data-* attributes as much as possible. If you find an edge case this module doesn't handle yet, file an issue, or better yet submit a pull request with a failing test for the scenario you would like to work. Or even better submit a PR with the code fix too!"})
window.siteTexts.push({file: "docs/multi-db/1.0.1/index.html", title: "Multi-DB (1.0.1)", text: "🐙 multi-db-driver A thin abstraction around selected Node.js database drivers to normalize their APIs to one simplified common API. This makes it possible to write a Node.js app that supports multiple databases by configuration with minimal additional boilerplate needed per additional database.Multi-DB currently supports MariaDB, MySQL, PostgreSQL, PGlite, and SQLite.Features and design philosophySwitch to another database without code changesSuppose you use pg to connect your app to a PostgreSQL database but later want to reconfigure your app to use a MariaDB database instead using the mariadb module. To switch to the new database, you're looking at significant code changes to your app because there are significant API differences between the two database driver modules. But if you use Multi-DB instead of working with the database driver directly, you can switch databases with a simple configuration change, similar to an ORM.Support multiple databases at the same time without committing to the heavy abstractions of an ORMIf you want the deployer of your app to be able to choose which database to use (e.g. some prefer PostgreSQL, others prefer MySQL, etc), you're often stuck with coding your app using an ORM, but ORMs are too heavy for many use cases. Most SQL queries are fairly universal and will execute in any SQL-based database with little to no modification. For example, every SQL database supports select * from some_table with no syntax differences. Why abstract that around an ORM? As such, developers should be able to support multiple databases while still being able to just write SQL instead of committing to an ORM's entire set of abstractions that take the ability to directly write SQL queries away from you.The most common syntax difference between the most common SQL queries is the query parameter syntax difference between PostgreSQL and other databases. Both PostgreSQL and PGlite requires you to use the $1 $2 $3 etc syntax for parameterized queries, but other databases permit the use of ? for parameterized queries instead. To resolve that syntax difference, this module adds support for ? query parameter syntax to PostgreSQL and PGlite to make it easier to write universal queries that can execute against all supported databases.There will of course be unavoidable syntax differences for advanced queries. So by default Multi-DB will encourage you to write universal queries, but in cases where you need to call out a separate query for a specific database, you can do so with minimal boilerplate so that you only need to add additional complexity to your queries as-needed.Multi-DB also normalizes the top level query result object structure to one format as well so the way you get the result rows is the same across all database drivers.Reduce boilerplate, even if you only want to support one databaseThis module also makes life easier for you when you're using only one database too by automating the database connection procedure, pooling procedure, and providing a set of command line scripts to automate common setup and teardown tasks.Automatic common credential guessing to ease developmentA common problem on development teams with developers that use different operating systems is the default admin credentials on their local instance of PostgreSQL, MySQL, etc might be slightly different on a per instance basis, so no single default config will successfully connect to everyone's local database unless every developer on the team manually resets their admin credentials to something everyone on the team agrees to use. Multi-DB bypasses this problem by attempting to connect with the specified config first, but then if that fails it will attempt to connect with a series of common defaults instead.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/multi-db/1.0.2/index.html", title: "Multi-DB (1.0.2)", text: "🐙 multi-db-driver A thin abstraction around selected Node.js database drivers to normalize their APIs to one simplified common API. This makes it possible to write a Node.js app that supports multiple databases by configuration with minimal additional boilerplate needed per additional database.Multi-DB currently supports MariaDB, MySQL, PostgreSQL, PGlite, and SQLite.Features and design philosophySwitch to another database without code changesSuppose you use pg to connect your app to a PostgreSQL database but later want to reconfigure your app to use a MariaDB database instead using the mariadb module. To switch to the new database, you're looking at significant code changes to your app because there are significant API differences between the two database driver modules. But if you use Multi-DB instead of working with the database driver directly, you can switch databases with a simple configuration change, similar to an ORM.Support multiple databases at the same time without committing to the heavy abstractions of an ORMIf you want the deployer of your app to be able to choose which database to use (e.g. some prefer PostgreSQL, others prefer MySQL, etc), you're often stuck with coding your app using an ORM, but ORMs are too heavy for many use cases. Most SQL queries are fairly universal and will execute in any SQL-based database with little to no modification. For example, every SQL database supports select * from some_table with no syntax differences. Why abstract that around an ORM? As such, developers should be able to support multiple databases while still being able to just write SQL instead of committing to an ORM's entire set of abstractions that take the ability to directly write SQL queries away from you.The most common syntax difference between the most common SQL queries is the query parameter syntax difference between PostgreSQL and other databases. Both PostgreSQL and PGlite requires you to use the $1 $2 $3 etc syntax for parameterized queries, but other databases permit the use of ? for parameterized queries instead. To resolve that syntax difference, this module adds support for ? query parameter syntax to PostgreSQL and PGlite to make it easier to write universal queries that can execute against all supported databases.There will of course be unavoidable syntax differences for advanced queries. So by default Multi-DB will encourage you to write universal queries, but in cases where you need to call out a separate query for a specific database, you can do so with minimal boilerplate so that you only need to add additional complexity to your queries as-needed.Multi-DB also normalizes the top level query result object structure to one format as well so the way you get the result rows is the same across all database drivers.Reduce boilerplate, even if you only want to support one databaseThis module also makes life easier for you when you're using only one database too by automating the database connection procedure, pooling procedure, and providing a set of command line scripts to automate common setup and teardown tasks.Automatic common credential guessing to ease developmentA common problem on development teams with developers that use different operating systems is the default admin credentials on their local instance of PostgreSQL, MySQL, etc might be slightly different on a per instance basis, so no single default config will successfully connect to everyone's local database unless every developer on the team manually resets their admin credentials to something everyone on the team agrees to use. Multi-DB bypasses this problem by attempting to connect with the specified config first, but then if that fails it will attempt to connect with a series of common defaults instead.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/node-php-runner/1.1.0/index.html", title: "Node.js PHP runner (1.1.0)", text: "🐘 php This module allows you to run PHP code in Node.js in various ways:Run PHP scripts.Run PHP scripts and pass them JSON data from Node.js.Use PHP as a view engine (templating system) for Express framework applications.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/progressively-enhance-web-components/1.0.4/index.html", title: "SSR web components (1.0.4)", text: "🕸️ progressively-enhance-web-components A template file preprocessor for progressively enhancing web components in Node.js.It works by reading a directory of HTML templates for your web application, identifying any web components, and replacing custom element invocations with fallback markup that will work if JavaScript is disabled which will then be progressively enhanced into the desired web component when the JavaScript loads.This allows you to use web components in server-side templating the same way you would with client-side templating without creating a hard dependency on JavaScript for rendering templates with web components and without having to write two different templates for each context.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well.TechniqueTo leverage this module's progressive enhancement technique, you will need to follow some simple rules when authoring your web component:Always define the markup structure using a <template> element. The definition can exist anywhere in any of your templates, but the definition must exist.The template element you create to define your web component must have an id matching the name of the web component. So <my-component> must have a corresponding <template id=\"my-component\"> somewhere in your templates.Use ${templateLiteral} values for values in your <template> markup. See \"Usage\" for more details."})
window.siteTexts.push({file: "docs/roosevelt-logger/1.0.1/index.html", title: "Roosevelt logger (1.0.1)", text: "🧸🪵 roosevelt-logger Intuitive, attractive logger for Node.js applications based on Winston.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/semantic-forms/5.0.10/index.html", title: "Semantic Forms (5.0.10)", text: "🎯 semantic-forms A pattern library of attractive forms for your website with the following design goals:Attractive, modern float label visual design.Responsive layout based on modern CSS grid technique.Clear fields.Light and dark mode.Invalid field styling.Good accessibility.Semantic HTML (no div soup).Uses a progressive enhancement approach so that core functionality and most of the features still work with JavaScript disabled.Sets no global styles and is scoped by a single class name semanticForms applied to <form> elements.No dependencies.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/semantic-forms/5.0.7/index.html", title: "Semantic Forms (5.0.7)", text: "A pattern library of attractive forms for your website with the following design goals:Attractive, modern float label visual design.Responsive layout based on modern CSS grid technique.Clear fields.Light and dark mode.Invalid field styling.Good accessibility.Semantic HTML (no div soup).Uses a progressive enhancement approach so that core functionality and most of the features still work with JavaScript disabled.Sets no global styles and is scoped by a single class name semanticForms applied to <form> elements.No dependencies.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/semantic-forms/5.0.8/index.html", title: "Semantic Forms (5.0.8)", text: "🎯 semantic-forms A pattern library of attractive forms for your website with the following design goals:Attractive, modern float label visual design.Responsive layout based on modern CSS grid technique.Clear fields.Light and dark mode.Invalid field styling.Good accessibility.Semantic HTML (no div soup).Uses a progressive enhancement approach so that core functionality and most of the features still work with JavaScript disabled.Sets no global styles and is scoped by a single class name semanticForms applied to <form> elements.No dependencies.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/semantic-forms/5.0.9/index.html", title: "Semantic Forms (5.0.9)", text: "🎯 semantic-forms A pattern library of attractive forms for your website with the following design goals:Attractive, modern float label visual design.Responsive layout based on modern CSS grid technique.Clear fields.Light and dark mode.Invalid field styling.Good accessibility.Semantic HTML (no div soup).Uses a progressive enhancement approach so that core functionality and most of the features still work with JavaScript disabled.Sets no global styles and is scoped by a single class name semanticForms applied to <form> elements.No dependencies.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/semantic-forms/5.1.0/index.html", title: "Semantic Forms (5.1.0)", text: "🎯 semantic-forms A pattern library of attractive forms for your website with the following design goals:Attractive, modern float label visual design.Responsive layout based on modern CSS grid technique.Clear fields.Light and dark mode.Invalid field styling.Good accessibility.Semantic HTML (no div soup).Uses a progressive enhancement approach so that core functionality and most of the features still work with JavaScript disabled.Sets no global styles and is scoped by a single class name semanticForms applied to <form> elements.No dependencies.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/semantic-forms/5.1.1/index.html", title: "Semantic Forms (5.1.1)", text: "🎯 semantic-forms A pattern library of attractive forms for your website with the following design goals:Attractive, modern float label visual design.Responsive layout based on modern CSS grid technique.Clear fields.Light and dark mode.Invalid field styling.Good accessibility.Semantic HTML (no div soup).Uses a progressive enhancement approach so that core functionality and most of the features still work with JavaScript disabled.Sets no global styles and is scoped by a single class name semanticForms applied to <form> elements.No dependencies.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/semantic-forms/5.1.2/index.html", title: "Semantic Forms (5.1.2)", text: "🎯 semantic-forms A pattern library of attractive forms for your website with the following design goals:Attractive, modern float label visual design.Responsive layout based on modern CSS grid technique.Clear fields.Light and dark mode.Invalid field styling.Good accessibility.Semantic HTML (no div soup).Uses a progressive enhancement approach so that core functionality and most of the features still work with JavaScript disabled.Sets no global styles and is scoped by a single class name semanticForms applied to <form> elements.No dependencies.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/semantic-forms/5.1.3/index.html", title: "Semantic Forms (5.1.3)", text: "🎯 semantic-forms A pattern library of attractive forms for your website with the following design goals:Attractive, modern float label visual design.Responsive layout based on modern CSS grid technique.Clear fields.Light and dark mode.Invalid field styling.Good accessibility.Semantic HTML (no div soup).Uses a progressive enhancement approach so that core functionality and most of the features still work with JavaScript disabled.Sets no global styles and is scoped by a single class name semanticForms applied to <form> elements.No dependencies.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/semantic-forms/5.1.4/index.html", title: "Semantic Forms (5.1.4)", text: "🎯 semantic-forms A pattern library of attractive forms for your website with the following design goals:Attractive, modern float label visual design.Responsive layout based on modern CSS grid technique.Clear fields.Light and dark mode.Invalid field styling.Good accessibility.Semantic HTML (no div soup).Uses a progressive enhancement approach so that core functionality and most of the features still work with JavaScript disabled.Sets no global styles and is scoped by a single class name semanticForms applied to <form> elements.No dependencies.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/semantic-forms/5.1.5/index.html", title: "Semantic Forms (5.1.5)", text: "🎯 semantic-forms A pattern library of attractive forms for your website with the following design goals:Attractive, modern float label visual design.Responsive layout based on modern CSS grid technique.Clear fields.Light and dark mode.Invalid field styling.Good accessibility.Semantic HTML (no div soup).Uses a progressive enhancement approach so that core functionality and most of the features still work with JavaScript disabled.Sets no global styles and is scoped by a single class name semanticForms applied to <form> elements.No dependencies.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/single-page-express/2.0.0/index.html", title: "Single Page Express (2.0.0)", text: "A client-side implementation of the Express route API. It works by hijacking links and form submits, then providing a direct imitation of the Express route API to handle \"requests\" (click or submit events) and issue \"responses\" in the form of DOM updates.When a single-page-express route is triggered, it will update the browser history state to match the route accordingly, update the scroll position appropriately, set focus appropriately, will start a view transition to animate the DOM updates, and there are hooks available to customize the animations as well. If view transitions are not supported in the browser, the page will transition, but it will not animate unless you set a custom animation using another animation technique.This allows you to write isomorphic (aka universal, amphibious, etc) router code that can be shared verbatim on the client and the server in your Express application.When you combine this with a JS-based templating system that can run on the client and server as well, that will enable you to write Express-based single page apps that support both server-side and client-side rendering while maximizing code re-use in both contexts without having to use a big JS framework to accomplish the task instead.You can also use this module in purely frontend contexts without an Express server behind it (e.g. an Electron app).This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well.Why this instead of…single-page-express has several benefits over other popular single page app architecture approaches, such as:All routes can very easily be either server-rendered or rendered client-side without duplicating efforts since all the route and template code can be shared with both the server and client.Unlike other SPA framework approaches that support server-rendering, this approach yields a very small dependency tree and thus very small frontend bundle sizes. Hello world will be measured in tens of kilobytes, not hundreds, and certainly not megabytes.Likewise there is very little complexity to the architecture. If you know how to use Express, then it won't take you long to learn how to use this module on the frontend too.Like Express, this module is unopinionated about what templating engine you use for rendering HTML templates. Use any templating engine that supports Express.The default render method includes many smart defaults, including easy hooks for setting the page title, updating children of the <head> tag, automatic support for announcing template renders as new pages to screen readers, setting browser focus to the correct element, and more. The specifics of the default render method's behavior are detailed below, and you can replace the default render method with your own if you prefer different behavior.Don't build a SPA (single page app), build a SPE (single page Express) app!"})
window.siteTexts.push({file: "docs/single-page-express/2.0.1/index.html", title: "Single Page Express (2.0.1)", text: "📄 single-page-expressA client-side implementation of the Express route API. It works by hijacking links and form submits, then providing a direct imitation of the Express route API to handle \"requests\" (click or submit events) and issue \"responses\" in the form of DOM updates.When a single-page-express route is triggered, it will update the browser history state to match the route accordingly, update the scroll position appropriately, set focus appropriately, will start a view transition to animate the DOM updates, and there are hooks available to customize the animations as well. If view transitions are not supported in the browser, the page will transition, but it will not animate unless you set a custom animation using another animation technique.This allows you to write isomorphic (aka universal, amphibious, etc) router code that can be shared verbatim on the client and the server in your Express application.When you combine this with a JS-based templating system that can run on the client and server as well, that will enable you to write Express-based single page apps that support both server-side and client-side rendering while maximizing code re-use in both contexts without having to use a big JS framework to accomplish the task instead.You can also use this module in purely frontend contexts without an Express server behind it (e.g. an Electron app).This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well.Why this instead of…single-page-express has several benefits over other popular single page app architecture approaches, such as:All routes can very easily be either server-rendered or rendered client-side without duplicating efforts since all the route and template code can be shared with both the server and client.Unlike other SPA framework approaches that support server-rendering, this approach yields a very small dependency tree and thus very small frontend bundle sizes. Hello world will be measured in tens of kilobytes, not hundreds, and certainly not megabytes.Likewise there is very little complexity to the architecture. If you know how to use Express, then it won't take you long to learn how to use this module on the frontend too.Like Express, this module is unopinionated about what templating engine you use for rendering HTML templates. Use any templating engine that supports Express.The default render method includes many smart defaults, including easy hooks for setting the page title, updating children of the <head> tag, automatic support for announcing template renders as new pages to screen readers, setting browser focus to the correct element, and more. The specifics of the default render method's behavior are detailed below, and you can replace the default render method with your own if you prefer different behavior.Don't build a SPA (single page app), build a SPE (single page Express) app!"})
window.siteTexts.push({file: "docs/single-page-express/2.0.2/index.html", title: "Single Page Express (2.0.2)", text: "📄 single-page-express A client-side implementation of the Express route API. It works by hijacking links and form submits, then providing a direct imitation of the Express route API to handle \"requests\" (click or submit events) and issue \"responses\" in the form of DOM updates.When a single-page-express route is triggered, it will update the browser history state to match the route accordingly, update the scroll position appropriately, set focus appropriately, will start a view transition to animate the DOM updates, and there are hooks available to customize the animations as well. If view transitions are not supported in the browser, the page will transition, but it will not animate unless you set a custom animation using another animation technique.This allows you to write isomorphic (aka universal, amphibious, etc) router code that can be shared verbatim on the client and the server in your Express application.When you combine this with a JS-based templating system that can run on the client and server as well, that will enable you to write Express-based single page apps that support both server-side and client-side rendering while maximizing code re-use in both contexts without having to use a big JS framework to accomplish the task instead.You can also use this module in purely frontend contexts without an Express server behind it (e.g. an Electron app).This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well.Why this instead of…single-page-express has several benefits over other popular single page app architecture approaches, such as:All routes can very easily be either server-rendered or rendered client-side without duplicating efforts since all the route and template code can be shared with both the server and client.Unlike other SPA framework approaches that support server-rendering, this approach yields a very small dependency tree and thus very small frontend bundle sizes. Hello world will be measured in tens of kilobytes, not hundreds, and certainly not megabytes.Likewise there is very little complexity to the architecture. If you know how to use Express, then it won't take you long to learn how to use this module on the frontend too.Like Express, this module is unopinionated about what templating engine you use for rendering HTML templates. Use any templating engine that supports Express.The default render method includes many smart defaults, including easy hooks for setting the page title, updating children of the <head> tag, automatic support for announcing template renders as new pages to screen readers, setting browser focus to the correct element, and more. The specifics of the default render method's behavior are detailed below, and you can replace the default render method with your own if you prefer different behavior.Don't build a SPA (single page app), build a SPE (single page Express) app!"})
window.siteTexts.push({file: "docs/single-page-express/2.0.3/index.html", title: "Single Page Express (2.0.3)", text: "📄 single-page-express A client-side implementation of the Express route API. It works by hijacking links and form submits, then providing a direct imitation of the Express route API to handle \"requests\" (click or submit events) and issue \"responses\" in the form of DOM updates.When a single-page-express route is triggered, it will update the browser history state to match the route accordingly, update the scroll position appropriately, set focus appropriately, will start a view transition to animate the DOM updates, and there are hooks available to customize the animations as well. If view transitions are not supported in the browser, the page will transition, but it will not animate unless you set a custom animation using another animation technique.This allows you to write isomorphic (aka universal, amphibious, etc) router code that can be shared verbatim on the client and the server in your Express application.When you combine this with a JS-based templating system that can run on the client and server as well, that will enable you to write Express-based single page apps that support both server-side and client-side rendering while maximizing code re-use in both contexts without having to use a big JS framework to accomplish the task instead.You can also use this module in purely frontend contexts without an Express server behind it (e.g. an Electron app).This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well.Why this instead of…single-page-express has several benefits over other popular single page app architecture approaches, such as:All routes can very easily be either server-rendered or rendered client-side without duplicating efforts since all the route and template code can be shared with both the server and client.Unlike other SPA framework approaches that support server-rendering, this approach yields a very small dependency tree and thus very small frontend bundle sizes. Hello world will be measured in tens of kilobytes, not hundreds, and certainly not megabytes.Likewise there is very little complexity to the architecture. If you know how to use Express, then it won't take you long to learn how to use this module on the frontend too.Like Express, this module is unopinionated about what templating engine you use for rendering HTML templates. Use any templating engine that supports Express.The default render method includes many smart defaults, including easy hooks for setting the page title, updating children of the <head> tag, automatic support for announcing template renders as new pages to screen readers, setting browser focus to the correct element, and more. The specifics of the default render method's behavior are detailed below, and you can replace the default render method with your own if you prefer different behavior.Don't build a SPA (single page app), build a SPE (single page Express) app!"})
window.siteTexts.push({file: "docs/single-page-express/2.0.4/index.html", title: "Single Page Express (2.0.4)", text: "📄 single-page-express A client-side implementation of the Express route API. It works by hijacking links and form submits, then providing a direct imitation of the Express route API to handle \"requests\" (click or submit events) and issue \"responses\" in the form of DOM updates.When a single-page-express route is triggered, it will update the browser history state to match the route accordingly, update the scroll position appropriately, set focus appropriately, will start a view transition to animate the DOM updates, and there are hooks available to customize the animations as well. If view transitions are not supported in the browser, the page will transition, but it will not animate unless you set a custom animation using another animation technique.This allows you to write isomorphic (aka universal, amphibious, etc) router code that can be shared verbatim on the client and the server in your Express application.When you combine this with a JS-based templating system that can run on the client and server as well, that will enable you to write Express-based single page apps that support both server-side and client-side rendering while maximizing code re-use in both contexts without having to use a big JS framework to accomplish the task instead.You can also use this module in purely frontend contexts without an Express server behind it (e.g. an Electron app).This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well.Why this instead of…single-page-express has several benefits over other popular single page app architecture approaches, such as:All routes can very easily be either server-rendered or rendered client-side without duplicating efforts since all the route and template code can be shared with both the server and client.Unlike other SPA framework approaches that support server-rendering, this approach yields a very small dependency tree and thus very small frontend bundle sizes. Hello world will be measured in tens of kilobytes, not hundreds, and certainly not megabytes.Likewise there is very little complexity to the architecture. If you know how to use Express, then it won't take you long to learn how to use this module on the frontend too.Like Express, this module is unopinionated about what templating engine you use for rendering HTML templates. Use any templating engine that supports Express.The default render method includes many smart defaults, including easy hooks for setting the page title, updating children of the <head> tag, automatic support for announcing template renders as new pages to screen readers, setting browser focus to the correct element, and more. The specifics of the default render method's behavior are detailed below, and you can replace the default render method with your own if you prefer different behavior.Don't build a SPA (single page app), build a SPE (single page Express) app!"})
window.siteTexts.push({file: "docs/source-configs/1.0.0/index.html", title: "Source Configs (1.0.0)", text: "🎛 source-configs A Node.js module that allows you to declaratively define a hierarchy of configuration values for your app from command line arguments, environment variables, or defaults based on a JSON schema you define within your app.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/teddy/1.1.4/index.html", title: "Teddy templating engine (1.1.4)", text: "🧸 teddy Teddy is the most readable and easy to learn templating language there is!Or put a more technical way, Teddy is an easy to read, HTML-inspired, mostly logic-less DOM templating engine with support for both server-side and client-side templating.It uses HTML-like <tags> for rudimentary templating logic and Teddy Roosevelt's facial hair for {variables}.Why yet another templating engine?Good question.Here's why:Other popular templating engines are too crypticAre you tired of all those unnecessarily cryptic templating systems out there that look like this?<h1>{{header}}</h1> {{#bug}} {{/bug}}  {{#items}}   {{#first}}     <li><strong>{{name}}</strong></li>   {{/first}}   {{#link}}     <li><a href=\"{{url}}\">{{name}}</a></li>   {{/link}} {{/items}}  {{#empty}}   <p>The list is empty.</p> {{/empty}}...Or this?{{#each comments}} <h2><a href=\"/posts/{{../permalink}}#{{id}}\">{{title}}</a></h2> <div>{{body}}</div> {{/each}}...Or this?{#names}{.}{@idx}{.}{/idx}{@sep}, {/sep}{/names}Want something simpler and more readable so you can stop wasting time memorizing what all those funky symbols do so you can focus more on getting actual work done?Well you're not the only one.Teddy, symbol-buster extraordinaireTeddy the trust-buster was a man of the people, curtailing the abuse of monopolists. As the most badass President of all-time, there's no way he'd put up with all this indecipherable templating nonsense.As such, Teddy the templating engine is an engine of the people, curtailing the abuse of indecipherable templating systems. Teddy trust-buster extraordinaire is now symbol-buster extraordinaire.Here's how:More concise {variable} syntax. One curly bracket. Not two, not three, no pound signs, no question marks, no backticks, no gang signs, and no hieroglyphs.An <include> tag for layout templates and partials which accepts arguments via child <arg> elements.Flow control tags: <if>, <unless>, <elseif>, <elseunless>, and <else> for basic templating logic.A <loop> tag for looping.Server-side comments using <!--! this syntax --> or {! this syntax !} which are stripped out at the template compilation stage.This module was built and is maintained by the Roosevelt web framework team, but it can be used independently of Roosevelt as well."})
window.siteTexts.push({file: "docs/check-if-CSS-is-disabled/2.0.2/changelog/index.html", title: "Check if CSS is disabled — changelog (2.0.2)", text: "2.0.2Fixed a bug that would prevent the module from detecting new <link> tags inserted into the page after the DOM loads.Fixed a bug that would cause the module to remove CSS files overly aggressively.2.0.1Fixed docs issues.Fixed bundling issue.Updated dependencies.2.0.0Added feature to detect if stylesheets failed to load. If a CSS file fails to load, this module will emit an event called cssDisabled.Altered default behavior to take action if CSS is disabled:If CSS is disabled at the browser level, this module will throw a JS error to prevent any further JS from executing.If a CSS file fails to load, this module will remove all <link> tags and <style> tags from the DOM and emit the cssDisabled event so that you can undo any DOM manipulations and then stop any further JS from executing yourself.Added a justCheck param to restore the previous default behavior of just checking if CSS is disabled. The new cssDisabled event will still fire if justCheck is set.Refactored the module considerably.Updated dependencies.1.0.0First version."})
window.siteTexts.push({file: "docs/check-if-CSS-is-disabled/2.0.2/usage/index.html", title: "Check if CSS is disabled — usage (2.0.2)", text: "Installnpm install check-if-css-is-disabledThe package is distributed with the following builds available:dist/check-if-css-is-disabled.cjs: CommonJS bundle: const cssIsDisabled = require('check-if-css-is-disabled')dist/check-if-css-is-disabled.js: Standalone bundle that can be included via <script> tags. Declares a global variable called: checkIfCssIsDisableddist/check-if-css-is-disabled.min.js: Minified standalone bundle that can be included via <script> tags. Declares a global variable called: checkIfCssIsDisableddist/check-if-css-is-disabled.mjs: ES module: import cssIsDisabled from 'check-if-css-is-disabled'dist/check-if-css-is-disabled.min.mjs: Minified ES module: import cssIsDisabled from 'check-if-css-is-disabled/min'UsePlace this <script> tag with a small amount of inline JS before any <link> tags in your HTML:<script>window.addEventListener('error', (event) => { if (event?.target?.tagName === 'LINK') { window.linkTagError = true } }, true)</script>That will make it possible for this library to listen for any CSS files that fail to load.It's important for that script to be inlined before any <link> tags so that if any <link> tag fails to load, this module will be made aware of that even if this module is initialized after the CSS files are loaded or fail to load.Then in your JavaScript, include this module before any other JS executes. Here's an example using the CommonJS version:// this will stop the JS from executing if CSS is disabled or a CSS file fails to load; it will also remove any existing CSS from the DOM require('check-if-css-is-disabled')()By default, this module will take the following actions in response to CSS being disabled or any <link> tag failing to load:If CSS is disabled at the browser level, this module will throw a JS error to prevent any further JS from executing.If a CSS file fails to load at any time during your application's execution, this module will remove all <link> tags and <style> tags from the DOM and emit the cssDisabled event so that you can undo any DOM manipulations and then stop any further JS from executing yourself.You can exempt certain <link> or <style> tags from being removed by supplying a list of IDs to params, e.g. { exemptedIds: ['someTagToKeepById', 'someOtherTagToKeepById', 'etc'] } where an example tag to not remove would be <style id=\"someTagToKeep\">...</style>.To listen for the cssDisabled event, do this:window.addEventListener('cssDisabled', (event) => {   // undo any DOM manipulations and then stop any further JS from executing   document.body.classList.replace('js', 'no-js') // example DOM manipulation to undo   throw new Error('A CSS file failed to load at some point during the app\\'s usage. It is unsafe to execute any further JavaScript if the CSS has not loaded properly.') })You can prevent any of the above actions from being taken by supplying a justCheck flag to params e.g. { justCheck: true }, after which you can handle responding to CSS being disabled or a <link> tag not loading entirely yourself like this:const checkIfCssIsDisabled = require('check-if-css-is-disabled') const cssIsDisabled = checkIfCssIsDisabled({ justCheck: true }) // the constructor will return `true` if CSS is disabled and `false` if it is not; all params are optional if (cssIsDisabled) {   // do things if CSS is disabled }(The cssDisabled event will be emitted regardless of whether the justCheck flag is set to true or not.)"})
window.siteTexts.push({file: "docs/crossplatform-killport/1.0.1/changelog/index.html", title: "Crossplatform killport — changelog (1.0.1)", text: "1.0.1Made the script a bit more aggressive in its attempt to kill the process.Updated dependencies.1.0.0Initial version."})
window.siteTexts.push({file: "docs/crossplatform-killport/1.0.1/usage/index.html", title: "Crossplatform killport — usage (1.0.1)", text: "First make sure Node.js is installed on your system.Then, to install crossplatform-killport to your system:npm i -g crossplatform-killportKill whatever process is using port 8080:killport 8080Windows users may need to run Set-ExecutionPolicy Unrestricted on their terminal to permit the script to run. See docs from Microsoft for more information.Use via npx (this will allow you to use it without installing it to your system by downloading it from npm temporarily):npx crossplatform-killport 8080Use from within a Node.js project's root directory:node_modules/.bin/killport 8080Use from within Node.js code:const { spawnSync, } = require('child_process') spawnSync('node_modules/.bin/killport', ['8080', '--silent'], { env: process.env, shell: false, stdio: ['ignore', 'pipe', 'pipe'] })"})
window.siteTexts.push({file: "docs/express-browser-reload/4.0.0/changelog/index.html", title: "Express browser reloader — changelog (4.0.0)", text: "4.0.0Breaking: Forked reload to express-browser-reload which focuses exclusively on the Express use case, as opposed to reload which is a more generalized tool with more features beyond the Express world.Breaking: Altered the architecture to attach the WebSocket server to an existing Express server rather than creating a new server to run alongside it.Breaking: Removed support for some older browsers as well as checks to see if you're running an older browser to simplify the code and make it easier to maintain.Breaking: Removed all params except for route.Added a new param skipDeletingConnections which will skip purging HTTP connections on the Express server when it restarts. If you're already handling this on your Express server yourself, set this param to true to prevent errors.Refactored the code to make it simpler and easier to maintain.Updated dependencies.Previous updates before the hard fork of reload to express-browser-reload are below. The original project can be found at https://github.com/alallier/reload3.3.0 / 2024-08-14Reload command line quality of life enhancementsReload command line now supports serving .html files when only / is present in the browser. See: https://github.com/alallier/reload/pull/326Reload command line now uses supervisor instead of nodemon for server side file watching - See: https://github.com/alallier/reload/pull/367Reload command line now watches sub-directories - See: https://github.com/alallier/reload/pull/367Reload command line now supports ignoring directories and files. See: https://github.com/alallier/reload/pull/370Reload command line now shows help if invalid flag is provided. See: https://github.com/alallier/reload/pull/369Refactored how file serving works in reload-server to make it more performant and easier to read. See: https://github.com/alallier/reload/pull/326Removed codecov dependency for coverage reporting in favor of native GitHub Action. See: https://github.com/alallier/reload/pull/3663.2.2 / 2024-08-12A bunch of dependency updates and some project maintenanceFixed tests and updated CI (drop 14.x and 16.x | added 20.x and 22.x) - See: https://github.com/alallier/reload/pull/356Updated actions/setup-node action to v4 - See: https://github.com/alallier/reload/pull/350Updated actions/checkout action to v4 - See: https://github.com/alallier/reload/pull/347Updated ws from ~8.11.0 to ~8.18.0 - See: https://github.com/alallier/reload/pull/354 and https://github.com/alallier/reload/pull/360Updated sinon from 15.0.1 to 18.0.0 - See: https://github.com/alallier/reload/pull/343 and https://github.com/alallier/reload/pull/364Updated standard from 17.0.0 to 17.1.0 - See: https://github.com/alallier/reload/pull/345Updated mocha from 10.2.0 to 10.7.3 - See: https://github.com/alallier/reload/pull/359Updated codecov from 3.8.2 to 3.8.3 - See: https://github.com/alallier/reload/pull/358Updated open from 8.4.0 to 8.4.2 - See: https://github.com/alallier/reload/pull/358Updated minimist from 1.2.7 to 1.2.8 - See: https://github.com/alallier/reload/pull/341Updated commander from ~9.4.0 to ~12.1.0 - See: https://github.com/alallier/reload/pull/351Updated cli-color from 2.0.3 to 2.0.4 - See: https://github.com/alallier/reload/pull/357Updated express from 4.18.2 to 4.19.2 - See: https://github.com/alallier/reload/pull/352Updated nyc from 15.1.0 to 17.0.0 - See: https://github.com/alallier/reload/pull/3623.2.1 / 2023-01-02Happy New Year!Drop 12.x and add 18.x on CI - See: https://github.com/alallier/reload/pull/328Update CI actions/checkout to v3 - See: https://github.com/alallier/reload/pull/318Update CI actions/setup-node to v3 - See: https://github.com/alallier/reload/pull/319Dependency UpdatesUpdate ws from ~7.4.0 to ~8.11.0 - See: https://github.com/alallier/reload/pull/307Update express from 4.17.1 to 4.18.2 - See: https://github.com/alallier/reload/pull/315Update finalhandler from ~1.1.1 to ~1.2.0 - See: https://github.com/alallier/reload/pull/316Update serve-static from ~1.14.0 to ~1.15.0 - See: https://github.com/alallier/reload/pull/317Update commander from ~7.2.0 to ~9.4.0 - See: https://github.com/alallier/reload/pull/332Update mocha from 9.0.0 to 10.2.0 - See: https://github.com/alallier/reload/pull/333Update sinon from 11.1.1 to 15.0.1 - See: https://github.com/alallier/reload/pull/334Update standard from 16.0.3 to 17.0.0 - See: https://github.com/alallier/reload/pull/335Remove url-parse dependency in favor of built in function - See: https://github.com/alallier/reload/pull/3253.2.0 / 2021-06-09CI UpdatesDropped Node 10.x and added 16.x from CI - See: https://github.com/alallier/reload/pull/298Update actions/checkout action to v2 - See: https://github.com/alallier/reload/pull/276Update actions/setup-node action to v2 - https://github.com/alallier/reload/pull/282Dependency UpdatesUpdate commander from ~6.1.0 to ~7.2.0 - See: https://github.com/alallier/reload/pull/283Update url-parse from ~1.4.4 to ~1.5.0 - See: https://github.com/alallier/reload/pull/291Update open from ^7.0.0 to ^8.0.0 - See: https://github.com/alallier/reload/pull/292/filesUpdate ws from ~7.3.0 to ~7.4.6 - See: https://github.com/alallier/reload/pull/294Update sinon from 9.1.0 to 11.1.1 - See: https://github.com/alallier/reload/pull/295/filesUpdate mocha from 8.4.0 to 9.0.0 - See: https://github.com/alallier/reload/pull/297/filesUpdate downstream y18n from 4.0.0 to 4.0.1 - See: https://github.com/alallier/reload/pull/2883.1.1 / 2020-09-29Updated mocha from 7.1.2 to 8.1.3 - See: https://github.com/alallier/reload/pull/255Updated codecov from 3.7.0 to 3.7.2 - See: https://github.com/alallier/reload/pull/258 and https://github.com/alallier/reload/pull/266Updated commander from 5.1.0 to 6.1.0 - See: https://github.com/alallier/reload/pull/259 and https://github.com/alallier/reload/pull/265Updated sinon from 9.0.2 to 9.1.0 - See: https://github.com/alallier/reload/pull/2643.1.0 / 2020-06-10Changed passphrase option from https.p12.passphrase to https.passphrase so it can be used for certAndKey configurations as well - See: https://github.com/alallier/reload/pull/251Tweaked CI configuration file so GitHub Actions CI will also run on pull requests - See: https://github.com/alallier/reload/pull/250Updated nyc from 15.0.1 to 15.1.0 - See: https://github.com/alallier/reload/pull/249Fix the repository URL in package.json - See: https://github.com/alallier/reload/pull/2523.0.6 / 2020-06-10Contains the changes from 3.1.0 but was semantically versioned incorrectly. It is recommended not to use this version and upgrade to 3.1.03.0.5 / 2020-05-25Fixed bug where command line Reload where reload was writing to a file properly that broke on Node 14.x - See: https://github.com/alallier/reload/pull/245GitHub Actions - See: https://github.com/alallier/reload/pull/247Added Node 14.x to GitHub Actions CIRemoved Node 13.x from GitHub Actions due to end of lifeDependency UpdatesUpdated codecov from 3.6.1 to 3.7.0 - See: https://github.com/alallier/reload/pull/235 and https://github.com/alallier/reload/pull/246Updated commander from 4.1.0 to 5.1.0 - See: https://github.com/alallier/reload/pull/246Updated minimist from 1.2.0 to 1.2.3 (Security package-lock.json) - See: https://github.com/alallier/reload/pull/236Updated mocha from 7.0.0 to 7.1.2 - See: https://github.com/alallier/reload/pull/233Updated sinon from 8.0.4 to 9.0.2 - See: https://github.com/alallier/reload/pull/231 and https://github.com/alallier/reload/pull/234Updated standard from 14.3.1 to 14.3.4 - See: https://github.com/alallier/reload/pull/238Updated nyc from 15.0.0 to 15.0.1 - See: https://github.com/alallier/reload/pull/242Updated ws from 7.2.0 to 7.3.0 - See: https://github.com/alallier/reload/pull/2443.0.4 / 2019-01-13Migrated CI to GitHub Actions - See: https://github.com/alallier/reload/pull/222Moved sample app to a new project - See: https://github.com/alallier/reload/pull/229Updated nyc from 14.1.1 to 15.0.0 - See: https://github.com/alallier/reload/pull/224Updated sinon from 7.5.0 to 8.0.4 - See: https://github.com/alallier/reload/pull/225Updated mocha from 6.2.2 to 7.0.0 - See: https://github.com/alallier/reload/pull/226Updated commander from ~3.0.0 to ~4.1.0 - See: https://github.com/alallier/reload/pull/220Removed tree-kill dependency - See: https://github.com/alallier/reload/pull/2233.0.3 / 2019-10-20Updated cli-color from ~1.4.0 to ~2.0.0 - See: https://github.com/alallier/reload/pull/212Updated open from ^6.1.0 to ^7.0.0 - See: https://github.com/alallier/reload/pull/213Updated mocha from 6.2.1 to 6.2.2 - See: https://github.com/alallier/reload/pull/214Updated ws from ~7.1.0 to ~7.2.0 - See: https://github.com/alallier/reload/pull/2153.0.2 / 2019-10-06Updated express sample app's body-parser from 1.18.3 to 1.19.0 - See: https://github.com/alallier/reload/pull/193Updated ws from ~6.2.1 to ~7.1.0 - See: https://github.com/alallier/reload/pull/194Updated nyc from 14.0.0 to 14.1.1 - See: https://github.com/alallier/reload/pull/195Updated serve-static from ~1.13.2 to ~1.14.0 - See: https://github.com/alallier/reload/pull/196Updated codecov from 3.3.0 to 3.6.1 - See: https://github.com/alallier/reload/pull/197Updated express in reload and sample from 4.16.4 to 4.17.1 - See: https://github.com/alallier/reload/pull/198Updated mocha from 6.1.4 to 6.2.1 - See: https://github.com/alallier/reload/pull/203Updated sinon from 7.3.2 to 7.5.0 - See: https://github.com/alallier/reload/pull/204Updated commander from ~2.20.0 to ~3.0.0 - See: https://github.com/alallier/reload/pull/205Updated standard from 12.0.1 to 14.3.1 - See: https://github.com/alallier/reload/pull/206Use package.json files instead of .npmignore. See: https://github.com/alallier/reload/pull/209Update CONTRIBUTING.md file for collaborators to ensure the sample app's reload version matches reload upstream. See: https://github.com/alallier/reload/pull/2103.0.1 / 2019-04-20Version 3.0.1AddedRenovate for auto dependency updatinghttps://github.com/alallier/reload/pull/173https://github.com/alallier/reload/pull/178Codecov for coverage reportshttps://github.com/alallier/reload/pull/174npmignorehttps://github.com/alallier/reload/pull/176Contributing Documenthttps://github.com/alallier/reload/pull/177FixedUpdated documentation to better reflect new API with promiseshttps://github.com/alallier/reload/pull/189Added reload as dependency to sample apphttps://github.com/alallier/reload/pull/188Moved Mocha to dev dependencieshttps://github.com/alallier/reload/pull/187Updatedmocha to v6.1.4https://github.com/alallier/reload/pull/179nyc to v14https://github.com/alallier/reload/pull/183sinon to v7.3.2https://github.com/alallier/reload/pull/1843.0.0 / 2019-04-07Version 3.0.0Consult Migration Guide for help with updating from Version 2.x to 3.xBreaking/RemovedRemoved deprecated parameters (Reload no longer takes the server argument and will error if you provide it)Removed support for Node versions 4, 5, 6, 7, 8, and 9Breaking/AddedReload now returns a promiseFunctions in the return API also return promisescloserServerstartWebSocketServerReload returns errors in promisesAddedAdded unit tests. (See: https://github.com/alallier/reload/issues/42)Added coverage analyzerCoverage 100% on reload.js fileAdded node 10 and 11 to the official supported listAdded support for HTTPSCert and Key or PFX/P12Note: This was available in version 1 and then was dropped in Version 2Added sample app README (See: https://github.com/alallier/reload/issues/45)Added MIGRATION_GUIDE to help with migrating across major versions of reloadAdded force wss optionCI jobs now use npm ci isntall (See: https://github.com/alallier/reload/issues/158)ChangedUpdates dependenciesClosed these issuesHTTPS - https://github.com/alallier/reload/issues/143Unit tests - https://github.com/alallier/reload/issues/42Document Fallback flag - https://github.com/alallier/reload/issues/169Drop Node 4 support - https://github.com/alallier/reload/issues/156Documentation on how to use sample app - https://github.com/alallier/reload/issues/45Use npm ci install - https://github.com/alallier/reload/issues/1582.4.0 / 2018-12-02Added new -f or --fallback command-line flag. See: MR https://github.com/alallier/reload/pull/167. Issue: https://github.com/alallier/reload/issues/164Allow HTML pages to be routed with .html. See: MR https://github.com/alallier/reload/pull/167. Issue: https://github.com/alallier/reload/issues/1662.3.1 / 2018-08-06Fixed url-parse vulnerability. See: https://github.com/alallier/reload/pull/1602.3.0 / 2018-06-11Added wss to return API. See: https://github.com/alallier/reload/pull/148Added watch flag to command line. See: https://github.com/alallier/reload/pull/155Security updatesUpdated finalhandler from ~1.0.3 to ~1.1.1. See: https://github.com/alallier/reload/pull/154Replaced open with opn. See: https://github.com/alallier/reload/pull/154Updated serve-static from ~1.12.3 to 1.13.2. See: https://github.com/alallier/reload/pull/154Updated ws from ~3.0.0 to ~5.2.0. See: https://github.com/alallier/reload/commit/3310a66f80e04e48247e5c2ca4a2f4f12780294fUpdated standard from ^10.0.2 to ^11.0.1. See: https://github.com/alallier/reload/commit/073e91b33a00dcb37c7eb5fa7601cd71f7ea34e92.2.2 / 2017-08-20Fixed bug that caused HTML files to not be served when using directory flag (reload command line). See: https://github.com/alallier/reload/pull/1392.2.1 / 2017-08-05Fixed regression causing reload command line to only serve HTML files. See: https://github.com/alallier/reload/pull/1342.2.0 / 2017-07-27Dropped express as a dependency (in reload command line). Reload now uses a vanilla node http server to achieve the same result. This update for the command line offers no changes to the end user and simply modifies the underlying code. See: https://github.com/alallier/reload/pull/1322.1.0 / 2017-07-25Added the ability to have the WebSocket server start wait. (For more information read about the webSocketServerWaitStart parameter) See: https://github.com/alallier/reload/pull/1302.0.1 / 2017-07-20Adjusted wording in README. See: https://github.com/alallier/reload/pull/123Removed MacOS Travis Building. See: https://github.com/alallier/reload/pull/125Fixed bug when running command line on port 80. See: https://github.com/alallier/reload/pull/1282.0.0 / 2017-07-09See V2.0.0 PR https://github.com/alallier/reload/pull/118AddedAdded object based parameters (Issue #77 / Originally solved in PR #101 and refactored in #104)Added port configuration (Issue #60 / Originally solved in PR #68 and refactored in #104)Added timestamp to reload command line reloading (Issue #7 / PR #78)Added node 8 support (Issue #106 / PR #119)Added table of contents to README (Issue #103 / PR #105)Added return API to README (PR #121)ModifiedAbstracted reload call to an index.js file. Index file now calls reload.js source file. This is to abstract the reload command line calling with a third argument that is now private and not apart of the public API (PR #117)Update dependencies to latest and add package-lock.json files (PR #109)Audited and refactored return API (Issue #120 / PR #121)RemovedDrop support for server and just use ports (Issue #102 / PR #104)Removed support of node 0.1 and 0.12 (Issue #73 / PR #86)Separate server and app initialization into two parts. (This was originally fixed in PR #71 but was reversed in PR #104 when the decision to drop server was made.)API Breaking ChangesThis version makes breaking changes to the reload API. The only required argument to reload now is app. This makes reload a lot easier to use. Reload takes a maximum of two arguments app and an opts (options) object with the following optional parameters, port, route, and verbose. Reload runs on default port 9856 unless otherwise specified in the opts object.How to upgrade from Version 1 to Version 2Before Version 2 reload always attached to your server's port by passing the server in a argument to reload. We have now dropped support for server and reload runs on ports only. Reload now has one required parameter app and one optional parameter opts an object of reload options. Below are two upgrade examples for the only two possible 1.x configurations.Upgrade with required arguments: reload(server, app) becomes reload(app)Upgrade with both required arguments and the one optional argument: reload(server, app, true) becomes reload(app, {verbose: true})It is important to note that reload only uses ports now. So upgrading using the examples above will have reload run on it's default port 9856. If you want to run reload on a different port you need to specify a port in the opts object like: reload(app, {port: 9852})Most people can just use the default settings, allowing reload(app) to work in most cases.Please refer to the full API in the README.1.1.7 / 2017-06-28Repository ownership was transfered from jprichardson to alallierUpdated Travis badge after ownership change. See: https://github.com/alallier/reload/pull/116Updated AppVeyor badge after ownership change. See: https://github.com/alallier/reload/pull/112Updated README after owernship change. See: https://github.com/alallier/reload/pull/115Changed style of npm badge to match the others. See: https://github.com/alallier/reload/pull/1111.1.6 / 2017-06-18Add Mac building in Travis. See https://github.com/jprichardson/reload/pull/981.1.5 / 2017-05-13Fixed standard call so that our bin file also got tested. See https://github.com/jprichardson/reload/pull/851.1.4 / 2017-05-13Added AppVeyor to build our tests in an Windows environment. See https://github.com/jprichardson/reload/pull/921.1.3 / 2017-04-28Upgrade Standard to ~10.0.2 in order for the build to pass node 0.1 and 0.12 Also removed depricated fs.exists and replaced with fs.access See: https://github.com/jprichardson/reload/pull/751.1.2 / 2017-04-16Fix multiple websockets at once when using reload.reload(); See: https://github.com/jprichardson/reload/pull/571.1.1 / 2017-01-28Fixed undefined error log on send message. See: https://github.com/jprichardson/reload/pull/591.1.0 / 2016-11-12Added client end web socket support for https. See: https://github.com/jprichardson/reload/pull/541.0.2 / 2016-10-31Added error handling to websocket send. See: https://github.com/jprichardson/reload/pull/491.0.1 / 2016-07-15Fixed onbeforeunload event not firing in reload-client See: https://github.com/jprichardson/reload/pull/461.0.0 / 2016-06-24AddedTwo new badges to the README (code-style and npm version)Verbose mode as option for both Express and command line usageA sample app for expressModifiedRe-wrote the README to reflect all of these changesUpdated dependencies to their latest version’sFixed race condition that caused reload to spam the server when using sockets for automatic reloadingRemovedAll delays (wait, normal, and socket) (Reload is now all automatic using web sockets (no delays at all))Client side sockjs web sockets (removed sockjs) (Now using native web sockets on the client side and ws on server side)See: https://github.com/jprichardson/reload/pull/410.8.2 / 2016-06-24Fixed regression caused by Windows line endings. See: https://github.com/jprichardson/reload/pull/400.8.1 / 2016-06-05Allow reload from node server. See: https://github.com/jprichardson/reload/pull/380.8.0 / 2015-12-21fixed hostname flag. See: https://github.com/jprichardson/reload/pull/34use exts from command line. See: https://github.com/jprichardson/reload/pull/320.7.0 / 2015-10-21fixed wait flag: https://github.com/jprichardson/reload/pull/270.6.0 / 2015-10-12added hostname/ -h flag. See: https://github.com/jprichardson/reload/issues/14 and https://github.com/jprichardson/reload/pull/280.5.0 / 2015-09-28renamed delay flag to reloadDelay. See: https://github.com/jprichardson/reload/pull/26added wait flag. See: https://github.com/jprichardson/reload/pull/260.4.0 / 2015-08-17add true option to delay so that it waits indefinitely until server is up https://github.com/jprichardson/reload/pull/21express 4 routes, https://github.com/jprichardson/reload/pull/240.3.0 / 2015-07-17added option for start page. See: https://github.com/jprichardson/reload/pull/200.2.0 / 2015-06-29Added Express 4 Support0.1.0 / 2013-09-30silence sockjscreated reload bin that is useful for browser/html development0.0.2 / 2013-03-14fixed bug that caused failure on hashbang urlsset proper mime type on reload.js client side script0.0.1 / 2013-03-13Initial release."})
window.siteTexts.push({file: "docs/express-browser-reload/4.0.0/configuration/index.html", title: "Express browser reloader — configuration (4.0.0)", text: "APIThese are the parameters you can pass to the constructor.route [String]: What Express route to put the client-side JS file on. Default: /express-browser-reload.js.skipDeletingConnections [Boolean]: Whether to skip purging HTTP connections on the Express server when it restarts. If you're already handling this on your Express server yourself, set this param to true to prevent errors. Default: false."})
window.siteTexts.push({file: "docs/express-browser-reload/4.0.0/usage/index.html", title: "Express browser reloader — usage (4.0.0)", text: "Here's a full sample app:const express = require('express') const app = express()  app.get('/', (req, res) => {   res.type('text/html')   res.send(`<!doctype html> <html>   <head>     <title>express-browser-reload express sample</title>   </head>   <body>     <p>express-browser-reload express sample</p>     <!-- all you have to do is include the reload script and have it be on every page of your project -->     <!-- you do not create this route, reload creates it for you automatically -->     <script src=\"/express-browser-reload.js\"></script>   </body> </html>`) })  const server = app.listen(3000, () => console.log(`🎧 express-browser-reload express sample app server is running on http://localhost:3000`))  // params for express-browser-reload (currently set to the defaults) const params = {   route: '/express-browser-reload.js',   skipDeletingConnections: false }  require('express-browser-reload')(app, server, params)"})
window.siteTexts.push({file: "docs/express-html-validator/1.0.1/changelog/index.html", title: "Express HTML validator — changelog (1.0.1)", text: "1.0.1Fixed a possible crash that can happen with some variety of request objects.Updated various dependencies.1.0.0Added a new type of exceptions param called routes.Refactored the code.Updated various dependencies.0.2.5Fixed possible race condition.Updated various dependencies.0.2.4Updated various dependencies.0.2.3Updated various dependencies.0.2.2Bumped various dependencies.0.2.1Added feature to run the validator on arbitrary strings in addition to the direct Express render integration.Bumped various dependencies.0.2.0Bumped various dependencies.0.1.3Bumped various dependencies.0.1.2Changed default rules to focus less on best practices enforcement and more on validation only.Bumped various dependencies.0.1.1Changed default rules to focus less on best practices enforcement and more on validation only.Bumped various dependencies.0.1.0Released initial version."})
window.siteTexts.push({file: "docs/express-html-validator/1.0.1/configuration/index.html", title: "Express HTML validator — configuration (1.0.1)", text: "Optionally you can pass this module a set of configs:exceptions [Object]: A set of params that can be used to prevent validation in certain scenarios:routes [Array]: An array of routes to exclude from validation. Supports wildcard * syntax. Default: [].header [String]: A custom header that when set will disable the validator on a per request basis. Default: 'Partial'.modelValue [String]: An entry in your data model passed along with a res.render that when set will disable validation on the rendered HTML. Default: '_disableValidator'validatorConfig [Object]: html-validate configuration that determines what errors the validator looks for. The full list of available validator rules can be found here. This configuration can also be set by a .htmlValidate.json file placed in your app root directory.Default for validatorConfig:{   \"extends\": [\"html-validate:standard\"] }"})
window.siteTexts.push({file: "docs/express-html-validator/1.0.1/usage/index.html", title: "Express HTML validator — usage (1.0.1)", text: "First declare express-html-validator as a dependency in your app.Then require the package into your application and call its constructor, passing along your Express app:const express = require('express') const expressValidator = require('express-html-validator') const app = express() const config = {}  // generally this would be used in development mode if (process.env.NODE_ENV === 'development') {   expressValidator(app, config) }  // expressValidator should be called before defining routes app.get('/', (req, res) => {   // this html response will be validated in real time as it's sent   res.sendFile(path.join(publicDir, 'index.html')) })You can also run the validator on arbitrary strings outside of the Express context:const config = {} const expressValidator = require('express-html-validator')(config)  const someHtml = `<!DOCTYPE html> <html lang=\"en\"> <head>   <meta charset=\"UTF-8\">   <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">   <title>Some HTML that will not validate</title> </head> <body>   <p>hello world</p></p> </body> </html>`  const validationResult = expressValidator(someHtml)Since the example HTML is not valid, if you display the contents of validationResult in a browser, you will see validation errors."})
window.siteTexts.push({file: "docs/fallback-dependencies/1.0.3/changelog/index.html", title: "Fallback dependencies — changelog (1.0.3)", text: "1.0.3Fixed bug that resulted in hard to understand errors if git wasn't functioning properly on your system.Updated various dependencies.1.0.2Fixed bug causing old dependencies to be removed unnecessary.Fixed fallbacks not working.Updated various dependencies.1.0.1Refactored some code to tighten some things up.Updated various dependencies.1.0.0Altered fallbackDependencies to no longer install devDependencies of a given repo. You can restore this behavior by declaring it in fallbackDevDependencies instead.Added support for FALLBACKDEPENDENCIESPREFERRED_WILDCARD environment variable to move a preferred domain up to the top of list of fallback dependencies to try regardless of the order specified in the app's config.Updated various dependencies.0.1.6Backed out --omit=dev change from 0.1.5 that prevented fallback-dependencies from installing devDependencies of a given repo.0.1.5fallback-dependencies will now detect if your clone is out of date in the case of -b versioned entries. If it's out of date, it will remove the old clone and re-clone it.fallback-dependencies will no longer install devDependencies of a given repo.0.1.4You can now prevent a fallback-dependency from being installed in a situation where the repo is not a direct dependency of the root project by appending the :directOnly flag to the end of the dependency name.Various dependencies updated.0.1.3You can now skip installing dependencies of a fallback-dependency by appending the -skip-deps flag to the end of the dependency.Various dependencies updated.0.1.2Added some detection of clones sourced from specific git tags to display a more helpful error message when trying to update non-updatable clones.Various dependencies updated.0.1.1Added feature to source repo locations from a separate, external file.Various dependencies updated.0.1.0Initial version."})
window.siteTexts.push({file: "docs/fallback-dependencies/1.0.3/configuration/index.html", title: "Fallback dependencies — configuration (1.0.3)", text: "Clone a specific version of your fallback-dependencyTo version your fallback-dependencies, you should use git tags to stamp versions onto your commits. To clone a specific git tag, add -b tag_name to the URL, e.g. \"https://some.private.git.repo.somewhere -b 1.0.5\".Fetch devDependencies of your fallback-dependenciesBy default, fallback-dependencies will not install the devDependencies of a given repo that is cloned. If you want to do so for any repo, put it in a fallbackDevDependencies block instead of a fallbackDependencies block in your package.json.Prevent installing dependencies of fallback-dependenciesTo skip installing dependencies for a specific fallback-dependency, add -skip-deps to the end of the URL string, e.g. \"https://some.private.git.repo.somewhere -b 1.0.5 -skip-deps\".Prevent a fallback-dependency from installing its own fallback-dependenciesTo prevent a fallback-dependency from being installed in a situation where the repo is not a direct dependency of the root project, append the :directOnly flag to the end of the dependency name, e.g. \"some-private-dependency:directOnly\": [ ... ]. This will prevent repos with nested fallback-dependencies from installing their own fallback-dependencies.Let users prioritize URL list differentlyTo move a preferred domain up to the top of the list of fallback-dependencies to try regardless of the order specified in the app's config, set the environment variable FALLBACK_DEPENDENCIES_PREFERRED_WILDCARD to a string to match in the URL list."})
window.siteTexts.push({file: "docs/fallback-dependencies/1.0.3/usage/index.html", title: "Fallback dependencies — usage (1.0.3)", text: "First declare fallback-dependencies as a dependency of your app.Declare fallback-dependenciesNext, add a fallbackDependencies entry to your package.json alongside your dependencies, devDependencies, etc, e.g.:\"fallbackDependencies\": {   \"dir\": \"lib\",   \"repos\": {     \"some-private-dependency\": [       \"https://some.private.git.repo.somewhere\",       \"https://some.private.git.repo.somewhere.else\"     ],     \"some-other-private-dependency\": [       \"https://some.other.private.git.repo.somewhere\",       \"https://some.other.private.git.repo.somewhere.else\"     ]   } }APIdir [String]: What directory to deposit fallback-dependencies into. Default: fallback_dependencies.repos [Object of Arrays of Strings]: A list of dependencies similar to the dependencies field in package.json, but instead of supplying a string for where to fetch it, you supply an array of strings of possible locations to fetch it from. This script will attempt to fetch it from the first location, then if that fails will fallback to the second possible place to get it from, and so on until it runs out of places to try. Default: {}.reposFile [String]: Relative path to a JSON file that contains a list of repos formatted the same as the repos entry. If both repos and reposFile are supplied, the two lists will be merged. Default: {}.Example of reposFile usage:// fallback-dependencies.json {   \"some-private-dependency\": [     \"https://some.private.git.repo.somewhere\",     \"https://some.private.git.repo.somewhere.else\"   ],   \"some-other-private-dependency\": [     \"https://some.other.private.git.repo.somewhere\",     \"https://some.other.private.git.repo.somewhere.else\"   ] }All params are optional, but the module won't do anything unless you supply at least repos or reposFile.Fetch fallback-dependencies with a postinstall scriptLastly, add a postinstall script to your npm scripts to execute the fallback-dependencies script after you install other dependencies:\"scripts\": {   \"postinstall\": \"node node_modules/fallback-dependencies/fallback-dependencies.js\" },You can also write your postinstall script to fail silently if the fallback-dependencies.js file is not found for whatever reason, e.g.:\"scripts\": {   \"postinstall\": \"node -e \\\"try { require('child_process').spawnSync('node', ['node_modules/fallback-dependencies/fallback-dependencies.js'], { shell: false, stdio: 'ignore' }) } catch (e) {}\\\"\" },Writing the postinstall script that way might be a little ugly, but it's useful to do it this way if fallback-dependencies is a devDependency of your app and you don't want the postinstall script to fail when you do a production dependencies-only build."})
window.siteTexts.push({file: "docs/minify-html-attributes/1.0.2/changelog/index.html", title: "HTML attribute minifier — changelog (1.0.2)", text: "1.0.2Fixed a crash caused by not populating the exemptNames param.1.0.1Added option to exempt specific values from being renamed.Fixed a bug that caused name attributes to be improperly renamed.1.0.0Initial commit."})
window.siteTexts.push({file: "docs/minify-html-attributes/1.0.2/configuration/index.html", title: "HTML attribute minifier — configuration (1.0.2)", text: "APIIn the examples on the usage page, you can see that minify-html-attributes is called with the following params:const editedFiles = require('minify-html-attributes')({   htmlDir: './mvc/.preprocessed_views', // where your html files to process are located   cssDir: './.preprocessed_statics', // where your css files to process are located   jsDir: './.preprocessed_statics' // where your js files to process are located })Here is a breakdown of all the available params:htmlDir [String]: Location where your source HTML files are. If no HTML files are detected, this module will do nothing.cssDir [String]: Location where your source CSS files are. (Optional.)jsDir [String]: Location where your source JS files are. (Optional.)extraAttributes [Array of Strings]: Any additional HTML attributes you want to rename besides class, id, and data-*. Default [].exemptNames [Array of Strings]: Any names you want exempt from renaming. Default [].disableClassReplacements [Boolean]: Don't rename class attributes. Default: false.disableIdReplacements [Boolean]: Don't rename id attributes. Default: false.disableDataReplacements [Boolean]: Don't rename data-* attributes. Default: false.The returned editedFiles object is structured as follows:Key: the relative path of the file that was edited.type [String]: One of the following values: html, css, or js.contents [String]: The edited code."})
window.siteTexts.push({file: "docs/minify-html-attributes/1.0.2/usage/index.html", title: "HTML attribute minifier — usage (1.0.2)", text: "UsageInstall minify-html-attributes from npm and include it in your Node.js-based build script.Copy all your source HTML, CSS, and JS files to a location of your choice that is safe for editing.Run them through minify-html-attributes. minify-html-attributes will return an object that is a list of files that it modified. Files that were not modified will not be included in the object.Update the copied files with the new changes.Run any additional minifiers you like against the modified files as normal.Sample appHere's a full example that implements minify-html-attributes prior to running webpack and starting an Express server:const fs = require('fs-extra')  // copy all source html, css, and js to locations that are safe for editing fs.copySync('mvc/views', 'mvc/.preprocessed_views') // copy unmodified html to a modified templates directory fs.copySync('styles.css', '.preprocessed_statics/styles.css') // copy css file to the public folder fs.copySync('browser.js', '.preprocessed_statics/browser.js') // copy css file to the public folder  // load minify-html-attributes const editedFiles = require('minify-html-attributes')({   htmlDir: './mvc/.preprocessed_views', // where your html files to process are located   cssDir: './.preprocessed_statics', // where your css files to process are located   jsDir: './.preprocessed_statics' // where your js files to process are located })  // update any file that was postprocessed for (const fileName in editedFiles) {   const editedFile = editedFiles[fileName]   fs.writeFileSync(fileName, editedFile.contents) }  // copy preprocessed assets to final location  // html: no need for html files because they are edited in-place in ./mvc/.preprocessed_views  // css: just copy the file to the public folder; you could also do something fancier like run it through a preprocessor fs.copySync('.preprocessed_statics/styles.css', 'public/styles.css') // copy css file to the public folder  // js: bundle preprocessed js after it is preprocessed const webpack = require('webpack') const path = require('path') const webpackConfig = {   mode: 'production',   entry: './.preprocessed_statics/browser.js',   output: {     filename: 'bundle.js',     path: path.resolve(__dirname, 'public'),     libraryTarget: 'umd'   },   devtool: 'source-map' } const compiler = webpack(webpackConfig) compiler.run((err, stats) => {   if (err || stats.hasErrors()) {     console.error('Webpack build failed:', err || stats.toJson().errors)   } else {     // configure express     const express = require('express')     const app = express()     app.use(require('body-parser').urlencoded({ extended: true })) // populates req.body on requests     app.engine('html', require('teddy').__express) // set teddy as view engine that will load html files     app.set('views', 'mvc/.preprocessed_views') // set template dir     app.set('view engine', 'html') // set teddy as default view engine     app.use(express.static('public')) // make public folder serve static files      // load express routes     require('./mvc/routes')(app)      // start express server     const port = 3000     app.listen(port, () => {       console.log(`🎧 express sample app server is running on http://localhost:${port}`)     })   } })Here's how to run the sample app:cd sampleApps/expressnpm cicd ../../npm run express-sampleOr npm run sampleOr cd into sampleApps/express and run npm ci and npm startGo to http://localhost:3000"})
window.siteTexts.push({file: "docs/multi-db/1.0.1/changelog/index.html", title: "Multi-DB — changelog (1.0.1)", text: "1.0.1Fixed README typo regarding the npm package name.1.0.0Initial commit."})
window.siteTexts.push({file: "docs/multi-db/1.0.1/configuration/index.html", title: "Multi-DB — configuration (1.0.1)", text: "Creating a Multi-DB configThe following params are available when creating your Multi-DB config file or passing params via the constructor:Required paramsdefault [String]: Which database your app will use by default.Available options:mariadbmysqlpostgrespglitesqlite[mariadb|mysql|postgres|pglite|sqlite] [Object]: Configs specific to each database.config [Object]: Which config to attempt to connect to your database with by default. This object will be passed directly to the database driver, so the values should be set to whatever the database driver expects you to use to connect (e.g. host, username, password, database, other database configuration options).It is recommended that you set the user to a less privileged user, typically meaning this user should be able to insert and delete data, but not create, alter, or drop tables.If the credentials you specify do not exist, they can be created from the CLI scripts, which will use the adminConfig to connect in order to create the less privileged credentials.adminConfig [Object]: Same as config but you should configure it to use more privileged credentials, e.g. an account that is authorized to create tables, drop tables, administrate other users, etc. This config will be used for the CLI scripts for setup and teardown tasks. The regular, typically less-privileged config will be used for your app's business logic.Optional paramsadmin [Boolean]: Force the use of adminConfig for your database instead of the regular config. Default: false.schema [String]: Relative path to a file with what set of SQL statements you want to execute against your database when it is freshly created, if any. Default: undefined.loggerConfig [Object]: Options to suppress various kinds of logging.Default:loggerConfig: {   log: true, // regular logs   error: true, // logging errors   verbose: true // verbose logging }questionMarkParamsForPostgres [Boolean]: Automatically convert parameterized query placeholders from ? to $ + number within Multi-DB for PostgreSQL queries so you can use the ? syntax in PostgreSQL queries, which isn't possible in native PostgreSQL queries. Default: true.mergeConfig [Boolean]: Merge config values passed via constructor or environment variable with any .multi-db-config.json file detected in your app's directory structure. Default: true.Example configsExample for MariaDB:{   \"default\": \"mariadb\",   \"mariadb\": {     \"config\": {       \"host\": \"localhost\",       \"port\": 3306,       \"user\": \"app_name\",       \"password\": \"app_password\",       \"database\": \"app_name\"     },     \"adminConfig\": {       \"host\": \"localhost\",       \"port\": 3306,       \"user\": \"root\",       \"password\": \"password\",       \"database\": \"mariadb\"     },     \"schema\": \"db/schema.sql\"   } }Example for MySQL:{   \"default\": \"mysql\",   \"mysql\": {     \"config\": {       \"host\": \"localhost\",       \"port\": 3306,       \"user\": \"app_name\",       \"password\": \"app_password\",       \"database\": \"app_name\"     },     \"adminConfig\": {       \"host\": \"localhost\",       \"port\": 3306,       \"user\": \"root\",       \"password\": \"password\",       \"database\": \"mysql\"     },     \"schema\": \"db/schema.sql\"   } }Example for PostgreSQL:{   \"default\": \"postgres\",   \"postgres\": {     \"config\": {       \"host\": \"localhost\",       \"port\": 5432,       \"user\": \"app_name\",       \"password\": \"app_password\",       \"database\": \"app_name\"     },     \"adminConfig\": {       \"host\": \"localhost\",       \"port\": 5432,       \"username\": \"admin\",       \"password\": \"admin_password\",       \"database\": \"postgres\"     },     \"schema\": \"db/schema.sql\"   } }Example for PGlite:{   \"default\": \"pglite\",   \"pglite\": {     \"config\": {       \"database\": \"pg-data\"     },     \"schema\": \"db/schema.sql\"   } }Example for SQLite:{   \"default\": \"sqlite\",   \"sqlite\": {     \"config\": {       \"database\": \"db.sqlite\"     },     \"schema\": \"db/schema.sql\"   } }You could also create a single config that has configs for multiple databases or all of them if you like, but only one can be connected to per instance of Multi-DB.Multi-DB APIWhen you connect to a database using Multi-DB like in the below example, the constructor will return a db object.const db = await require('multi-db-driver')(config)This is the structure of the db object that Multi-DB returns:db.query(...) [Function]: Universal database query method that works on all supported databases.Arguments you can pass:query [String or Object]:When supplied a string as an argument, it will execute the query string against the default driver.When supplied an object as an argument, you can supply the following keys:default: A query string to execute against whichever database is the default.mariadb: A query string that will only execute against MariaDB databases.mysql: A query string that will only execute against MySQL databases.postgres: A query string that will only execute against PostgreSQL databases.pglite: A query string that will only execute against SQLite databases.sqlite: A query string that will only execute against SQLite databases.disableQuestionMarkParamsForPostgres: Set to true to prevent the query from attempting to normalize parameterized query placeholders from ? syntax to $1 $2 $3 etc syntax for PostgreSQL and PGlite queries.params [Array of Strings]: Optional array of parameters to supply values to the query.next(db, result) [Function]: Optional callback function to execute when the query is finished.Arguments provided:db [String]: Which database the query was executed against.result [Object]: The resulting object from the query the database driver gives you.db.config [Object]: Object representing the config loaded.db.driver [Object]: The object the default database driver module returns in case you need to interact with it directly.db.drivers [Object]: Object collection of all the driver modules currently loaded.db.mariadb [Object]: MariaDB-specific APIs.driver [Object]: The object the mariadb module returns in case you need to interact with it directly.pool [Object]: The pool instance returned by mariadb's createPool method once instantiated.conn [Object]: The connection instance returned by the pool instance's getConnection method once instantiated.username [String]: Username of the current active connection, if a connection is active.database [String]: Which database the currently active connection is connected to, if a connection is active.query(queryString) [Function]: Function that takes a query string and executes it against the mariadb driver.db.mysql [Object]: MySQL-specific APIs.driver [Object]: The object the mysql2 module returns in case you need to interact with it directly.pool [Object]: The pool instance returned by mysql2's createPool method once instantiated.conn [Object]: The connection instance returned by the pool instance's getConnection method once instantiated.username [String]: Username of the current active connection, if a connection is active.database [String]: Which database the currently active connection is connected to, if a connection is active.query(queryString) [Function]: Function that takes a query string and executes it against the mysql2 driver.db.postgres [Object]: PostgreSQL-specific APIs.driver [Object]: The object the pg module returns in case you need to interact with it directly.pool [Object]: The instance of pg.Pool created by Multi-DB once instantiated.client [Object]: The instance of pg.Client created by Multi-DB once instantiated.username [String]: Username of the current active connection, if a connection is active.database [String]: Which database the currently active connection is connected to, if a connection is active.query(queryString) [Function]: Function that takes a query string and executes it against the pg driver.db.pglite [Object]: PGlite-specific APIs.driver [Object]: The object the @electric-sql/pglite module returns in case you need to interact with it directly.db [Object]: The database instance returned by @electric-sql/pglite's Database constructor once instantiated.query(queryString) [Function]: Function that takes a query string and executes it against the @electric-sql/pglite driver.db.sqlite [Object]: SQLite-specific APIs.driver [Object]: The object the better-sqlite3 module returns in case you need to interact with it directly.db [Object]: The database instance returned by better-sqlite3's Database constructor once instantiated.query(queryString) [Function]: Function that takes a query string and executes it against the better-sqlite3 driver."})
window.siteTexts.push({file: "docs/multi-db/1.0.1/usage/index.html", title: "Multi-DB — usage (1.0.1)", text: "InstallFirst mark your desired database drivers as dependencies in your app.List of currently-supported database drivers:mariadb for MariaDB.mysql2 for MySQL.pg for PostgreSQL.pglite for PGlite.better-sqlite3 for SQLite.Then mark the multi-db-driver npm package as a dependency in your app as well. Multi-DB is generally designed to work with the latest version of each supported database driver.Then you can configure Multi-DB and connect to your database.Connect to a database using Multi-DBconst db = await require('multi-db-driver')(config)If you do not supply a config object in the constructor, Multi-DB will attempt to load your config from a .multi-db-config.json file that should most commonly be placed in the root directory of your app.Multi-DB will look for that file in up to 3 directories above where the Multi-DB module is located (e.g. looking at parent directories starting with node_modules). You can change this behavior by setting the MULTI_DB_CONFIG_FILE_SEARCH_ATTEMPTS environment variable to a number other than 3. The default value of 3 will in most circumstances include the root directory of your app as one of the locations that will be searched for your Multi-DB config, which is why it's the default value.If you want to set a location for the config file manually, then set the MULTI_DB_CONFIG_LOCATION environment variable to the absolute path on your filesystem to where your config is.It is recommended that you add .multi-db-config.json to your .gitignore as well because it will typically contain database credentials.See \"Configuration\" for information about how to set up a Multi-DB config.Performing database queriesThe below examples show how to use Multi-DB to query your database(s) from the simplest usage to the most complex, demonstrating how this module focuses on adding complexity only when needed as a progressive enhancement atop simpler, more concise syntax.Example of one universal query that works with any database you set in your configconst simpleQuery = await db.query('select * from some_table')This usage is basically as concise as any standalone database driver would be, except it will work with any database that uses the same SQL syntax for this specific query and similar basic ones.Universal query but with parametersconst noNormalizingNeeded = await db.query('select * from some_table where something = ?', ['some value'])The second argument is optional if you don't need params.Universal query with parameters and a callback function for post-processingconst normalizedDataUniversalQuery = await db.query('select * from some_table where something = ?', ['some value'], function (db, result) {   switch (db) {     case 'mysql':       // do stuff if it was a mysql query       return result     default:       // do stuff if it was a query to any other kind of database       return result   } })The third argument is optional if you don't need a post-processing function.The post-processing function is useful if you need to call out specific post-processing behaviors for certain databases.Default query with special query for a specific databaseconst normalizedDataMultipleQueries = await db.query(  // queries object {   default: 'select * from some_table where something = ?',   mysql: 'some mysql-specific version of the query where something = ?' },  // values array ['some value'],  // postprocess function function (db, result) {   switch (db) {     case 'mysql':       // do stuff if it was a mysql query       return result     default:       // do stuff if it was any other kind of query       return result   } })This supplies an object instead of a string to the query argument.It also combines all the other above features too, showing a maximally featureful and flexible version of the query method.By default Multi-DB will rewrite the query under the hood to use $1 instead of ? for queries being executed against PostgreSQL and PGlite. You can disable this behavior by setting questionMarkParamsForPostgres to false in your Multi-DB config, or by setting disableQuestionMarkParamsForPostgres to true at the query level in the query object.CLI scriptsThis module also comes with a cli.js file to automate common database setup and teardown tasks. It will load your Multi-DB config and connect to the database using the adminConfig to perform these tasks.The cli.js file supports the following commands:cli.js --create: Creates the user and database specified in your config if it does not already exist.cli.js --destroy: Drops the user and database specified in your config.cli.js --file file.sql: Executes the SQL statements in the specified SQL file. Will attempt to do so using the regular less privileged config by default and will escalate to the admin config only if the less privileged config is unable to connect.cli.js --dump-schema path/to/schema.sql: Dumps the connected database's schema to specified SQL file path. Will create file in specified path if it does not already exist.cli.js --dump-data path/to/schema.sql: Dumps the connected database's schema and data to specified SQL file path. Will create file in specified path if it does not already exist.For the dump commands to work, you will need to ensure pg_dump, mysqldump, and sqlite3 are in your PATH.OptionsSkip the prompts with --yes.Suppress logs and warnings with --suppress-logs.Suppress errors with --suppress-errors.Enable verbose logging with --enable-verbose.Integrating the CLI scripts into your appIt is recommended that you create npm scripts in your app's package.json file to run those commands. Example usage of those scripts if you create them would look something like this:npm run create-db: Executes node [...]/cli.js --create.npm run destroy-db: Executes node [...]/cli.js --destroy.npm run db-file -- file.sql: Executes node [...]/cli.js --file file.sql.npm run db-schema-dump -- path/to/schema.sql: Executes node [...]/cli.js --dump-schema path/to/schema.sql.npm run db-data-dump -- path/to/schema.sql: Executes node [...]/cli.js --dump-data path/to/schema.sql.Replace the [...] part in the above examples with the path to where your copy of this module resides, e.g. in node_modules, lib, git_modules, or wherever it happens to be in your app."})
window.siteTexts.push({file: "docs/multi-db/1.0.2/changelog/index.html", title: "Multi-DB — changelog (1.0.2)", text: "1.0.2Altered the logic of the query method to perform a transaction if params is supplied an array of objects or an array of arrays.Fixed a CLI text alignment issue.Updated dependencies.1.0.1Fixed README typo regarding the npm package name.1.0.0Initial commit."})
window.siteTexts.push({file: "docs/multi-db/1.0.2/configuration/index.html", title: "Multi-DB — configuration (1.0.2)", text: "Creating a Multi-DB configThe following params are available when creating your Multi-DB config file or passing params via the constructor:Required paramsdefault [String]: Which database your app will use by default.Available options:mariadbmysqlpostgrespglitesqlite[mariadb|mysql|postgres|pglite|sqlite] [Object]: Configs specific to each database.config [Object]: Which config to attempt to connect to your database with by default. This object will be passed directly to the database driver, so the values should be set to whatever the database driver expects you to use to connect (e.g. host, username, password, database, other database configuration options).It is recommended that you set the user to a less privileged user, typically meaning this user should be able to insert and delete data, but not create, alter, or drop tables.If the credentials you specify do not exist, they can be created from the CLI scripts, which will use the adminConfig to connect in order to create the less privileged credentials.adminConfig [Object]: Same as config but you should configure it to use more privileged credentials, e.g. an account that is authorized to create tables, drop tables, administrate other users, etc. This config will be used for the CLI scripts for setup and teardown tasks. The regular, typically less-privileged config will be used for your app's business logic.Optional paramsadmin [Boolean]: Force the use of adminConfig for your database instead of the regular config. Default: false.schema [String]: Relative path to a file with what set of SQL statements you want to execute against your database when it is freshly created, if any. Default: undefined.loggerConfig [Object]: Options to suppress various kinds of logging.Default:loggerConfig: {   log: true, // regular logs   error: true, // logging errors   verbose: true // verbose logging }questionMarkParamsForPostgres [Boolean]: Automatically convert parameterized query placeholders from ? to $ + number within Multi-DB for PostgreSQL queries so you can use the ? syntax in PostgreSQL queries, which isn't possible in native PostgreSQL queries. Default: true.mergeConfig [Boolean]: Merge config values passed via constructor or environment variable with any .multi-db-config.json file detected in your app's directory structure. Default: true.Example configsExample for MariaDB:{   \"default\": \"mariadb\",   \"mariadb\": {     \"config\": {       \"host\": \"localhost\",       \"port\": 3306,       \"user\": \"app_name\",       \"password\": \"app_password\",       \"database\": \"app_name\"     },     \"adminConfig\": {       \"host\": \"localhost\",       \"port\": 3306,       \"user\": \"root\",       \"password\": \"password\",       \"database\": \"mariadb\"     },     \"schema\": \"db/schema.sql\"   } }Example for MySQL:{   \"default\": \"mysql\",   \"mysql\": {     \"config\": {       \"host\": \"localhost\",       \"port\": 3306,       \"user\": \"app_name\",       \"password\": \"app_password\",       \"database\": \"app_name\"     },     \"adminConfig\": {       \"host\": \"localhost\",       \"port\": 3306,       \"user\": \"root\",       \"password\": \"password\",       \"database\": \"mysql\"     },     \"schema\": \"db/schema.sql\"   } }Example for PostgreSQL:{   \"default\": \"postgres\",   \"postgres\": {     \"config\": {       \"host\": \"localhost\",       \"port\": 5432,       \"user\": \"app_name\",       \"password\": \"app_password\",       \"database\": \"app_name\"     },     \"adminConfig\": {       \"host\": \"localhost\",       \"port\": 5432,       \"username\": \"admin\",       \"password\": \"admin_password\",       \"database\": \"postgres\"     },     \"schema\": \"db/schema.sql\"   } }Example for PGlite:{   \"default\": \"pglite\",   \"pglite\": {     \"config\": {       \"database\": \"pg-data\"     },     \"schema\": \"db/schema.sql\"   } }Example for SQLite:{   \"default\": \"sqlite\",   \"sqlite\": {     \"config\": {       \"database\": \"db.sqlite\"     },     \"schema\": \"db/schema.sql\"   } }You could also create a single config that has configs for multiple databases or all of them if you like, but only one can be connected to per instance of Multi-DB.Multi-DB APIWhen you connect to a database using Multi-DB like in the below example, the constructor will return a db object.const db = await require('multi-db-driver')(config)This is the structure of the db object that Multi-DB returns:db.query(...) [Function]: Universal database query method that works on all supported databases.Arguments you can pass:query [String or Object]:When supplied a string as an argument, it will execute the query string against the default driver.When supplied an object as an argument, you can supply the following keys:default: A query string to execute against whichever database is the default.mariadb: A query string that will only execute against MariaDB databases.mysql: A query string that will only execute against MySQL databases.postgres: A query string that will only execute against PostgreSQL databases.pglite: A query string that will only execute against SQLite databases.sqlite: A query string that will only execute against SQLite databases.disableQuestionMarkParamsForPostgres: Set to true to prevent the query from attempting to normalize parameterized query placeholders from ? syntax to $1 $2 $3 etc syntax for PostgreSQL and PGlite queries.params [Array]: Optional array of parameters to supply values to the query.When supplied an array of strings, it will perform a normal query.When supplied an array of objects or an array of arrays, it will perform a transaction.next(db, result) [Function]: Optional callback function to execute when the query is finished.Arguments provided:db [String]: Which database the query was executed against.result [Object]: The resulting object from the query the database driver gives you.db.config [Object]: Object representing the config loaded.db.driver [Object]: The object the default database driver module returns in case you need to interact with it directly.db.drivers [Object]: Object collection of all the driver modules currently loaded.db.mariadb [Object]: MariaDB-specific APIs.driver [Object]: The object the mariadb module returns in case you need to interact with it directly.pool [Object]: The pool instance returned by mariadb's createPool method once instantiated.conn [Object]: The connection instance returned by the pool instance's getConnection method once instantiated.username [String]: Username of the current active connection, if a connection is active.database [String]: Which database the currently active connection is connected to, if a connection is active.query(queryString) [Function]: Function that takes a query string and executes it against the mariadb driver.db.mysql [Object]: MySQL-specific APIs.driver [Object]: The object the mysql2 module returns in case you need to interact with it directly.pool [Object]: The pool instance returned by mysql2's createPool method once instantiated.conn [Object]: The connection instance returned by the pool instance's getConnection method once instantiated.username [String]: Username of the current active connection, if a connection is active.database [String]: Which database the currently active connection is connected to, if a connection is active.query(queryString) [Function]: Function that takes a query string and executes it against the mysql2 driver.db.postgres [Object]: PostgreSQL-specific APIs.driver [Object]: The object the pg module returns in case you need to interact with it directly.pool [Object]: The instance of pg.Pool created by Multi-DB once instantiated.client [Object]: The instance of pg.Client created by Multi-DB once instantiated.username [String]: Username of the current active connection, if a connection is active.database [String]: Which database the currently active connection is connected to, if a connection is active.query(queryString) [Function]: Function that takes a query string and executes it against the pg driver.db.pglite [Object]: PGlite-specific APIs.driver [Object]: The object the @electric-sql/pglite module returns in case you need to interact with it directly.db [Object]: The database instance returned by @electric-sql/pglite's Database constructor once instantiated.query(queryString) [Function]: Function that takes a query string and executes it against the @electric-sql/pglite driver.db.sqlite [Object]: SQLite-specific APIs.driver [Object]: The object the better-sqlite3 module returns in case you need to interact with it directly.db [Object]: The database instance returned by better-sqlite3's Database constructor once instantiated.query(queryString) [Function]: Function that takes a query string and executes it against the better-sqlite3 driver."})
window.siteTexts.push({file: "docs/multi-db/1.0.2/usage/index.html", title: "Multi-DB — usage (1.0.2)", text: "InstallFirst mark your desired database drivers as dependencies in your app.List of currently-supported database drivers:mariadb for MariaDB.mysql2 for MySQL.pg for PostgreSQL.pglite for PGlite.better-sqlite3 for SQLite.Then mark the multi-db-driver npm package as a dependency in your app as well. Multi-DB is generally designed to work with the latest version of each supported database driver.Then you can configure Multi-DB and connect to your database.Connect to a database using Multi-DBconst db = await require('multi-db-driver')(config)If you do not supply a config object in the constructor, Multi-DB will attempt to load your config from a .multi-db-config.json file that should most commonly be placed in the root directory of your app.Multi-DB will look for that file in up to 3 directories above where the Multi-DB module is located (e.g. looking at parent directories starting with node_modules). You can change this behavior by setting the MULTI_DB_CONFIG_FILE_SEARCH_ATTEMPTS environment variable to a number other than 3. The default value of 3 will in most circumstances include the root directory of your app as one of the locations that will be searched for your Multi-DB config, which is why it's the default value.If you want to set a location for the config file manually, then set the MULTI_DB_CONFIG_LOCATION environment variable to the absolute path on your filesystem to where your config is.It is recommended that you add .multi-db-config.json to your .gitignore as well because it will typically contain database credentials.See \"Configuration\" for information about how to set up a Multi-DB config.Performing database queriesThe below examples show how to use Multi-DB to query your database(s) from the simplest usage to the most complex, demonstrating how this module focuses on adding complexity only when needed as a progressive enhancement atop simpler, more concise syntax.Example of one universal query that works with any database you set in your configconst simpleQuery = await db.query('select * from some_table')This usage is basically as concise as any standalone database driver would be, except it will work with any database that uses the same SQL syntax for this specific query and similar basic ones.Universal query but with parametersconst noNormalizingNeeded = await db.query('select * from some_table where something = ?', ['some value'])The second argument is optional if you don't need params.Universal query with parameters and a callback function for post-processingconst normalizedDataUniversalQuery = await db.query('select * from some_table where something = ?', ['some value'], function (db, result) {   switch (db) {     case 'mysql':       // do stuff if it was a mysql query       return result     default:       // do stuff if it was a query to any other kind of database       return result   } })The third argument is optional if you don't need a post-processing function.The post-processing function is useful if you need to call out specific post-processing behaviors for certain databases.Default query with special query for a specific databaseconst normalizedDataMultipleQueries = await db.query(  // queries object {   default: 'select * from some_table where something = ?',   mysql: 'some mysql-specific version of the query where something = ?' },  // values array ['some value'],  // postprocess function function (db, result) {   switch (db) {     case 'mysql':       // do stuff if it was a mysql query       return result     default:       // do stuff if it was any other kind of query       return result   } })This supplies an object instead of a string to the query argument.It also combines all the other above features too, showing a maximally featureful and flexible version of the query method.By default Multi-DB will rewrite the query under the hood to use $1 instead of ? for queries being executed against PostgreSQL and PGlite. You can disable this behavior by setting questionMarkParamsForPostgres to false in your Multi-DB config, or by setting disableQuestionMarkParamsForPostgres to true at the query level in the query object.CLI scriptsThis module also comes with a cli.js file to automate common database setup and teardown tasks. It will load your Multi-DB config and connect to the database using the adminConfig to perform these tasks.The cli.js file supports the following commands:cli.js --create: Creates the user and database specified in your config if it does not already exist.cli.js --destroy: Drops the user and database specified in your config.cli.js --file file.sql: Executes the SQL statements in the specified SQL file. Will attempt to do so using the regular less privileged config by default and will escalate to the admin config only if the less privileged config is unable to connect.cli.js --dump-schema path/to/schema.sql: Dumps the connected database's schema to specified SQL file path. Will create file in specified path if it does not already exist.cli.js --dump-data path/to/schema.sql: Dumps the connected database's schema and data to specified SQL file path. Will create file in specified path if it does not already exist.For the dump commands to work, you will need to ensure pg_dump, mysqldump, and sqlite3 are in your PATH.OptionsSkip the prompts with --yes.Suppress logs and warnings with --suppress-logs.Suppress errors with --suppress-errors.Enable verbose logging with --enable-verbose.Integrating the CLI scripts into your appIt is recommended that you create npm scripts in your app's package.json file to run those commands. Example usage of those scripts if you create them would look something like this:npm run create-db: Executes node [...]/cli.js --create.npm run destroy-db: Executes node [...]/cli.js --destroy.npm run db-file -- file.sql: Executes node [...]/cli.js --file file.sql.npm run db-schema-dump -- path/to/schema.sql: Executes node [...]/cli.js --dump-schema path/to/schema.sql.npm run db-data-dump -- path/to/schema.sql: Executes node [...]/cli.js --dump-data path/to/schema.sql.Replace the [...] part in the above examples with the path to where your copy of this module resides, e.g. in node_modules, lib, git_modules, or wherever it happens to be in your app."})
window.siteTexts.push({file: "docs/node-php-runner/1.1.0/changelog/index.html", title: "Node.js PHP runner — changelog (1.1.0)", text: "1.1.0Added run and runWithData methods so this module can be used as a general purpose PHP runner.Updated various dependencies.1.0.2Added TypeScript definitions.Various dependencies bumped.1.0.1Renamed package from express-php-view-engine to php. Thanks to Elmer Bulthuis for transferring the package name.Various dependencies bumped.1.0.0Initial version of superseding project.express-php-view-engine notably does not attempt to finish the work of the old php module. Instead it allows the native PHP parser to execute as a child process within Express applications.0.0.1Initial version of original project.Originally the php module on npm was used by a separate project that attempted to implement a PHP parser in JavaScript for Node.js, but was never finished. One work in progress version was published, then the project remained stale for 8 years."})
window.siteTexts.push({file: "docs/node-php-runner/1.1.0/configuration/index.html", title: "Node.js PHP runner — configuration (1.1.0)", text: "This module will register values from the data model you pass to the PHP script as global variables in your PHP script by default when you use PHP as an Express view engine or when you call runWithData. You can disable this behavior if desired in the following ways:Disable registering globally:const php = require('php') php.disableRegisterGlobalModel() // can be reenabled by calling php.enableRegisterGlobalModel()Disable registering on a per render basis in Express:app.get('/', (req, res) => {   res.render('index.php', {     _REGISTER_GLOBAL_MODEL: false,     hello: 'world'   }) })Disable registering on a per render basis in runWithData (though if you're doing this, you probably should just use php.run() instead, as that method was written to use simpler logic that doesn't support passing data to PHP):const output = await php.runWithData('some_php_script.php', {   _REGISTER_GLOBAL_MODEL: false,   hello: 'world' })"})
window.siteTexts.push({file: "docs/node-php-runner/1.1.0/usage/index.html", title: "Node.js PHP runner — usage (1.1.0)", text: "To use this module, you must have PHP installed and in your PATH.Run a PHP script in Node.jsconst php = require('php') const output = await php.run('some_php_script.php')Run a PHP script in Node.js and pass it dataconst php = require('php') const output = await php.runWithData('some_php_script.php', { hello: 'world' })Then, assuming your some_php_script.php file looks like this:<p><?=$hello?></p>The output will be:<p>world</p>Use with Expressconst express = require('express') const app = express() const php = require('php')  // setup PHP templating engine app.set('views', path.join(__dirname, 'templates')) app.set('view engine', 'php') // set PHP as a view engine in your Express app app.engine('php', php.__express)  // define a route app.get('/', (req, res) => {   res.render('index.php', {     hello: 'world'   }) })Then, assuming your templates/index.php looks like this:<p><?=$hello?></p>The output will be:<p>world</p>"})
window.siteTexts.push({file: "docs/progressively-enhance-web-components/1.0.4/changelog/index.html", title: "SSR web components — changelog (1.0.4)", text: "1.0.4Fixed a bug that would cause the module to crash if the file list provided by the user wasn't a directory.Updated various dependencies.1.0.3Fixed another bug that caused errors to print to the console if inline CSS existed in a scanned template.1.0.2Fixed a bug that could cause templates to be significantly altered by this preprocessor due to having been fully ingested by a DOM parser and then re-serialized back into a string. As of this version, only the custom elements that are progressively enhanced will be ingested by the DOM parser and re-serialized back into a string.Fixed a bug that caused errors to print to the console if inline CSS existed in a scanned template.Updated various dependencies.1.0.1Fixed a bug that prevented camelCase attribute names from replacing ${templateLiteral} values for values inmarkup.Updated various dependencies.1.0.0Initial commit."})
window.siteTexts.push({file: "docs/progressively-enhance-web-components/1.0.4/configuration/index.html", title: "SSR web components — configuration (1.0.4)", text: "When you call:const editedFiles = require('progressively-enhance-web-components')({   templatesDir: './mvc/views' })There are other params you can pass to it besides templatesDir.The full list of params available is:templatesDir [String]: What folder to examine. This is required.disableBeautify [Boolean]: If set to true, this module will not beautify the HTML in the outputted markup. Default: false.beautifyOptions [Object]: Options to pass to js-beautify. Default: { indent_size: 2 }."})
window.siteTexts.push({file: "docs/progressively-enhance-web-components/1.0.4/usage/index.html", title: "SSR web components — usage (1.0.4)", text: "We will demo this technique end-to-end using a <word-count> component that counts the number of words a user types into a <textarea>.Suppose the intended use of the <word-count> component looks like this:<word-count text=\"Once upon a time... \" id=\"story\">   <p slot=\"description\">Type your story in the box above!</p> </word-count>And suppose also that you have an Express application with templates loaded into mvc/views.To leverage this module's progressive enhancement technique, you will need to define this component using a <template> element in any one of your templates as follows:<template id=\"word-count\">   <style>     div {       position: relative;     }     textarea {       margin-top: 35px;       width: 100%;       box-sizing: border-box;     }     span {       display: block;       position: absolute;       top: 0;       right: 0;       margin-top: 10px;       font-weight: bold;     }   </style>   <div>     <textarea rows=\"10\" cols=\"50\" name=\"${id}\" id=\"${id}\">${text}</textarea>     <slot name=\"description\"></slot>     <span class=\"word-count\"></span>   </div> </template>Note: Any ${templateLiterals} present in the template markup will be replaced with attribute values from the custom element invocation. More on that below.Then, in your Express application:const fs = require('fs-extra')  // load progressively-enhance-web-components.js const editedFiles = require('progressively-enhance-web-components')({   templatesDir: './mvc/views' })  // copy unmodified templates to a modified templates directory fs.copySync('mvc/views', 'mvc/.preprocessed_views')  // update the relevant templates for (const file in editedFiles) {   fs.writeFileSync(file.replace('mvc/views', 'mvc/.preprocessed_views'), editedFiles[file]) }  // configure express const express = require('express') const app = express() app.engine('html', require('teddy').__express) // set teddy as view engine that will load html files app.set('views', 'mvc/.preprocessed_views') // set template dir app.set('view engine', 'html') // set teddy as default view engine  // start the server const port = 3000 app.listen(port, () => {   console.log(`🎧 express sample app server is running on http://localhost:${port}`) })Note: The above example uses the Teddy templating system, but you can use any templating system you like.In the above sample Express application, the mvc/views folder is copied to mvc/.preprocessed_views, then any template files in there will be updated to replace any uses of <word-count> with a more progressive enhancement-friendly version of <word-count> instead.So, for example, any web component in your templates that looks like this:<word-count text=\"Once upon a time... \" id=\"story\">   <p slot=\"description\">Type your story in the box above!</p> </word-count>Will be replaced with this:<word-count text=\"Once upon a time... \" id=\"story\">   <div>     <textarea rows=\"10\" cols=\"50\" name=\"story\" id=\"story\">Once upon a time... </textarea>     <span class=\"word-count\"></span>   </div>   <p slot=\"description\">Type your story in the box above!</p> </word-count>The fallback markup is derived from the <template> element and is inserted into the \"light DOM\" of the web component, so it will display to users with JavaScript disabled.Because the <template> element has ${templateLiteral} values for the name attribute, the id attribute, and the contents of the <textarea>, those values are prefilled properly on the fallback markup.Any tag in the <template> element that has a slot attribute will be moved to the top level of the fallback markup DOM because that is a requirement for the web component to work when JavaScript is enabled. That's why the <p> tag is not a child of the <div> in the replacement example like it is in the <template>. That is done intentionally by this module's preprocessing.Then, once the frontend JavaScript takes over, the web component can be progressively enhanced into the JS-driven version.Here's an example implementation for the frontend JS side:class WordCount extends window.HTMLElement {   connectedCallback () { // called whenever a new instance of this element is inserted into the dom     this.shadow = this.attachShadow({ mode: 'open' }) // create and attach a shadow dom to the custom element     this.shadow.appendChild(document.getElementById('word-count').content.cloneNode(true)) // create the elements in the shadow dom from the template element      // set textarea attributes     const textarea = this.shadow.querySelector('textarea')     textarea.value = this.getAttribute('text') || ''     textarea.id = this.getAttribute('id') || ''     textarea.name = this.getAttribute('id') || ''      // function for updating the word count     const updateWordCount = () => {       this.shadow.querySelector('span').textContent = `Words: ${textarea.value.trim().split(/\\s+/g).filter(a => a.trim().length > 0).length}`     }      // update count when textarea content changes     textarea.addEventListener('input', updateWordCount)     updateWordCount() // update it on load as well   } }  window.customElements.define('word-count', WordCount) // define the new elementOnce that JS executes, the \"light DOM\" fallback markup will be hidden and the JS-enabled version of the web component will take over and behave as normal.Sample appSee an end-to-end demo of this by running the sample app:cd sampleApps/expressnpm cicd ../../npm run express-sampleOr npm run sampleOr cd into sampleApps/express and run npm ci and npm startGo to http://localhost:3000The page with the web component is located at http://localhost:3000/pageWithForm"})
window.siteTexts.push({file: "docs/roosevelt-logger/1.0.1/changelog/index.html", title: "Roosevelt logger — changelog (1.0.1)", text: "1.0.1Fixed crash.1.0.0Refactored the code.Updated dependencies.0.2.3Dropped Node 10 and Node 12 supportUpdated various dependenciesMigrated colors to @colors/colorsMigrated from Travis to GitHub Actions0.2.2Fixed bug which caused whitespace at the end of a log to be removed.Better docs.CI improvements.Various dependencies bumped.0.2.1Fixed bug where disabling prefix would chop off more than the prefix.CI improvements.Various dependencies bumped.0.2.0Module fully refactored, including some breaking API changes, such as:Changed to class-based instantiation:Added enableLogger() and disableLogger() methods.Added enablePrefix() and disablePrefix() methods.Added createLogMethod() method.Other smaller changes to the API as well. See README.0.1.0Initial version."})
window.siteTexts.push({file: "docs/roosevelt-logger/1.0.1/configuration/index.html", title: "Roosevelt logger — configuration (1.0.1)", text: "ParamsThe following params can be passed when creating a new instance of roosevelt-logger:methods [Object]: A set of configs that represent logger methods that are available to use. Each config type that maps to a default log type can be set to either a boolean to enable / disable the log or an object:info [Boolean]: Enable regular logs. Default: true.warn [Boolean]: Enable logging of warnings. Default: true.verbose [Boolean]: Enable verbose (noisy) logging. Default: false.[custom log name] [Object]: You can also define your own log types and specify what native log type it maps to.API:enable [Boolean]: Enable this custom log. Default: true.type [String]: What type of native log this custom log maps to. Default: info.Allowed values: info, warn, or error.prefix: [String]: The string that prefixes any log entry. If not set or set to a falsy value (e.g. null, an empty string, etc), the prefix will be disabled.Default for warnings: ⚠️.Default for errors: ❌.color: [String]: The color that the text will be set to using @colors/colors npm package. If not set, it will use whatever the default color is for the native type selected.Custom type example:{   \"dbError\": {     \"type\": \"error\",     \"prefix\": \"🗄\",     \"color\": \"cyan\"   } }The above example would create a custom log type called dbError. It will log errors with a 🗄 prefix and cyan text color.params: Configuration that applies to all logger methods:disable [Array of Strings]: Disable all logging in certain environments. Each entry can be either an environment variable or the value of the NODE_ENV environment variable. Default: [].Example usage:['LOADED_MOCHA_OPTS']: Disables logger when app is being run by Mocha.['production']: Disables logger when NODE_ENV is set to production.enablePrefix [Boolean]: Enable prefixes which can contain emojis or other strings to be prepended to logs. This can also be toggled with the ROOSEVELT_LOGGER_ENABLE_PREFIX environment variable. Default: true.APIWhen you create an instance of roosevelt-logger, the following properties will be available on the logger instance:winston [Object]: The Winston module that roosevelt-logger uses internally.winstonInstance [Object]: The specific Winston object instance instantiated by roosevelt-logger.transports [Object]: The default Winston transports enabled by roosevelt-logger.enableLogging() [Function]: Enable the logger.disableLogging() [Function]: Disable the logger.enablePrefix() [Function]: Enable all log prefixes.disablePrefix() [Function]: Disable all log prefixes.createLogMethod(config) [Function]: Programmatically create a new logger method.config argument [Object]:name [String]: New logger method name.type [String]: What type of native log this custom log maps to.Default: info.Allowed values: info, warn, or error.prefix: [String]: The string that prefixes any log entry. If not set or set to a falsy value (e.g. null, an empty string, etc), the prefix will be disabled.Default for warnings: ⚠️.Default for errors: ❌.color: [String]: The color that the text will be set to using colors npm package. If not set, it will use whatever the default color is for the native type selected.Example createLogMethod usage:logger.createLogMethod({   name: 'dbError',   type: 'error'   prefix: '💥',   color: 'red' })  logger.dbError('Our whole stack is in crisis mode!') // => 💥 Our whole stack is in crisis mode!"})
window.siteTexts.push({file: "docs/roosevelt-logger/1.0.1/usage/index.html", title: "Roosevelt logger — usage (1.0.1)", text: "InstallFirst declare roosevelt-logger as a dependency in your app.Useconst Logger = require('roosevelt-logger') const logger = new Logger()  logger.log('some info') // => some info  logger.warn('a warning') // => ⚠️  a warning  logger.error('an error') // => ❌  an error  logger.verbose('noisy log only displayed when verbose is enabled') // =>  logger.log('✅', 'log prepended with a custom emoji or other string') // => ✅  log prepended with a custom emoji or other stringUse with custom configsconst Logger = require('roosevelt-logger') const logger = new Logger({   methods: {     verbose: true, // enables verbose logging     dbError: { // create custom error called dbError       type: 'error',       prefix: '🗄'     }   },   params: {     disable: ['LOADED_MOCHA_OPTS'] // disable logging during Mocha tests   } })  logger.log('some info') // => some info  logger.warn('a warning') // => ⚠️  a warning  logger.error('an error') // => ❌  an error  logger.verbose('noisy log only displayed when verbose is enabled') // => noisy log only displayed when verbose is enabled  logger.dbError('custom log for database errors') // => 🗄  custom log for database errorsSee \"Configuration\" for more info about how to configure roosevelt-logger."})
window.siteTexts.push({file: "docs/semantic-forms/5.0.10/changelog/index.html", title: "Semantic Forms — changelog (5.0.10)", text: "5.0.10Fixed bug causing active styles to apply to focused buttons.Updated dependencies.5.0.9Fixed bug causing native clear field to appear on search inputs.Updated dependencies.5.0.8Altered dark mode support so that it does not apply if the <html> or <body> tag has a class of \"light\".Updated dependencies.5.0.7Fixed a bug where the responsive grid layout would not always line up correctly.Fixed a bug that prevented text from being longer than input element, causing graphical errors.Updated dependencies.5.0.6Added slicker live demo docs.Fixed a bug causing dark mode not to respect OS preference.Updated dependencies.5.0.5Added better error handling to the JS.Updated dependencies.5.0.4Fixed a periodic JS error.5.0.3Fixed a bug that prevented semantic-forms from detecting when you inserted new forms into the page.Updated dependencies.5.0.2Fixed a bug that would cause errors when reinitialize() was called.Fixed a bug that caused nested selects to lose their dropdown icon.Fixed a bug where required single checkboxes would not show an asterisk.Added a help text icon beside labels with a title attribute on their respective inputs, or on labels for checkboxes and radios. Enabled with a data-show-help-icon attribute.Updated various dependencies.5.0.1Fixed a bug that caused some devDependencies to end up in the production build.Updated various dependencies.5.0.0Breaking: Added JS module bundling to make it possible for you to import CJS, ESM, or a standalone version of the JavaScript in this library to your project. However you will need to change your imports to match the new file names. See README for details.Added show/hide toggle to password fields which can be disabled with a data-no-reveal attribute.Added hover text for the clear field button and the show/hide password button.Added ability to customize clear field button hover text and show/hide password button hover text using data attributes as well.Added support for undo/redo keyboard commands when pressing the clear field.Added test suite.Fixed some accessibility issues.Updated various dependencies.4.0.4Fixed a bug that caused menu items with buttons to appear as a list.Updated various dependencies.4.0.3Fixed bug in which a form entry consisting of a single checkbox would be misaligned.Fixed bug that prevented some inputs from expanding to the width of its container.Fixed bug in which CSS reset for elements within a semantic forms form was overly aggressive, making it harder to style unrelated content within such a form.Updated various dependencies.4.0.2Fixed a visual bug that occurred when single checkbox elements had extra elements included.Updated various dependencies.4.0.1Added invalid help text support.Fixed a bug that caused float labels to break when certain browser extensions were enabled.4.0.0Breaking: Overhauled entire codebase to drive it using mostly CSS grid instead of flexbox. This makes everything more flexible overall and fit more designs better. However the CSS and markup changes will likely cause breaking changes to previous integrations, so when upgrading make some time to visually test all your pages to alter any CSS overrides you had in place accordingly. You also might want to make some markup changes to make use of new available classes to tweak the fit of individual form fields on specific forms.Altered fields to fit available space better at various screen sizes.Added multiple utility classes that define how wide inputs will span in the responsive layout.Added support for input type=image.Added support for secondary labels.Added styling for invalid form fields.Added asterisk that appears on required inputs.Improved accessibility considerably. Now has 100% Lighthouse score.Added feature to progressively nest fieldsets with progressively darker/lighter background colors.Fixed bug causing clear button appearing on disabled inputs.Fixed bug causing clear button to overlap with scrollbars on textareas.Fixed bug causing nested fieldset to have incorrect padding and margins.Fixed various other small bugs.Replaced the less CSS preprocessor with sass.Updated various dependencies.3.2.1Fixed a bug that could cause checkboxes and radio buttons to not submit their values to the server properly.Updated various dependencies.3.2.0Added a reinitialization method to re-scan existing forms. Called with window.semanticForms.reinitialize(formName).Altered logic to enhance forms so that it now ignores inputs that have already been enhanced.Updated dependencies.3.1.0Added dark mode support.Deprecated \"reset\" versions and \"no images\" versions.Added mutation observer that monitors changes to the DOM and will enhance any additional semanticForms forms you insert, but the monitoring may not be perfect. If you want to re-scan for new forms to enhance manually, you may still need to call window.semanticForms().Fixed a bug that caused DOM events to be duplicated when DOM elements are added dynamically after the first page load.Updated dependencies.3.0.8Fixed main export on case-sensitive file systems.Updated dependencies.3.0.7Fixed Chrome issue for forms with no placeholder.3.0.6Fixed missing files in npm package.3.0.5Added \"reset\" versions of the CSS files that set all: unset; before applying any semantic forms styles to help avoid conflicts with other CSS. There is a performance degradation to using this technique, so you should only use this if absolutely necessary.3.0.4Reduced size of select box text.3.0.3Fixed issue that prevented id selectors from allowing dots in the string.Fixed issue that prevented the clear field from dispatching an input event.3.0.2Added support for a single checkbox rather than a group of checkboxes.3.0.1Fixed alignment issue.3.0.0Removed default two column layout. Now defaults to as many columns as the container is wide.Added x2 class you can put on dd elements to double the width of a form. Does not apply on small screens.2.1.2Added a function to the JS files's global scope called semanticForms that you can call to initialize new forms that have been added to the DOM since the initial initialization.Updated dependencies.2.1.1Fixed a situation that could lead to a JS error.Fix minor alignment issue.2.1.0Added all input types.Fixed clear field.Fixed markup mistakes in the examples.Fixed CSS to support <menu> elements correctly.Refactored the JavaScript to modernize it.Updated dependencies.2.0.0Replaced <div class=\"buttonGroup\"> with a <menu> element. You will need to refactor your HTML accordingly.Fixed alignment issue caused by browser engines changing their alignment calculations since the first release.Various other refactoring.Pinned deps.Updated dependencies.1.0.5Restricted JS events to target elements within semanticForms class form elements.Switched font sizes to % in case someone finds 16px too small and changes the default font size in the browser, these form fields will no longer stay fixed.Published to npm.Started CHANGELOG.Updated dependencies.1.0.4 and belowHere be dragons…"})
window.siteTexts.push({file: "docs/semantic-forms/5.0.10/usage/index.html", title: "Semantic Forms — usage (5.0.10)", text: "Installnpm install semantic-formsThe package is distributed with the following builds available:dist/semantic-forms.cjs: CommonJS bundle: const semanticForms = require('semantic-forms')dist/semantic-forms.js: Standalone bundle that can be included via <script> tags. Declares a global variable called: semanticFormsdist/semantic-forms.min.js: Minified standalone bundle that can be included via <p> tags. Declares a global variable called: semanticFormsdist/semantic-forms.mjs: ES module: import semanticForms from 'semantic-forms'dist/semantic-forms.min.mjs: Minified ES module: import semanticForms from 'semantic-forms/min'UseInclude the dist/semantic-forms.css and whichever of the above versions of the JS file you prefer from this repo into your project.Then apply the semanticForms class to your <form> elements:<form class=\"semanticForms\">   <!-- your form here --> </form>Then apply the JavaScript enhancements:semanticForms()Then the CSS/JS enhancements to your forms will apply automatically, assuming the markup structure you use is one of the supported patterns.If you make changes to the DOM after Semantic Forms is activated and want to activate any additional semanticForms forms you insert, you can re-scan for new forms by calling semanticForms.reinitialize() again. If you only want to reinitialize one form instead of all of them, call semanticForms.reinitialize(formElement).FeaturesFloat label inputsThe float label input pattern is notoriously difficult to implement in a fashion that doesn't degrade HTML semantics or accessibility. This pattern library implements a solution that solves that problem. Your label doesn't need to be a sibling of your input like with other implementations. This implementation also has a custom clear button for each input.Example<form class=\"semanticForms\">   <dl>     <dt><label for=\"name\">Name</label></dt>     <dd><input id=\"name\" name=\"name\" type=\"text\" placeholder=\"e.g. John Smith\"></dd>   </dl> </form>NameOr with a <textarea><form class=\"semanticForms\">   <dl>     <dt><label for=\"textarea\">Textarea</label></dt>     <dd><textarea id=\"textarea\" name=\"textarea\" rows=\"5\" cols=\"50\" placeholder=\"e.g. Long string of text\"></textarea></dd>   </dl> </form>TextareaAdd help textInclude a label in the <dd> element with a matching for attribute to place help text beneath the input:<form class=\"semanticForms\" method=\"post\">   <dl>     <dt><label for=\"password\">Password</label></dt>     <dd>       <input id=\"password\" name=\"password\" type=\"password\" placeholder=\"Enter a password\" minlength=\"8\" required autocomplete=\"off\">       <label for=\"password\">Must be at least 8 characters long.</label>     </dd>   </dl> </form>Password Must be at least 8 characters long.Customizing input fieldsBy default, input fields will display an X icon to clear the text and password fields will also display a show/hide toggle for displaying the password in plain text. You can customize this behavior as follows:Customize the hover text of the clear field button by applying a data-clear-field-text=\"your text\" attribute to the input.Customize the hover text of the show password button by applying a data-show-password-text=\"your text\" attribute to the input.Customize the hover text of the hide password button by applying a data-hide-password-text=\"your text\" attribute to the input.Prevent the show/hide toggle from appearing on password fields by applying a data-no-reveal attribute to the input.Show a help text icon next to labels of inputs that contain a title attribute by applying a data-show-help-icon attribute to the label.Note that checkboxes and radios should have a title attribute on the label instead of the inputs.Responsive columnsThis feature makes it so the form fields will grow, shrink, expand the number of columns, or reduce the number of columns based on how much space exists in the container. You can customize it by applying various colspan-# classes to various elements in the form markup structure.Set number of columns for a group of formsYou can limit the number of columns on your forms using the colspan-# class on a <dl> element:<form class=\"semanticForms\">   <dl class=\"colspan-2\">     <dt><label for=\"input-a\">Input A</label></dt>     <dd><input type=\"text\" id=\"input-a\" name=\"input-a\"></dd>      <dt><label for=\"input-b\">Input B</label></dt>     <dd><input type=\"text\" id=\"input-b\" name=\"input-b\"></dd>      <!-- wraps to the next row -->     <dt><label for=\"input-c\">Input C</label></dt>     <dd><input type=\"text\" id=\"input-c\" name=\"input-c\"></dd>   </dl> </form>Input AInput BInput CYou can also apply the class to a <fieldset> which will apply that styling to all nested <dl> elements:<form class=\"semanticForms\">   <fieldset class=\"colspan-3\">     <!-- inherits 3 column class -->     <dl>       <dt><label for=\"f-ex-input-a\">Input A</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-a\" name=\"f-ex-input-a\"></dd>        <dt><label for=\"f-ex-input-b\">Input B</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-b\" name=\"f-ex-input-b\"></dd>        <dt><label for=\"f-ex-input-c\">Input C</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-c\" name=\"f-ex-input-c\"></dd>     </dl>      <!-- has 4 columns -->     <dl class=\"colspan-4\">       <dt><label for=\"f-ex-input-d\">Input D</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-d\" name=\"f-ex-input-d\"></dd>        <dt><label for=\"f-ex-input-e\">Input E</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-e\" name=\"f-ex-input-e\"></dd>        <dt><label for=\"f-ex-input-f\">Input F</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-f\" name=\"f-ex-input-f\"></dd>     </dl>   </fieldset> </form>Input AInput BInput CInput DInput EInput FSet number of columns a single input field takes upYou can specify the number of columns an input will span using the colspan-# class on the <dd> element. The inputs are responsive and will shrink according to available space. Available numbered classes are colspan-1 through colspan-5:<form class=\"semanticForms\">   <fieldset>     <dl>       <dt><label for=\"cspan-ex-input-a\">Input A</label></dt>       <!-- 1 column -->       <dd class=\"colspan-1\"><input type=\"text\" id=\"cspan-ex-input-a\" name=\"cspan-ex-input-a\"></dd>        <dt><label for=\"cspan-ex-input-b\">Input B</label></dt>       <!-- 2 columns  -->       <dd class=\"colspan-2\"><input type=\"text\" id=\"cspan-ex-input-b\" name=\"cspan-ex-input-b\"></dd>        <dt><label for=\"cspan-ex-input-c\">Input C</label></dt>       <!-- 5 columns (max) -->       <dd class=\"colspan-5\"><input type=\"text\" id=\"cspan-ex-input-c\" name=\"cspan-ex-input-c\"></dd>     </dl>   </fieldset> </form>Input AInput BInput Ccolspan-full can also be used to force an input to take up the entire width of a form:<form class=\"semanticForms\">   <fieldset>     <dl>       <dt><label for=\"cspanfull-ex-input-a\">Input A</label></dt>       <!-- this spans 2 columns on row 1 -->       <dd class=\"colspan-2\"><input type=\"text\" id=\"cspanfull-ex-input-a\" name=\"cspanfull-ex-input-a\"></dd>        <dt><label for=\"cspanfull-ex-input-b\">Input B</label></dt>       <!-- this spans the full width of row 2 -->       <dd class=\"colspan-full\"><input type=\"text\" id=\"cspanfull-ex-input-b\" name=\"cspanfull-ex-input-b\"></dd>        <!-- this spans 1 column on row 3 -->       <dt><label for=\"cspanfull-ex-input-c\">Input C</label></dt>       <dd><input type=\"text\" id=\"cspanfull-ex-input-c\" name=\"cspanfull-ex-input-c\"></dd>     </dl>   </fieldset> </form>Input AInput BInput CButton groupsYou can align buttons side-by-side, or in left/right/center groups.Non-grouped exampleNothing fancy here:<form class=\"semanticForms\" method=\"post\">   <button type=\"submit\" name=\"submit\">Non-grouped submit button</button>   <button type=\"submit\" name=\"submit\">Another one</button> </form>Non-grouped submit button Another oneButton groupsDriven by flexbox to intelligently align the buttons based on how many are in the group:<form class=\"semanticForms\" method=\"post\">   <!-- aligns left/right -->   <menu>     <li><button type=\"submit\" name=\"submit\">Button 1</button></li>     <li><button type=\"submit\" name=\"submit\">Button 2</button></li>   </menu>    <!-- aligns left/center/right -->   <menu>     <li><button type=\"submit\" name=\"submit\">Button 1</button></li>     <li><button type=\"submit\" name=\"submit\">Button 2</button></li>     <li><button type=\"submit\" name=\"submit\">Button 3</button></li>   </menu> </form>Button 1Button 2Button 1Button 2Button 3Checkboxes and radio buttonsCheckboxes and radio buttons need to follow the following markup structure:A single checkboxNot too different than other inputs:<form class=\"semanticForms\">   <dl>     <dt><label for=\"some_field_name\">Single checkbox</label></dt>     <dd><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name\"></dd>   </dl> </form>Single checkboxCheckbox group<form class=\"semanticForms\">   <dl>     <dt><label data-for=\"some_checkboxes\">Checkboxes:</label></dt>     <dd class=\"checkboxes\">       <ul id=\"some_checkboxes\">         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_one\"> <label for=\"some_field_name_checkboxes_one\">One</label></li>         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_two\"> <label for=\"some_field_name_checkboxes_two\">Two</label></li>         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_three\"> <label for=\"some_field_name_checkboxes_three\">Three</label></li>       </ul>     </dd>   </dl> </form>Checkboxes: One Two ThreeRadio buttons<form class=\"semanticForms\">   <dl>     <dt><label data-for=\"some_radios\">Radios:</label></dt>     <dd class=\"radios\">       <ul id=\"some_radios\">         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_one\"> <label for=\"some_field_name_radios_one\">One</label></li>         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_two\"> <label for=\"some_field_name_radios_two\">Two</label></li>         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_three\"> <label for=\"some_field_name_radios_three\">Three</label></li>       </ul>     </dd>   </dl> </form>Radios: One Two ThreeValidation stylesInputs with the required attribute will result in a visual indicator (*) being added to its label. You can disable this indicator with the data-no-asterisk attribute on the label element:<form class=\"semanticForms\">   <dl>     <dt><label for=\"input\" data-no-asterisk>Input label</label></dt>     <dd><input type=\"text\" name=\"input\" id=\"input\" required>   </dl> </form>Input labelYou can set a paragraph of text below a field to only appear when a field is invalid with the data-invalid-text attribute:<form class=\"semanticForms\" method=\"post\">   <dl>     <dt><label for=\"password_validation\">Password label</label></dt>     <dd>       <input type=\"password\" name=\"password\" id=\"password_validation\" minlength=\"8\" autocomplete=\"off\">       <p data-invalid-text>Password must be at least 8 characters long.</p>     </dd>   </dl> </form>Password labelPassword must be at least 8 characters long.You can adjust the tooltip text of the asterisk with the data-asterisk-text attribute:<form class=\"semanticForms\">   <dl>     <dt><label for=\"input_validation\" data-asterisk-text=\"This is a custom tooltip.\">Input label</label></dt>     <dd><input type=\"text\" name=\"input\" id=\"input_validation\" required>   </dl> </form>Input labelLight mode and dark modeLight mode and dark mode will be detected automatically based on operating system preference. To set it manually, you can apply an additional class of light or dark to your <form> elements to force the mode.Low flow (JavaScript disabled) modeThe low flow will be displayed if JS is disabled.You can also activate the low flow (JavaScript disabled) mode manually by adding the lowFlow class to your <form> element.The low-flow mode reverts the float label pattern to traditional labels and doesn't include other JS-exclusive enhancements, but preserves the other visual design enhancements driven purely by CSS.MoreSee a page demoing all features here."})
window.siteTexts.push({file: "docs/semantic-forms/5.0.7/changelog/index.html", title: "Semantic Forms — changelog (5.0.7)", text: "5.0.7Fixed a bug where the responsive grid layout would not always line up correctly.Fixed a bug that prevented text from being longer than input element, causing graphical errors.Updated dependencies.5.0.6Added slicker live demo docs.Fixed a bug causing dark mode not to respect OS preference.Updated dependencies.5.0.5Added better error handling to the JS.Updated dependencies.5.0.4Fixed a periodic JS error.5.0.3Fixed a bug that prevented semantic-forms from detecting when you inserted new forms into the page.Updated dependencies.5.0.2Fixed a bug that would cause errors when reinitialize() was called.Fixed a bug that caused nested selects to lose their dropdown icon.Fixed a bug where required single checkboxes would not show an asterisk.Added a help text icon beside labels with a title attribute on their respective inputs, or on labels for checkboxes and radios. Enabled with a data-show-help-icon attribute.Updated various dependencies.5.0.1Fixed a bug that caused some devDependencies to end up in the production build.Updated various dependencies.5.0.0Breaking: Added JS module bundling to make it possible for you to import CJS, ESM, or a standalone version of the JavaScript in this library to your project. However you will need to change your imports to match the new file names. See README for details.Added show/hide toggle to password fields which can be disabled with a data-no-reveal attribute.Added hover text for the clear field button and the show/hide password button.Added ability to customize clear field button hover text and show/hide password button hover text using data attributes as well.Added support for undo/redo keyboard commands when pressing the clear field.Added test suite.Fixed some accessibility issues.Updated various dependencies.4.0.4Fixed a bug that caused menu items with buttons to appear as a list.Updated various dependencies.4.0.3Fixed bug in which a form entry consisting of a single checkbox would be misaligned.Fixed bug that prevented some inputs from expanding to the width of its container.Fixed bug in which CSS reset for elements within a semantic forms form was overly aggressive, making it harder to style unrelated content within such a form.Updated various dependencies.4.0.2Fixed a visual bug that occurred when single checkbox elements had extra elements included.Updated various dependencies.4.0.1Added invalid help text support.Fixed a bug that caused float labels to break when certain browser extensions were enabled.4.0.0Breaking: Overhauled entire codebase to drive it using mostly CSS grid instead of flexbox. This makes everything more flexible overall and fit more designs better. However the CSS and markup changes will likely cause breaking changes to previous integrations, so when upgrading make some time to visually test all your pages to alter any CSS overrides you had in place accordingly. You also might want to make some markup changes to make use of new available classes to tweak the fit of individual form fields on specific forms.Altered fields to fit available space better at various screen sizes.Added multiple utility classes that define how wide inputs will span in the responsive layout.Added support for input type=image.Added support for secondary labels.Added styling for invalid form fields.Added asterisk that appears on required inputs.Improved accessibility considerably. Now has 100% Lighthouse score.Added feature to progressively nest fieldsets with progressively darker/lighter background colors.Fixed bug causing clear button appearing on disabled inputs.Fixed bug causing clear button to overlap with scrollbars on textareas.Fixed bug causing nested fieldset to have incorrect padding and margins.Fixed various other small bugs.Replaced the less CSS preprocessor with sass.Updated various dependencies.3.2.1Fixed a bug that could cause checkboxes and radio buttons to not submit their values to the server properly.Updated various dependencies.3.2.0Added a reinitialization method to re-scan existing forms. Called with window.semanticForms.reinitialize(formName).Altered logic to enhance forms so that it now ignores inputs that have already been enhanced.Updated dependencies.3.1.0Added dark mode support.Deprecated \"reset\" versions and \"no images\" versions.Added mutation observer that monitors changes to the DOM and will enhance any additional semanticForms forms you insert, but the monitoring may not be perfect. If you want to re-scan for new forms to enhance manually, you may still need to call window.semanticForms().Fixed a bug that caused DOM events to be duplicated when DOM elements are added dynamically after the first page load.Updated dependencies.3.0.8Fixed main export on case-sensitive file systems.Updated dependencies.3.0.7Fixed Chrome issue for forms with no placeholder.3.0.6Fixed missing files in npm package.3.0.5Added \"reset\" versions of the CSS files that set all: unset; before applying any semantic forms styles to help avoid conflicts with other CSS. There is a performance degradation to using this technique, so you should only use this if absolutely necessary.3.0.4Reduced size of select box text.3.0.3Fixed issue that prevented id selectors from allowing dots in the string.Fixed issue that prevented the clear field from dispatching an input event.3.0.2Added support for a single checkbox rather than a group of checkboxes.3.0.1Fixed alignment issue.3.0.0Removed default two column layout. Now defaults to as many columns as the container is wide.Added x2 class you can put on dd elements to double the width of a form. Does not apply on small screens.2.1.2Added a function to the JS files's global scope called semanticForms that you can call to initialize new forms that have been added to the DOM since the initial initialization.Updated dependencies.2.1.1Fixed a situation that could lead to a JS error.Fix minor alignment issue.2.1.0Added all input types.Fixed clear field.Fixed markup mistakes in the examples.Fixed CSS to support <menu> elements correctly.Refactored the JavaScript to modernize it.Updated dependencies.2.0.0Replaced <div class=\"buttonGroup\"> with a <menu> element. You will need to refactor your HTML accordingly.Fixed alignment issue caused by browser engines changing their alignment calculations since the first release.Various other refactoring.Pinned deps.Updated dependencies.1.0.5Restricted JS events to target elements within semanticForms class form elements.Switched font sizes to % in case someone finds 16px too small and changes the default font size in the browser, these form fields will no longer stay fixed.Published to npm.Started CHANGELOG.Updated dependencies.1.0.4 and belowHere be dragons…"})
window.siteTexts.push({file: "docs/semantic-forms/5.0.7/usage/index.html", title: "Semantic Forms — usage (5.0.7)", text: "Installnpm install semantic-formsThe package is distributed with the following builds available:dist/semantic-forms.cjs: CommonJS bundle: const semanticForms = require('semantic-forms')dist/semantic-forms.js: Standalone bundle that can be included via <script> tags. Declares a global variable called: semanticFormsdist/semantic-forms.min.js: Minified standalone bundle that can be included via <p> tags. Declares a global variable called: semanticFormsdist/semantic-forms.mjs: ES module: import semanticForms from 'semantic-forms'dist/semantic-forms.min.mjs: Minified ES module: import semanticForms from 'semantic-forms/min'UseInclude the dist/semantic-forms.css and whichever of the above versions of the JS file you prefer from this repo into your project.Then apply the semanticForms class to your <form> elements:<form class=\"semanticForms\">   <!-- your form here --> </form>Then apply the JavaScript enhancements:semanticForms()Then the CSS/JS enhancements to your forms will apply automatically, assuming the markup structure you use is one of the supported patterns.If you make changes to the DOM after Semantic Forms is activated and want to activate any additional semanticForms forms you insert, you can re-scan for new forms by calling semanticForms.reinitialize() again. If you only want to reinitialize one form instead of all of them, call semanticForms.reinitialize(formElement).FeaturesFloat label inputsThe float label input pattern is notoriously difficult to implement in a fashion that doesn't degrade HTML semantics or accessibility. This pattern library implements a solution that solves that problem. Your label doesn't need to be a sibling of your input like with other implementations. This implementation also has a custom clear button for each input.Example<form class=\"semanticForms\">   <dl>     <dt><label for=\"name\">Name</label></dt>     <dd><input id=\"name\" name=\"name\" type=\"text\" placeholder=\"e.g. John Smith\"></dd>   </dl> </form>NameOr with a <textarea><form class=\"semanticForms\">   <dl>     <dt><label for=\"textarea\">Textarea</label></dt>     <dd><textarea id=\"textarea\" name=\"textarea\" rows=\"5\" cols=\"50\" placeholder=\"e.g. Long string of text\"></textarea></dd>   </dl> </form>TextareaAdd help textInclude a label in the <dd> element with a matching for attribute to place help text beneath the input:<form class=\"semanticForms\">   <dl>     <dt><label for=\"password\">Password</label></dt>     <dd>       <input id=\"password\" name=\"password\" type=\"password\" placeholder=\"Enter a password\" minlength=\"8\" required>       <label for=\"password\">Must be at least 8 characters long.</label>     </dd>   </dl> </form>Password Must be at least 8 characters long.Customizing input fieldsBy default, input fields will display an X icon to clear the text and password fields will also display a show/hide toggle for displaying the password in plain text. You can customize this behavior as follows:Customize the hover text of the clear field button by applying a data-clear-field-text=\"your text\" attribute to the input.Customize the hover text of the show password button by applying a data-show-password-text=\"your text\" attribute to the input.Customize the hover text of the hide password button by applying a data-hide-password-text=\"your text\" attribute to the input.Prevent the show/hide toggle from appearing on password fields by applying a data-no-reveal attribute to the input.Show a help text icon next to labels of inputs that contain a title attribute by applying a data-show-help-icon attribute to the label.Note that checkboxes and radios should have a title attribute on the label instead of the inputs.Responsive columnsThis feature makes it so the form fields will grow, shrink, expand the number of columns, or reduce the number of columns based on how much space exists in the container. You can customize it by applying various colspan-# classes to various elements in the form markup structure.Set number of columns for a group of formsYou can limit the number of columns on your forms using the colspan-# class on a <dl> element:<form class=\"semanticForms\">   <dl class=\"colspan-2\">     <dt><label for=\"input-a\">Input A</label></dt>     <dd><input type=\"text\" id=\"input-a\" name=\"input-a\"></dd>      <dt><label for=\"input-b\">Input B</label></dt>     <dd><input type=\"text\" id=\"input-b\" name=\"input-b\"></dd>      <!-- wraps to the next row -->     <dt><label for=\"input-c\">Input C</label></dt>     <dd><input type=\"text\" id=\"input-c\" name=\"input-c\"></dd>   </dl> </form>Input AInput BInput CYou can also apply the class to a <fieldset> which will apply that styling to all nested <dl> elements:<form class=\"semanticForms\">   <fieldset class=\"colspan-3\">     <!-- inherits 3 column class -->     <dl>       <dt><label for=\"f-ex-input-a\">Input A</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-a\" name=\"f-ex-input-a\"></dd>        <dt><label for=\"f-ex-input-b\">Input B</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-b\" name=\"f-ex-input-b\"></dd>        <dt><label for=\"f-ex-input-c\">Input C</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-c\" name=\"f-ex-input-c\"></dd>     </dl>      <!-- has 4 columns -->     <dl class=\"colspan-4\">       <dt><label for=\"f-ex-input-d\">Input D</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-d\" name=\"f-ex-input-d\"></dd>        <dt><label for=\"f-ex-input-e\">Input E</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-e\" name=\"f-ex-input-e\"></dd>        <dt><label for=\"f-ex-input-f\">Input F</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-f\" name=\"f-ex-input-f\"></dd>     </dl>   </fieldset> </form>Input AInput BInput CInput DInput EInput FSet number of columns a single input field takes upYou can specify the number of columns an input will span using the colspan-# class on the <dd> element. The inputs are responsive and will shrink according to available space. Available numbered classes are colspan-1 through colspan-5:<form class=\"semanticForms\">   <fieldset>     <dl>       <dt><label for=\"cspan-ex-input-a\">Input A</label></dt>       <!-- 1 column -->       <dd class=\"colspan-1\"><input type=\"text\" id=\"cspan-ex-input-a\" name=\"cspan-ex-input-a\"></dd>        <dt><label for=\"cspan-ex-input-b\">Input B</label></dt>       <!-- 2 columns  -->       <dd class=\"colspan-2\"><input type=\"text\" id=\"cspan-ex-input-b\" name=\"cspan-ex-input-b\"></dd>        <dt><label for=\"cspan-ex-input-c\">Input C</label></dt>       <!-- 5 columns (max) -->       <dd class=\"colspan-5\"><input type=\"text\" id=\"cspan-ex-input-c\" name=\"cspan-ex-input-c\"></dd>     </dl>   </fieldset> </form>Input AInput BInput Ccolspan-full can also be used to force an input to take up the entire width of a form:<form class=\"semanticForms\">   <fieldset>     <dl>       <dt><label for=\"cspanfull-ex-input-a\">Input A</label></dt>       <!-- this spans 2 columns on row 1 -->       <dd class=\"colspan-2\"><input type=\"text\" id=\"cspanfull-ex-input-a\" name=\"cspanfull-ex-input-a\"></dd>        <dt><label for=\"cspanfull-ex-input-b\">Input B</label></dt>       <!-- this spans the full width of row 2 -->       <dd class=\"colspan-full\"><input type=\"text\" id=\"cspanfull-ex-input-b\" name=\"cspanfull-ex-input-b\"></dd>        <!-- this spans 1 column on row 3 -->       <dt><label for=\"cspanfull-ex-input-c\">Input C</label></dt>       <dd><input type=\"text\" id=\"cspanfull-ex-input-c\" name=\"cspanfull-ex-input-c\"></dd>     </dl>   </fieldset> </form>Input AInput BInput CButton groupsYou can align buttons side-by-side, or in left/right/center groups.Non-grouped exampleNothing fancy here:<form class=\"semanticForms\">   <button type=\"submit\" name=\"submit\">Non-grouped submit button</button>   <button type=\"submit\" name=\"submit\">Another one</button> </form>Non-grouped submit button Another oneButton groupsDriven by flexbox to intelligently align the buttons based on how many are in the group:<form class=\"semanticForms\">   <!-- aligns left/right -->   <menu>     <li><button type=\"submit\" name=\"submit\">Button 1</button></li>     <li><button type=\"submit\" name=\"submit\">Button 2</button></li>   </menu>    <!-- aligns left/center/right -->   <menu>     <li><button type=\"submit\" name=\"submit\">Button 1</button></li>     <li><button type=\"submit\" name=\"submit\">Button 2</button></li>     <li><button type=\"submit\" name=\"submit\">Button 3</button></li>   </menu> </form>Button 1Button 2Button 1Button 2Button 3Checkboxes and radio buttonsCheckboxes and radio buttons need to follow the following markup structure:A single checkboxNot too different than other inputs:<form class=\"semanticForms\">   <dl>     <dt><label for=\"some_field_name\">Single checkbox</label></dt>     <dd><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name\"></dd>   </dl> </form>Single checkboxCheckbox group<form class=\"semanticForms\">   <dl>     <dt><label data-for=\"some_checkboxes\">Checkboxes:</label></dt>     <dd class=\"checkboxes\">       <ul id=\"some_checkboxes\">         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_one\"> <label for=\"some_field_name_checkboxes_one\">One</label></li>         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_two\"> <label for=\"some_field_name_checkboxes_two\">Two</label></li>         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_three\"> <label for=\"some_field_name_checkboxes_three\">Three</label></li>       </ul>     </dd>   </dl> </form>Checkboxes: One Two ThreeRadio buttons<form class=\"semanticForms\">   <dl>     <dt><label data-for=\"some_radios\">Radios:</label></dt>     <dd class=\"radios\">       <ul id=\"some_radios\">         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_one\"> <label for=\"some_field_name_radios_one\">One</label></li>         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_two\"> <label for=\"some_field_name_radios_two\">Two</label></li>         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_three\"> <label for=\"some_field_name_radios_three\">Three</label></li>       </ul>     </dd>   </dl> </form>Radios: One Two ThreeValidation stylesInputs with the required attribute will result in a visual indicator (*) being added to its label. You can disable this indicator with the data-no-asterisk attribute on the label element:<form class=\"semanticForms\">   <dl>     <dt><label for=\"input\" data-no-asterisk>Input label</label></dt>     <dd><input type=\"text\" name=\"input\" id=\"input\" required>   </dl> </form>Input labelYou can set a paragraph of text below a field to only appear when a field is invalid with the data-invalid-text attribute:<form class=\"semanticForms\">   <dl>     <dt><label for=\"password_validation\">Password label</label></dt>     <dd>       <input type=\"password\" name=\"password\" id=\"password_validation\" minlength=\"8\">       <p data-invalid-text>Password must be at least 8 characters long.</p>     </dd>   </dl> </form>Password labelPassword must be at least 8 characters long.You can adjust the tooltip text of the asterisk with the data-asterisk-text attribute:<form class=\"semanticForms\">   <dl>     <dt><label for=\"input_validation\" data-asterisk-text=\"This is a custom tooltip.\">Input label</label></dt>     <dd><input type=\"text\" name=\"input\" id=\"input_validation\" required>   </dl> </form>Input labelLight mode and dark modeLight mode and dark mode will be detected automatically based on operating system preference. To set it manually, you can apply an additional class of light or dark to your <form> elements to force the mode.Low flow (JavaScript disabled) modeThe low flow will be displayed if JS is disabled.You can also activate the low flow (JavaScript disabled) mode manually by adding the lowFlow class to your <form> element.The low-flow mode reverts the float label pattern to traditional labels and doesn't include other JS-exclusive enhancements, but preserves the other visual design enhancements driven purely by CSS.MoreSee a page demoing all features here."})
window.siteTexts.push({file: "docs/semantic-forms/5.0.8/changelog/index.html", title: "Semantic Forms — changelog (5.0.8)", text: "5.0.8Altered dark mode support so that it does not apply if the <html> or <body> tag has a class of \"light\".Updated dependencies.5.0.7Fixed a bug where the responsive grid layout would not always line up correctly.Fixed a bug that prevented text from being longer than input element, causing graphical errors.Updated dependencies.5.0.6Added slicker live demo docs.Fixed a bug causing dark mode not to respect OS preference.Updated dependencies.5.0.5Added better error handling to the JS.Updated dependencies.5.0.4Fixed a periodic JS error.5.0.3Fixed a bug that prevented semantic-forms from detecting when you inserted new forms into the page.Updated dependencies.5.0.2Fixed a bug that would cause errors when reinitialize() was called.Fixed a bug that caused nested selects to lose their dropdown icon.Fixed a bug where required single checkboxes would not show an asterisk.Added a help text icon beside labels with a title attribute on their respective inputs, or on labels for checkboxes and radios. Enabled with a data-show-help-icon attribute.Updated various dependencies.5.0.1Fixed a bug that caused some devDependencies to end up in the production build.Updated various dependencies.5.0.0Breaking: Added JS module bundling to make it possible for you to import CJS, ESM, or a standalone version of the JavaScript in this library to your project. However you will need to change your imports to match the new file names. See README for details.Added show/hide toggle to password fields which can be disabled with a data-no-reveal attribute.Added hover text for the clear field button and the show/hide password button.Added ability to customize clear field button hover text and show/hide password button hover text using data attributes as well.Added support for undo/redo keyboard commands when pressing the clear field.Added test suite.Fixed some accessibility issues.Updated various dependencies.4.0.4Fixed a bug that caused menu items with buttons to appear as a list.Updated various dependencies.4.0.3Fixed bug in which a form entry consisting of a single checkbox would be misaligned.Fixed bug that prevented some inputs from expanding to the width of its container.Fixed bug in which CSS reset for elements within a semantic forms form was overly aggressive, making it harder to style unrelated content within such a form.Updated various dependencies.4.0.2Fixed a visual bug that occurred when single checkbox elements had extra elements included.Updated various dependencies.4.0.1Added invalid help text support.Fixed a bug that caused float labels to break when certain browser extensions were enabled.4.0.0Breaking: Overhauled entire codebase to drive it using mostly CSS grid instead of flexbox. This makes everything more flexible overall and fit more designs better. However the CSS and markup changes will likely cause breaking changes to previous integrations, so when upgrading make some time to visually test all your pages to alter any CSS overrides you had in place accordingly. You also might want to make some markup changes to make use of new available classes to tweak the fit of individual form fields on specific forms.Altered fields to fit available space better at various screen sizes.Added multiple utility classes that define how wide inputs will span in the responsive layout.Added support for input type=image.Added support for secondary labels.Added styling for invalid form fields.Added asterisk that appears on required inputs.Improved accessibility considerably. Now has 100% Lighthouse score.Added feature to progressively nest fieldsets with progressively darker/lighter background colors.Fixed bug causing clear button appearing on disabled inputs.Fixed bug causing clear button to overlap with scrollbars on textareas.Fixed bug causing nested fieldset to have incorrect padding and margins.Fixed various other small bugs.Replaced the less CSS preprocessor with sass.Updated various dependencies.3.2.1Fixed a bug that could cause checkboxes and radio buttons to not submit their values to the server properly.Updated various dependencies.3.2.0Added a reinitialization method to re-scan existing forms. Called with window.semanticForms.reinitialize(formName).Altered logic to enhance forms so that it now ignores inputs that have already been enhanced.Updated dependencies.3.1.0Added dark mode support.Deprecated \"reset\" versions and \"no images\" versions.Added mutation observer that monitors changes to the DOM and will enhance any additional semanticForms forms you insert, but the monitoring may not be perfect. If you want to re-scan for new forms to enhance manually, you may still need to call window.semanticForms().Fixed a bug that caused DOM events to be duplicated when DOM elements are added dynamically after the first page load.Updated dependencies.3.0.8Fixed main export on case-sensitive file systems.Updated dependencies.3.0.7Fixed Chrome issue for forms with no placeholder.3.0.6Fixed missing files in npm package.3.0.5Added \"reset\" versions of the CSS files that set all: unset; before applying any semantic forms styles to help avoid conflicts with other CSS. There is a performance degradation to using this technique, so you should only use this if absolutely necessary.3.0.4Reduced size of select box text.3.0.3Fixed issue that prevented id selectors from allowing dots in the string.Fixed issue that prevented the clear field from dispatching an input event.3.0.2Added support for a single checkbox rather than a group of checkboxes.3.0.1Fixed alignment issue.3.0.0Removed default two column layout. Now defaults to as many columns as the container is wide.Added x2 class you can put on dd elements to double the width of a form. Does not apply on small screens.2.1.2Added a function to the JS files's global scope called semanticForms that you can call to initialize new forms that have been added to the DOM since the initial initialization.Updated dependencies.2.1.1Fixed a situation that could lead to a JS error.Fix minor alignment issue.2.1.0Added all input types.Fixed clear field.Fixed markup mistakes in the examples.Fixed CSS to support <menu> elements correctly.Refactored the JavaScript to modernize it.Updated dependencies.2.0.0Replaced <div class=\"buttonGroup\"> with a <menu> element. You will need to refactor your HTML accordingly.Fixed alignment issue caused by browser engines changing their alignment calculations since the first release.Various other refactoring.Pinned deps.Updated dependencies.1.0.5Restricted JS events to target elements within semanticForms class form elements.Switched font sizes to % in case someone finds 16px too small and changes the default font size in the browser, these form fields will no longer stay fixed.Published to npm.Started CHANGELOG.Updated dependencies.1.0.4 and belowHere be dragons…"})
window.siteTexts.push({file: "docs/semantic-forms/5.0.8/usage/index.html", title: "Semantic Forms — usage (5.0.8)", text: "Installnpm install semantic-formsThe package is distributed with the following builds available:dist/semantic-forms.cjs: CommonJS bundle: const semanticForms = require('semantic-forms')dist/semantic-forms.js: Standalone bundle that can be included via <script> tags. Declares a global variable called: semanticFormsdist/semantic-forms.min.js: Minified standalone bundle that can be included via <p> tags. Declares a global variable called: semanticFormsdist/semantic-forms.mjs: ES module: import semanticForms from 'semantic-forms'dist/semantic-forms.min.mjs: Minified ES module: import semanticForms from 'semantic-forms/min'UseInclude the dist/semantic-forms.css and whichever of the above versions of the JS file you prefer from this repo into your project.Then apply the semanticForms class to your <form> elements:<form class=\"semanticForms\">   <!-- your form here --> </form>Then apply the JavaScript enhancements:semanticForms()Then the CSS/JS enhancements to your forms will apply automatically, assuming the markup structure you use is one of the supported patterns.If you make changes to the DOM after Semantic Forms is activated and want to activate any additional semanticForms forms you insert, you can re-scan for new forms by calling semanticForms.reinitialize() again. If you only want to reinitialize one form instead of all of them, call semanticForms.reinitialize(formElement).FeaturesFloat label inputsThe float label input pattern is notoriously difficult to implement in a fashion that doesn't degrade HTML semantics or accessibility. This pattern library implements a solution that solves that problem. Your label doesn't need to be a sibling of your input like with other implementations. This implementation also has a custom clear button for each input.Example<form class=\"semanticForms\">   <dl>     <dt><label for=\"name\">Name</label></dt>     <dd><input id=\"name\" name=\"name\" type=\"text\" placeholder=\"e.g. John Smith\"></dd>   </dl> </form>NameOr with a <textarea><form class=\"semanticForms\">   <dl>     <dt><label for=\"textarea\">Textarea</label></dt>     <dd><textarea id=\"textarea\" name=\"textarea\" rows=\"5\" cols=\"50\" placeholder=\"e.g. Long string of text\"></textarea></dd>   </dl> </form>TextareaAdd help textInclude a label in the <dd> element with a matching for attribute to place help text beneath the input:<form class=\"semanticForms\">   <dl>     <dt><label for=\"password\">Password</label></dt>     <dd>       <input id=\"password\" name=\"password\" type=\"password\" placeholder=\"Enter a password\" minlength=\"8\" required>       <label for=\"password\">Must be at least 8 characters long.</label>     </dd>   </dl> </form>Password Must be at least 8 characters long.Customizing input fieldsBy default, input fields will display an X icon to clear the text and password fields will also display a show/hide toggle for displaying the password in plain text. You can customize this behavior as follows:Customize the hover text of the clear field button by applying a data-clear-field-text=\"your text\" attribute to the input.Customize the hover text of the show password button by applying a data-show-password-text=\"your text\" attribute to the input.Customize the hover text of the hide password button by applying a data-hide-password-text=\"your text\" attribute to the input.Prevent the show/hide toggle from appearing on password fields by applying a data-no-reveal attribute to the input.Show a help text icon next to labels of inputs that contain a title attribute by applying a data-show-help-icon attribute to the label.Note that checkboxes and radios should have a title attribute on the label instead of the inputs.Responsive columnsThis feature makes it so the form fields will grow, shrink, expand the number of columns, or reduce the number of columns based on how much space exists in the container. You can customize it by applying various colspan-# classes to various elements in the form markup structure.Set number of columns for a group of formsYou can limit the number of columns on your forms using the colspan-# class on a <dl> element:<form class=\"semanticForms\">   <dl class=\"colspan-2\">     <dt><label for=\"input-a\">Input A</label></dt>     <dd><input type=\"text\" id=\"input-a\" name=\"input-a\"></dd>      <dt><label for=\"input-b\">Input B</label></dt>     <dd><input type=\"text\" id=\"input-b\" name=\"input-b\"></dd>      <!-- wraps to the next row -->     <dt><label for=\"input-c\">Input C</label></dt>     <dd><input type=\"text\" id=\"input-c\" name=\"input-c\"></dd>   </dl> </form>Input AInput BInput CYou can also apply the class to a <fieldset> which will apply that styling to all nested <dl> elements:<form class=\"semanticForms\">   <fieldset class=\"colspan-3\">     <!-- inherits 3 column class -->     <dl>       <dt><label for=\"f-ex-input-a\">Input A</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-a\" name=\"f-ex-input-a\"></dd>        <dt><label for=\"f-ex-input-b\">Input B</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-b\" name=\"f-ex-input-b\"></dd>        <dt><label for=\"f-ex-input-c\">Input C</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-c\" name=\"f-ex-input-c\"></dd>     </dl>      <!-- has 4 columns -->     <dl class=\"colspan-4\">       <dt><label for=\"f-ex-input-d\">Input D</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-d\" name=\"f-ex-input-d\"></dd>        <dt><label for=\"f-ex-input-e\">Input E</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-e\" name=\"f-ex-input-e\"></dd>        <dt><label for=\"f-ex-input-f\">Input F</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-f\" name=\"f-ex-input-f\"></dd>     </dl>   </fieldset> </form>Input AInput BInput CInput DInput EInput FSet number of columns a single input field takes upYou can specify the number of columns an input will span using the colspan-# class on the <dd> element. The inputs are responsive and will shrink according to available space. Available numbered classes are colspan-1 through colspan-5:<form class=\"semanticForms\">   <fieldset>     <dl>       <dt><label for=\"cspan-ex-input-a\">Input A</label></dt>       <!-- 1 column -->       <dd class=\"colspan-1\"><input type=\"text\" id=\"cspan-ex-input-a\" name=\"cspan-ex-input-a\"></dd>        <dt><label for=\"cspan-ex-input-b\">Input B</label></dt>       <!-- 2 columns  -->       <dd class=\"colspan-2\"><input type=\"text\" id=\"cspan-ex-input-b\" name=\"cspan-ex-input-b\"></dd>        <dt><label for=\"cspan-ex-input-c\">Input C</label></dt>       <!-- 5 columns (max) -->       <dd class=\"colspan-5\"><input type=\"text\" id=\"cspan-ex-input-c\" name=\"cspan-ex-input-c\"></dd>     </dl>   </fieldset> </form>Input AInput BInput Ccolspan-full can also be used to force an input to take up the entire width of a form:<form class=\"semanticForms\">   <fieldset>     <dl>       <dt><label for=\"cspanfull-ex-input-a\">Input A</label></dt>       <!-- this spans 2 columns on row 1 -->       <dd class=\"colspan-2\"><input type=\"text\" id=\"cspanfull-ex-input-a\" name=\"cspanfull-ex-input-a\"></dd>        <dt><label for=\"cspanfull-ex-input-b\">Input B</label></dt>       <!-- this spans the full width of row 2 -->       <dd class=\"colspan-full\"><input type=\"text\" id=\"cspanfull-ex-input-b\" name=\"cspanfull-ex-input-b\"></dd>        <!-- this spans 1 column on row 3 -->       <dt><label for=\"cspanfull-ex-input-c\">Input C</label></dt>       <dd><input type=\"text\" id=\"cspanfull-ex-input-c\" name=\"cspanfull-ex-input-c\"></dd>     </dl>   </fieldset> </form>Input AInput BInput CButton groupsYou can align buttons side-by-side, or in left/right/center groups.Non-grouped exampleNothing fancy here:<form class=\"semanticForms\">   <button type=\"submit\" name=\"submit\">Non-grouped submit button</button>   <button type=\"submit\" name=\"submit\">Another one</button> </form>Non-grouped submit button Another oneButton groupsDriven by flexbox to intelligently align the buttons based on how many are in the group:<form class=\"semanticForms\">   <!-- aligns left/right -->   <menu>     <li><button type=\"submit\" name=\"submit\">Button 1</button></li>     <li><button type=\"submit\" name=\"submit\">Button 2</button></li>   </menu>    <!-- aligns left/center/right -->   <menu>     <li><button type=\"submit\" name=\"submit\">Button 1</button></li>     <li><button type=\"submit\" name=\"submit\">Button 2</button></li>     <li><button type=\"submit\" name=\"submit\">Button 3</button></li>   </menu> </form>Button 1Button 2Button 1Button 2Button 3Checkboxes and radio buttonsCheckboxes and radio buttons need to follow the following markup structure:A single checkboxNot too different than other inputs:<form class=\"semanticForms\">   <dl>     <dt><label for=\"some_field_name\">Single checkbox</label></dt>     <dd><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name\"></dd>   </dl> </form>Single checkboxCheckbox group<form class=\"semanticForms\">   <dl>     <dt><label data-for=\"some_checkboxes\">Checkboxes:</label></dt>     <dd class=\"checkboxes\">       <ul id=\"some_checkboxes\">         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_one\"> <label for=\"some_field_name_checkboxes_one\">One</label></li>         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_two\"> <label for=\"some_field_name_checkboxes_two\">Two</label></li>         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_three\"> <label for=\"some_field_name_checkboxes_three\">Three</label></li>       </ul>     </dd>   </dl> </form>Checkboxes: One Two ThreeRadio buttons<form class=\"semanticForms\">   <dl>     <dt><label data-for=\"some_radios\">Radios:</label></dt>     <dd class=\"radios\">       <ul id=\"some_radios\">         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_one\"> <label for=\"some_field_name_radios_one\">One</label></li>         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_two\"> <label for=\"some_field_name_radios_two\">Two</label></li>         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_three\"> <label for=\"some_field_name_radios_three\">Three</label></li>       </ul>     </dd>   </dl> </form>Radios: One Two ThreeValidation stylesInputs with the required attribute will result in a visual indicator (*) being added to its label. You can disable this indicator with the data-no-asterisk attribute on the label element:<form class=\"semanticForms\">   <dl>     <dt><label for=\"input\" data-no-asterisk>Input label</label></dt>     <dd><input type=\"text\" name=\"input\" id=\"input\" required>   </dl> </form>Input labelYou can set a paragraph of text below a field to only appear when a field is invalid with the data-invalid-text attribute:<form class=\"semanticForms\">   <dl>     <dt><label for=\"password_validation\">Password label</label></dt>     <dd>       <input type=\"password\" name=\"password\" id=\"password_validation\" minlength=\"8\">       <p data-invalid-text>Password must be at least 8 characters long.</p>     </dd>   </dl> </form>Password labelPassword must be at least 8 characters long.You can adjust the tooltip text of the asterisk with the data-asterisk-text attribute:<form class=\"semanticForms\">   <dl>     <dt><label for=\"input_validation\" data-asterisk-text=\"This is a custom tooltip.\">Input label</label></dt>     <dd><input type=\"text\" name=\"input\" id=\"input_validation\" required>   </dl> </form>Input labelLight mode and dark modeLight mode and dark mode will be detected automatically based on operating system preference. To set it manually, you can apply an additional class of light or dark to your <form> elements to force the mode.Low flow (JavaScript disabled) modeThe low flow will be displayed if JS is disabled.You can also activate the low flow (JavaScript disabled) mode manually by adding the lowFlow class to your <form> element.The low-flow mode reverts the float label pattern to traditional labels and doesn't include other JS-exclusive enhancements, but preserves the other visual design enhancements driven purely by CSS.MoreSee a page demoing all features here."})
window.siteTexts.push({file: "docs/semantic-forms/5.0.9/changelog/index.html", title: "Semantic Forms — changelog (5.0.9)", text: "5.0.9Fixed bug causing native clear field to appear on search inputs.Updated dependencies.5.0.8Altered dark mode support so that it does not apply if the <html> or <body> tag has a class of \"light\".Updated dependencies.5.0.7Fixed a bug where the responsive grid layout would not always line up correctly.Fixed a bug that prevented text from being longer than input element, causing graphical errors.Updated dependencies.5.0.6Added slicker live demo docs.Fixed a bug causing dark mode not to respect OS preference.Updated dependencies.5.0.5Added better error handling to the JS.Updated dependencies.5.0.4Fixed a periodic JS error.5.0.3Fixed a bug that prevented semantic-forms from detecting when you inserted new forms into the page.Updated dependencies.5.0.2Fixed a bug that would cause errors when reinitialize() was called.Fixed a bug that caused nested selects to lose their dropdown icon.Fixed a bug where required single checkboxes would not show an asterisk.Added a help text icon beside labels with a title attribute on their respective inputs, or on labels for checkboxes and radios. Enabled with a data-show-help-icon attribute.Updated various dependencies.5.0.1Fixed a bug that caused some devDependencies to end up in the production build.Updated various dependencies.5.0.0Breaking: Added JS module bundling to make it possible for you to import CJS, ESM, or a standalone version of the JavaScript in this library to your project. However you will need to change your imports to match the new file names. See README for details.Added show/hide toggle to password fields which can be disabled with a data-no-reveal attribute.Added hover text for the clear field button and the show/hide password button.Added ability to customize clear field button hover text and show/hide password button hover text using data attributes as well.Added support for undo/redo keyboard commands when pressing the clear field.Added test suite.Fixed some accessibility issues.Updated various dependencies.4.0.4Fixed a bug that caused menu items with buttons to appear as a list.Updated various dependencies.4.0.3Fixed bug in which a form entry consisting of a single checkbox would be misaligned.Fixed bug that prevented some inputs from expanding to the width of its container.Fixed bug in which CSS reset for elements within a semantic forms form was overly aggressive, making it harder to style unrelated content within such a form.Updated various dependencies.4.0.2Fixed a visual bug that occurred when single checkbox elements had extra elements included.Updated various dependencies.4.0.1Added invalid help text support.Fixed a bug that caused float labels to break when certain browser extensions were enabled.4.0.0Breaking: Overhauled entire codebase to drive it using mostly CSS grid instead of flexbox. This makes everything more flexible overall and fit more designs better. However the CSS and markup changes will likely cause breaking changes to previous integrations, so when upgrading make some time to visually test all your pages to alter any CSS overrides you had in place accordingly. You also might want to make some markup changes to make use of new available classes to tweak the fit of individual form fields on specific forms.Altered fields to fit available space better at various screen sizes.Added multiple utility classes that define how wide inputs will span in the responsive layout.Added support for input type=image.Added support for secondary labels.Added styling for invalid form fields.Added asterisk that appears on required inputs.Improved accessibility considerably. Now has 100% Lighthouse score.Added feature to progressively nest fieldsets with progressively darker/lighter background colors.Fixed bug causing clear button appearing on disabled inputs.Fixed bug causing clear button to overlap with scrollbars on textareas.Fixed bug causing nested fieldset to have incorrect padding and margins.Fixed various other small bugs.Replaced the less CSS preprocessor with sass.Updated various dependencies.3.2.1Fixed a bug that could cause checkboxes and radio buttons to not submit their values to the server properly.Updated various dependencies.3.2.0Added a reinitialization method to re-scan existing forms. Called with window.semanticForms.reinitialize(formName).Altered logic to enhance forms so that it now ignores inputs that have already been enhanced.Updated dependencies.3.1.0Added dark mode support.Deprecated \"reset\" versions and \"no images\" versions.Added mutation observer that monitors changes to the DOM and will enhance any additional semanticForms forms you insert, but the monitoring may not be perfect. If you want to re-scan for new forms to enhance manually, you may still need to call window.semanticForms().Fixed a bug that caused DOM events to be duplicated when DOM elements are added dynamically after the first page load.Updated dependencies.3.0.8Fixed main export on case-sensitive file systems.Updated dependencies.3.0.7Fixed Chrome issue for forms with no placeholder.3.0.6Fixed missing files in npm package.3.0.5Added \"reset\" versions of the CSS files that set all: unset; before applying any semantic forms styles to help avoid conflicts with other CSS. There is a performance degradation to using this technique, so you should only use this if absolutely necessary.3.0.4Reduced size of select box text.3.0.3Fixed issue that prevented id selectors from allowing dots in the string.Fixed issue that prevented the clear field from dispatching an input event.3.0.2Added support for a single checkbox rather than a group of checkboxes.3.0.1Fixed alignment issue.3.0.0Removed default two column layout. Now defaults to as many columns as the container is wide.Added x2 class you can put on dd elements to double the width of a form. Does not apply on small screens.2.1.2Added a function to the JS files's global scope called semanticForms that you can call to initialize new forms that have been added to the DOM since the initial initialization.Updated dependencies.2.1.1Fixed a situation that could lead to a JS error.Fix minor alignment issue.2.1.0Added all input types.Fixed clear field.Fixed markup mistakes in the examples.Fixed CSS to support <menu> elements correctly.Refactored the JavaScript to modernize it.Updated dependencies.2.0.0Replaced <div class=\"buttonGroup\"> with a <menu> element. You will need to refactor your HTML accordingly.Fixed alignment issue caused by browser engines changing their alignment calculations since the first release.Various other refactoring.Pinned deps.Updated dependencies.1.0.5Restricted JS events to target elements within semanticForms class form elements.Switched font sizes to % in case someone finds 16px too small and changes the default font size in the browser, these form fields will no longer stay fixed.Published to npm.Started CHANGELOG.Updated dependencies.1.0.4 and belowHere be dragons…"})
window.siteTexts.push({file: "docs/semantic-forms/5.0.9/usage/index.html", title: "Semantic Forms — usage (5.0.9)", text: "Installnpm install semantic-formsThe package is distributed with the following builds available:dist/semantic-forms.cjs: CommonJS bundle: const semanticForms = require('semantic-forms')dist/semantic-forms.js: Standalone bundle that can be included via <script> tags. Declares a global variable called: semanticFormsdist/semantic-forms.min.js: Minified standalone bundle that can be included via <p> tags. Declares a global variable called: semanticFormsdist/semantic-forms.mjs: ES module: import semanticForms from 'semantic-forms'dist/semantic-forms.min.mjs: Minified ES module: import semanticForms from 'semantic-forms/min'UseInclude the dist/semantic-forms.css and whichever of the above versions of the JS file you prefer from this repo into your project.Then apply the semanticForms class to your <form> elements:<form class=\"semanticForms\">   <!-- your form here --> </form>Then apply the JavaScript enhancements:semanticForms()Then the CSS/JS enhancements to your forms will apply automatically, assuming the markup structure you use is one of the supported patterns.If you make changes to the DOM after Semantic Forms is activated and want to activate any additional semanticForms forms you insert, you can re-scan for new forms by calling semanticForms.reinitialize() again. If you only want to reinitialize one form instead of all of them, call semanticForms.reinitialize(formElement).FeaturesFloat label inputsThe float label input pattern is notoriously difficult to implement in a fashion that doesn't degrade HTML semantics or accessibility. This pattern library implements a solution that solves that problem. Your label doesn't need to be a sibling of your input like with other implementations. This implementation also has a custom clear button for each input.Example<form class=\"semanticForms\">   <dl>     <dt><label for=\"name\">Name</label></dt>     <dd><input id=\"name\" name=\"name\" type=\"text\" placeholder=\"e.g. John Smith\"></dd>   </dl> </form>NameOr with a <textarea><form class=\"semanticForms\">   <dl>     <dt><label for=\"textarea\">Textarea</label></dt>     <dd><textarea id=\"textarea\" name=\"textarea\" rows=\"5\" cols=\"50\" placeholder=\"e.g. Long string of text\"></textarea></dd>   </dl> </form>TextareaAdd help textInclude a label in the <dd> element with a matching for attribute to place help text beneath the input:<form class=\"semanticForms\">   <dl>     <dt><label for=\"password\">Password</label></dt>     <dd>       <input id=\"password\" name=\"password\" type=\"password\" placeholder=\"Enter a password\" minlength=\"8\" required>       <label for=\"password\">Must be at least 8 characters long.</label>     </dd>   </dl> </form>Password Must be at least 8 characters long.Customizing input fieldsBy default, input fields will display an X icon to clear the text and password fields will also display a show/hide toggle for displaying the password in plain text. You can customize this behavior as follows:Customize the hover text of the clear field button by applying a data-clear-field-text=\"your text\" attribute to the input.Customize the hover text of the show password button by applying a data-show-password-text=\"your text\" attribute to the input.Customize the hover text of the hide password button by applying a data-hide-password-text=\"your text\" attribute to the input.Prevent the show/hide toggle from appearing on password fields by applying a data-no-reveal attribute to the input.Show a help text icon next to labels of inputs that contain a title attribute by applying a data-show-help-icon attribute to the label.Note that checkboxes and radios should have a title attribute on the label instead of the inputs.Responsive columnsThis feature makes it so the form fields will grow, shrink, expand the number of columns, or reduce the number of columns based on how much space exists in the container. You can customize it by applying various colspan-# classes to various elements in the form markup structure.Set number of columns for a group of formsYou can limit the number of columns on your forms using the colspan-# class on a <dl> element:<form class=\"semanticForms\">   <dl class=\"colspan-2\">     <dt><label for=\"input-a\">Input A</label></dt>     <dd><input type=\"text\" id=\"input-a\" name=\"input-a\"></dd>      <dt><label for=\"input-b\">Input B</label></dt>     <dd><input type=\"text\" id=\"input-b\" name=\"input-b\"></dd>      <!-- wraps to the next row -->     <dt><label for=\"input-c\">Input C</label></dt>     <dd><input type=\"text\" id=\"input-c\" name=\"input-c\"></dd>   </dl> </form>Input AInput BInput CYou can also apply the class to a <fieldset> which will apply that styling to all nested <dl> elements:<form class=\"semanticForms\">   <fieldset class=\"colspan-3\">     <!-- inherits 3 column class -->     <dl>       <dt><label for=\"f-ex-input-a\">Input A</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-a\" name=\"f-ex-input-a\"></dd>        <dt><label for=\"f-ex-input-b\">Input B</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-b\" name=\"f-ex-input-b\"></dd>        <dt><label for=\"f-ex-input-c\">Input C</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-c\" name=\"f-ex-input-c\"></dd>     </dl>      <!-- has 4 columns -->     <dl class=\"colspan-4\">       <dt><label for=\"f-ex-input-d\">Input D</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-d\" name=\"f-ex-input-d\"></dd>        <dt><label for=\"f-ex-input-e\">Input E</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-e\" name=\"f-ex-input-e\"></dd>        <dt><label for=\"f-ex-input-f\">Input F</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-f\" name=\"f-ex-input-f\"></dd>     </dl>   </fieldset> </form>Input AInput BInput CInput DInput EInput FSet number of columns a single input field takes upYou can specify the number of columns an input will span using the colspan-# class on the <dd> element. The inputs are responsive and will shrink according to available space. Available numbered classes are colspan-1 through colspan-5:<form class=\"semanticForms\">   <fieldset>     <dl>       <dt><label for=\"cspan-ex-input-a\">Input A</label></dt>       <!-- 1 column -->       <dd class=\"colspan-1\"><input type=\"text\" id=\"cspan-ex-input-a\" name=\"cspan-ex-input-a\"></dd>        <dt><label for=\"cspan-ex-input-b\">Input B</label></dt>       <!-- 2 columns  -->       <dd class=\"colspan-2\"><input type=\"text\" id=\"cspan-ex-input-b\" name=\"cspan-ex-input-b\"></dd>        <dt><label for=\"cspan-ex-input-c\">Input C</label></dt>       <!-- 5 columns (max) -->       <dd class=\"colspan-5\"><input type=\"text\" id=\"cspan-ex-input-c\" name=\"cspan-ex-input-c\"></dd>     </dl>   </fieldset> </form>Input AInput BInput Ccolspan-full can also be used to force an input to take up the entire width of a form:<form class=\"semanticForms\">   <fieldset>     <dl>       <dt><label for=\"cspanfull-ex-input-a\">Input A</label></dt>       <!-- this spans 2 columns on row 1 -->       <dd class=\"colspan-2\"><input type=\"text\" id=\"cspanfull-ex-input-a\" name=\"cspanfull-ex-input-a\"></dd>        <dt><label for=\"cspanfull-ex-input-b\">Input B</label></dt>       <!-- this spans the full width of row 2 -->       <dd class=\"colspan-full\"><input type=\"text\" id=\"cspanfull-ex-input-b\" name=\"cspanfull-ex-input-b\"></dd>        <!-- this spans 1 column on row 3 -->       <dt><label for=\"cspanfull-ex-input-c\">Input C</label></dt>       <dd><input type=\"text\" id=\"cspanfull-ex-input-c\" name=\"cspanfull-ex-input-c\"></dd>     </dl>   </fieldset> </form>Input AInput BInput CButton groupsYou can align buttons side-by-side, or in left/right/center groups.Non-grouped exampleNothing fancy here:<form class=\"semanticForms\">   <button type=\"submit\" name=\"submit\">Non-grouped submit button</button>   <button type=\"submit\" name=\"submit\">Another one</button> </form>Non-grouped submit button Another oneButton groupsDriven by flexbox to intelligently align the buttons based on how many are in the group:<form class=\"semanticForms\">   <!-- aligns left/right -->   <menu>     <li><button type=\"submit\" name=\"submit\">Button 1</button></li>     <li><button type=\"submit\" name=\"submit\">Button 2</button></li>   </menu>    <!-- aligns left/center/right -->   <menu>     <li><button type=\"submit\" name=\"submit\">Button 1</button></li>     <li><button type=\"submit\" name=\"submit\">Button 2</button></li>     <li><button type=\"submit\" name=\"submit\">Button 3</button></li>   </menu> </form>Button 1Button 2Button 1Button 2Button 3Checkboxes and radio buttonsCheckboxes and radio buttons need to follow the following markup structure:A single checkboxNot too different than other inputs:<form class=\"semanticForms\">   <dl>     <dt><label for=\"some_field_name\">Single checkbox</label></dt>     <dd><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name\"></dd>   </dl> </form>Single checkboxCheckbox group<form class=\"semanticForms\">   <dl>     <dt><label data-for=\"some_checkboxes\">Checkboxes:</label></dt>     <dd class=\"checkboxes\">       <ul id=\"some_checkboxes\">         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_one\"> <label for=\"some_field_name_checkboxes_one\">One</label></li>         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_two\"> <label for=\"some_field_name_checkboxes_two\">Two</label></li>         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_three\"> <label for=\"some_field_name_checkboxes_three\">Three</label></li>       </ul>     </dd>   </dl> </form>Checkboxes: One Two ThreeRadio buttons<form class=\"semanticForms\">   <dl>     <dt><label data-for=\"some_radios\">Radios:</label></dt>     <dd class=\"radios\">       <ul id=\"some_radios\">         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_one\"> <label for=\"some_field_name_radios_one\">One</label></li>         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_two\"> <label for=\"some_field_name_radios_two\">Two</label></li>         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_three\"> <label for=\"some_field_name_radios_three\">Three</label></li>       </ul>     </dd>   </dl> </form>Radios: One Two ThreeValidation stylesInputs with the required attribute will result in a visual indicator (*) being added to its label. You can disable this indicator with the data-no-asterisk attribute on the label element:<form class=\"semanticForms\">   <dl>     <dt><label for=\"input\" data-no-asterisk>Input label</label></dt>     <dd><input type=\"text\" name=\"input\" id=\"input\" required>   </dl> </form>Input labelYou can set a paragraph of text below a field to only appear when a field is invalid with the data-invalid-text attribute:<form class=\"semanticForms\">   <dl>     <dt><label for=\"password_validation\">Password label</label></dt>     <dd>       <input type=\"password\" name=\"password\" id=\"password_validation\" minlength=\"8\">       <p data-invalid-text>Password must be at least 8 characters long.</p>     </dd>   </dl> </form>Password labelPassword must be at least 8 characters long.You can adjust the tooltip text of the asterisk with the data-asterisk-text attribute:<form class=\"semanticForms\">   <dl>     <dt><label for=\"input_validation\" data-asterisk-text=\"This is a custom tooltip.\">Input label</label></dt>     <dd><input type=\"text\" name=\"input\" id=\"input_validation\" required>   </dl> </form>Input labelLight mode and dark modeLight mode and dark mode will be detected automatically based on operating system preference. To set it manually, you can apply an additional class of light or dark to your <form> elements to force the mode.Low flow (JavaScript disabled) modeThe low flow will be displayed if JS is disabled.You can also activate the low flow (JavaScript disabled) mode manually by adding the lowFlow class to your <form> element.The low-flow mode reverts the float label pattern to traditional labels and doesn't include other JS-exclusive enhancements, but preserves the other visual design enhancements driven purely by CSS.MoreSee a page demoing all features here."})
window.siteTexts.push({file: "docs/semantic-forms/5.1.0/changelog/index.html", title: "Semantic Forms — changelog (5.1.0)", text: "5.1.0Added ability to more conveniently override default CSS via additional CSS variables.Updated all CSS variables to be prefixed with semanticForms (i.e. --semanticFormsFontFamily) to minimize the chance of naming collisions with the rest of your CSS.Fixed bug that prevented input label ellipses from being responsive to the input width.Updated dependencies.5.0.10Fixed bug causing active styles to apply to focused buttons.Updated dependencies.5.0.9Fixed bug causing native clear field to appear on search inputs.Updated dependencies.5.0.8Altered dark mode support so that it does not apply if the <html> or <body> tag has a class of \"light\".Updated dependencies.5.0.7Fixed a bug where the responsive grid layout would not always line up correctly.Fixed a bug that prevented text from being longer than input element, causing graphical errors.Updated dependencies.5.0.6Added slicker live demo docs.Fixed a bug causing dark mode not to respect OS preference.Updated dependencies.5.0.5Added better error handling to the JS.Updated dependencies.5.0.4Fixed a periodic JS error.5.0.3Fixed a bug that prevented semantic-forms from detecting when you inserted new forms into the page.Updated dependencies.5.0.2Fixed a bug that would cause errors when reinitialize() was called.Fixed a bug that caused nested selects to lose their dropdown icon.Fixed a bug where required single checkboxes would not show an asterisk.Added a help text icon beside labels with a title attribute on their respective inputs, or on labels for checkboxes and radios. Enabled with a data-show-help-icon attribute.Updated various dependencies.5.0.1Fixed a bug that caused some devDependencies to end up in the production build.Updated various dependencies.5.0.0Breaking: Added JS module bundling to make it possible for you to import CJS, ESM, or a standalone version of the JavaScript in this library to your project. However you will need to change your imports to match the new file names. See README for details.Added show/hide toggle to password fields which can be disabled with a data-no-reveal attribute.Added hover text for the clear field button and the show/hide password button.Added ability to customize clear field button hover text and show/hide password button hover text using data attributes as well.Added support for undo/redo keyboard commands when pressing the clear field.Added test suite.Fixed some accessibility issues.Updated various dependencies.4.0.4Fixed a bug that caused menu items with buttons to appear as a list.Updated various dependencies.4.0.3Fixed bug in which a form entry consisting of a single checkbox would be misaligned.Fixed bug that prevented some inputs from expanding to the width of its container.Fixed bug in which CSS reset for elements within a semantic forms form was overly aggressive, making it harder to style unrelated content within such a form.Updated various dependencies.4.0.2Fixed a visual bug that occurred when single checkbox elements had extra elements included.Updated various dependencies.4.0.1Added invalid help text support.Fixed a bug that caused float labels to break when certain browser extensions were enabled.4.0.0Breaking: Overhauled entire codebase to drive it using mostly CSS grid instead of flexbox. This makes everything more flexible overall and fit more designs better. However the CSS and markup changes will likely cause breaking changes to previous integrations, so when upgrading make some time to visually test all your pages to alter any CSS overrides you had in place accordingly. You also might want to make some markup changes to make use of new available classes to tweak the fit of individual form fields on specific forms.Altered fields to fit available space better at various screen sizes.Added multiple utility classes that define how wide inputs will span in the responsive layout.Added support for input type=image.Added support for secondary labels.Added styling for invalid form fields.Added asterisk that appears on required inputs.Improved accessibility considerably. Now has 100% Lighthouse score.Added feature to progressively nest fieldsets with progressively darker/lighter background colors.Fixed bug causing clear button appearing on disabled inputs.Fixed bug causing clear button to overlap with scrollbars on textareas.Fixed bug causing nested fieldset to have incorrect padding and margins.Fixed various other small bugs.Replaced the less CSS preprocessor with sass.Updated various dependencies.3.2.1Fixed a bug that could cause checkboxes and radio buttons to not submit their values to the server properly.Updated various dependencies.3.2.0Added a reinitialization method to re-scan existing forms. Called with window.semanticForms.reinitialize(formName).Altered logic to enhance forms so that it now ignores inputs that have already been enhanced.Updated dependencies.3.1.0Added dark mode support.Deprecated \"reset\" versions and \"no images\" versions.Added mutation observer that monitors changes to the DOM and will enhance any additional semanticForms forms you insert, but the monitoring may not be perfect. If you want to re-scan for new forms to enhance manually, you may still need to call window.semanticForms().Fixed a bug that caused DOM events to be duplicated when DOM elements are added dynamically after the first page load.Updated dependencies.3.0.8Fixed main export on case-sensitive file systems.Updated dependencies.3.0.7Fixed Chrome issue for forms with no placeholder.3.0.6Fixed missing files in npm package.3.0.5Added \"reset\" versions of the CSS files that set all: unset; before applying any semantic forms styles to help avoid conflicts with other CSS. There is a performance degradation to using this technique, so you should only use this if absolutely necessary.3.0.4Reduced size of select box text.3.0.3Fixed issue that prevented id selectors from allowing dots in the string.Fixed issue that prevented the clear field from dispatching an input event.3.0.2Added support for a single checkbox rather than a group of checkboxes.3.0.1Fixed alignment issue.3.0.0Removed default two column layout. Now defaults to as many columns as the container is wide.Added x2 class you can put on dd elements to double the width of a form. Does not apply on small screens.2.1.2Added a function to the JS files's global scope called semanticForms that you can call to initialize new forms that have been added to the DOM since the initial initialization.Updated dependencies.2.1.1Fixed a situation that could lead to a JS error.Fix minor alignment issue.2.1.0Added all input types.Fixed clear field.Fixed markup mistakes in the examples.Fixed CSS to support <menu> elements correctly.Refactored the JavaScript to modernize it.Updated dependencies.2.0.0Replaced <div class=\"buttonGroup\"> with a <menu> element. You will need to refactor your HTML accordingly.Fixed alignment issue caused by browser engines changing their alignment calculations since the first release.Various other refactoring.Pinned deps.Updated dependencies.1.0.5Restricted JS events to target elements within semanticForms class form elements.Switched font sizes to % in case someone finds 16px too small and changes the default font size in the browser, these form fields will no longer stay fixed.Published to npm.Started CHANGELOG.Updated dependencies.1.0.4 and belowHere be dragons…"})
window.siteTexts.push({file: "docs/semantic-forms/5.1.0/usage/index.html", title: "Semantic Forms — usage (5.1.0)", text: "Installnpm install semantic-formsThe package is distributed with the following builds available:dist/semantic-forms.cjs: CommonJS bundle: const semanticForms = require('semantic-forms')dist/semantic-forms.js: Standalone bundle that can be included via <script> tags. Declares a global variable called: semanticFormsdist/semantic-forms.min.js: Minified standalone bundle that can be included via <p> tags. Declares a global variable called: semanticFormsdist/semantic-forms.mjs: ES module: import semanticForms from 'semantic-forms'dist/semantic-forms.min.mjs: Minified ES module: import semanticForms from 'semantic-forms/min'UseInclude the dist/semantic-forms.css and whichever of the above versions of the JS file you prefer from this repo into your project.Then apply the semanticForms class to your <form> elements:<form class=\"semanticForms\">   <!-- your form here --> </form>Then apply the JavaScript enhancements:semanticForms()Then the CSS/JS enhancements to your forms will apply automatically, assuming the markup structure you use is one of the supported patterns.If you make changes to the DOM after Semantic Forms is activated and want to activate any additional semanticForms forms you insert, you can re-scan for new forms by calling semanticForms.reinitialize() again. If you only want to reinitialize one form instead of all of them, call semanticForms.reinitialize(formElement).FeaturesFloat label inputsThe float label input pattern is notoriously difficult to implement in a fashion that doesn't degrade HTML semantics or accessibility. This pattern library implements a solution that solves that problem. Your label doesn't need to be a sibling of your input like with other implementations. This implementation also has a custom clear button for each input.Example<form class=\"semanticForms\">   <dl>     <dt><label for=\"name\">Name</label></dt>     <dd><input id=\"name\" name=\"name\" type=\"text\" placeholder=\"e.g. John Smith\"></dd>   </dl> </form>NameOr with a <textarea><form class=\"semanticForms\">   <dl>     <dt><label for=\"textarea\">Textarea</label></dt>     <dd><textarea id=\"textarea\" name=\"textarea\" rows=\"5\" cols=\"50\" placeholder=\"e.g. Long string of text\"></textarea></dd>   </dl> </form>TextareaAdd help textInclude a label in the <dd> element with a matching for attribute to place help text beneath the input:<form class=\"semanticForms\" method=\"post\">   <dl>     <dt><label for=\"password\">Password</label></dt>     <dd>       <input id=\"password\" name=\"password\" type=\"password\" placeholder=\"Enter a password\" minlength=\"8\" required autocomplete=\"off\">       <label for=\"password\">Must be at least 8 characters long.</label>     </dd>   </dl> </form>Password Must be at least 8 characters long.Customizing input fieldsBy default, input fields will display an X icon to clear the text and password fields will also display a show/hide toggle for displaying the password in plain text. You can customize this behavior as follows:Customize the hover text of the clear field button by applying a data-clear-field-text=\"your text\" attribute to the input.Customize the hover text of the show password button by applying a data-show-password-text=\"your text\" attribute to the input.Customize the hover text of the hide password button by applying a data-hide-password-text=\"your text\" attribute to the input.Prevent the show/hide toggle from appearing on password fields by applying a data-no-reveal attribute to the input.Show a help text icon next to labels of inputs that contain a title attribute by applying a data-show-help-icon attribute to the label.Note that checkboxes and radios should have a title attribute on the label instead of the inputs.Responsive columnsThis feature makes it so the form fields will grow, shrink, expand the number of columns, or reduce the number of columns based on how much space exists in the container. You can customize it by applying various colspan-# classes to various elements in the form markup structure.Set number of columns for a group of formsYou can limit the number of columns on your forms using the colspan-# class on a <dl> element:<form class=\"semanticForms\">   <dl class=\"colspan-2\">     <dt><label for=\"input-a\">Input A</label></dt>     <dd><input type=\"text\" id=\"input-a\" name=\"input-a\"></dd>      <dt><label for=\"input-b\">Input B</label></dt>     <dd><input type=\"text\" id=\"input-b\" name=\"input-b\"></dd>      <!-- wraps to the next row -->     <dt><label for=\"input-c\">Input C</label></dt>     <dd><input type=\"text\" id=\"input-c\" name=\"input-c\"></dd>   </dl> </form>Input AInput BInput CYou can also apply the class to a <fieldset> which will apply that styling to all nested <dl> elements:<form class=\"semanticForms\">   <fieldset class=\"colspan-3\">     <!-- inherits 3 column class -->     <dl>       <dt><label for=\"f-ex-input-a\">Input A</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-a\" name=\"f-ex-input-a\"></dd>        <dt><label for=\"f-ex-input-b\">Input B</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-b\" name=\"f-ex-input-b\"></dd>        <dt><label for=\"f-ex-input-c\">Input C</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-c\" name=\"f-ex-input-c\"></dd>     </dl>      <!-- has 4 columns -->     <dl class=\"colspan-4\">       <dt><label for=\"f-ex-input-d\">Input D</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-d\" name=\"f-ex-input-d\"></dd>        <dt><label for=\"f-ex-input-e\">Input E</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-e\" name=\"f-ex-input-e\"></dd>        <dt><label for=\"f-ex-input-f\">Input F</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-f\" name=\"f-ex-input-f\"></dd>     </dl>   </fieldset> </form>Input AInput BInput CInput DInput EInput FSet number of columns a single input field takes upYou can specify the number of columns an input will span using the colspan-# class on the <dd> element. The inputs are responsive and will shrink according to available space. Available numbered classes are colspan-1 through colspan-5:<form class=\"semanticForms\">   <fieldset>     <dl>       <dt><label for=\"cspan-ex-input-a\">Input A</label></dt>       <!-- 1 column -->       <dd class=\"colspan-1\"><input type=\"text\" id=\"cspan-ex-input-a\" name=\"cspan-ex-input-a\"></dd>        <dt><label for=\"cspan-ex-input-b\">Input B</label></dt>       <!-- 2 columns  -->       <dd class=\"colspan-2\"><input type=\"text\" id=\"cspan-ex-input-b\" name=\"cspan-ex-input-b\"></dd>        <dt><label for=\"cspan-ex-input-c\">Input C</label></dt>       <!-- 5 columns (max) -->       <dd class=\"colspan-5\"><input type=\"text\" id=\"cspan-ex-input-c\" name=\"cspan-ex-input-c\"></dd>     </dl>   </fieldset> </form>Input AInput BInput Ccolspan-full can also be used to force an input to take up the entire width of a form:<form class=\"semanticForms\">   <fieldset>     <dl>       <dt><label for=\"cspanfull-ex-input-a\">Input A</label></dt>       <!-- this spans 2 columns on row 1 -->       <dd class=\"colspan-2\"><input type=\"text\" id=\"cspanfull-ex-input-a\" name=\"cspanfull-ex-input-a\"></dd>        <dt><label for=\"cspanfull-ex-input-b\">Input B</label></dt>       <!-- this spans the full width of row 2 -->       <dd class=\"colspan-full\"><input type=\"text\" id=\"cspanfull-ex-input-b\" name=\"cspanfull-ex-input-b\"></dd>        <!-- this spans 1 column on row 3 -->       <dt><label for=\"cspanfull-ex-input-c\">Input C</label></dt>       <dd><input type=\"text\" id=\"cspanfull-ex-input-c\" name=\"cspanfull-ex-input-c\"></dd>     </dl>   </fieldset> </form>Input AInput BInput CButton groupsYou can align buttons side-by-side, or in left/right/center groups.Non-grouped exampleNothing fancy here:<form class=\"semanticForms\" method=\"post\">   <button type=\"submit\" name=\"submit\">Non-grouped submit button</button>   <button type=\"submit\" name=\"submit\">Another one</button> </form>Non-grouped submit button Another oneButton groupsDriven by flexbox to intelligently align the buttons based on how many are in the group:<form class=\"semanticForms\" method=\"post\">   <!-- aligns left/right -->   <menu>     <li><button type=\"submit\" name=\"submit\">Button 1</button></li>     <li><button type=\"submit\" name=\"submit\">Button 2</button></li>   </menu>    <!-- aligns left/center/right -->   <menu>     <li><button type=\"submit\" name=\"submit\">Button 1</button></li>     <li><button type=\"submit\" name=\"submit\">Button 2</button></li>     <li><button type=\"submit\" name=\"submit\">Button 3</button></li>   </menu> </form>Button 1Button 2Button 1Button 2Button 3Checkboxes and radio buttonsCheckboxes and radio buttons need to follow the following markup structure:A single checkboxNot too different than other inputs:<form class=\"semanticForms\">   <dl>     <dt><label for=\"some_field_name\">Single checkbox</label></dt>     <dd><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name\"></dd>   </dl> </form>Single checkboxCheckbox group<form class=\"semanticForms\">   <dl>     <dt><label data-for=\"some_checkboxes\">Checkboxes:</label></dt>     <dd class=\"checkboxes\">       <ul id=\"some_checkboxes\">         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_one\"> <label for=\"some_field_name_checkboxes_one\">One</label></li>         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_two\"> <label for=\"some_field_name_checkboxes_two\">Two</label></li>         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_three\"> <label for=\"some_field_name_checkboxes_three\">Three</label></li>       </ul>     </dd>   </dl> </form>Checkboxes: One Two ThreeRadio buttons<form class=\"semanticForms\">   <dl>     <dt><label data-for=\"some_radios\">Radios:</label></dt>     <dd class=\"radios\">       <ul id=\"some_radios\">         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_one\"> <label for=\"some_field_name_radios_one\">One</label></li>         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_two\"> <label for=\"some_field_name_radios_two\">Two</label></li>         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_three\"> <label for=\"some_field_name_radios_three\">Three</label></li>       </ul>     </dd>   </dl> </form>Radios: One Two ThreeValidation stylesInputs with the required attribute will result in a visual indicator (*) being added to its label. You can disable this indicator with the data-no-asterisk attribute on the label element:<form class=\"semanticForms\">   <dl>     <dt><label for=\"input\" data-no-asterisk>Input label</label></dt>     <dd><input type=\"text\" name=\"input\" id=\"input\" required>   </dl> </form>Input labelYou can set a paragraph of text below a field to only appear when a field is invalid with the data-invalid-text attribute:<form class=\"semanticForms\" method=\"post\">   <dl>     <dt><label for=\"password_validation\">Password label</label></dt>     <dd>       <input type=\"password\" name=\"password\" id=\"password_validation\" minlength=\"8\" autocomplete=\"off\">       <p data-invalid-text>Password must be at least 8 characters long.</p>     </dd>   </dl> </form>Password labelPassword must be at least 8 characters long.You can adjust the tooltip text of the asterisk with the data-asterisk-text attribute:<form class=\"semanticForms\">   <dl>     <dt><label for=\"input_validation\" data-asterisk-text=\"This is a custom tooltip.\">Input label</label></dt>     <dd><input type=\"text\" name=\"input\" id=\"input_validation\" required>   </dl> </form>Input labelLight mode and dark modeLight mode and dark mode will be detected automatically based on operating system preference. To set it manually, you can apply an additional class of light or dark to your <form> elements to force the mode.Low flow (JavaScript disabled) modeThe low flow will be displayed if JS is disabled.You can also activate the low flow (JavaScript disabled) mode manually by adding the lowFlow class to your <form> element.The low-flow mode reverts the float label pattern to traditional labels and doesn't include other JS-exclusive enhancements, but preserves the other visual design enhancements driven purely by CSS.Overriding default stylesThe most convenient way to override the default styles in Semantic Forms is to override the built-in CSS variables.For example:form.semanticForms {   /* will overwrite the default semantic-forms values */   --semanticFormsFontFamily: monospace;   --semanticFormsTextColor: blue;   --semanticFormsInputMinWidth: 300px; }For a complete list of CSS variables you can override, see the top of semanticForms.scss.MoreSee a page demoing all features here."})
window.siteTexts.push({file: "docs/semantic-forms/5.1.1/changelog/index.html", title: "Semantic Forms — changelog (5.1.1)", text: "5.1.1Fixed broken low flow styling.Fixed a visual bug on button gradients in Firefox.Fixed background styling on nested fieldsets within <detail> elements.Updated dependencies.5.1.0Added ability to more conveniently override default CSS via additional CSS variables.Updated all CSS variables to be prefixed with semanticForms (i.e. --semanticFormsFontFamily) to minimize the chance of naming collisions with the rest of your CSS.Fixed bug that prevented input label ellipses from being responsive to the input width.Updated dependencies.5.0.10Fixed bug causing active styles to apply to focused buttons.Updated dependencies.5.0.9Fixed bug causing native clear field to appear on search inputs.Updated dependencies.5.0.8Altered dark mode support so that it does not apply if the <html> or <body> tag has a class of \"light\".Updated dependencies.5.0.7Fixed a bug where the responsive grid layout would not always line up correctly.Fixed a bug that prevented text from being longer than input element, causing graphical errors.Updated dependencies.5.0.6Added slicker live demo docs.Fixed a bug causing dark mode not to respect OS preference.Updated dependencies.5.0.5Added better error handling to the JS.Updated dependencies.5.0.4Fixed a periodic JS error.5.0.3Fixed a bug that prevented semantic-forms from detecting when you inserted new forms into the page.Updated dependencies.5.0.2Fixed a bug that would cause errors when reinitialize() was called.Fixed a bug that caused nested selects to lose their dropdown icon.Fixed a bug where required single checkboxes would not show an asterisk.Added a help text icon beside labels with a title attribute on their respective inputs, or on labels for checkboxes and radios. Enabled with a data-show-help-icon attribute.Updated various dependencies.5.0.1Fixed a bug that caused some devDependencies to end up in the production build.Updated various dependencies.5.0.0Breaking: Added JS module bundling to make it possible for you to import CJS, ESM, or a standalone version of the JavaScript in this library to your project. However you will need to change your imports to match the new file names. See README for details.Added show/hide toggle to password fields which can be disabled with a data-no-reveal attribute.Added hover text for the clear field button and the show/hide password button.Added ability to customize clear field button hover text and show/hide password button hover text using data attributes as well.Added support for undo/redo keyboard commands when pressing the clear field.Added test suite.Fixed some accessibility issues.Updated various dependencies.4.0.4Fixed a bug that caused menu items with buttons to appear as a list.Updated various dependencies.4.0.3Fixed bug in which a form entry consisting of a single checkbox would be misaligned.Fixed bug that prevented some inputs from expanding to the width of its container.Fixed bug in which CSS reset for elements within a semantic forms form was overly aggressive, making it harder to style unrelated content within such a form.Updated various dependencies.4.0.2Fixed a visual bug that occurred when single checkbox elements had extra elements included.Updated various dependencies.4.0.1Added invalid help text support.Fixed a bug that caused float labels to break when certain browser extensions were enabled.4.0.0Breaking: Overhauled entire codebase to drive it using mostly CSS grid instead of flexbox. This makes everything more flexible overall and fit more designs better. However the CSS and markup changes will likely cause breaking changes to previous integrations, so when upgrading make some time to visually test all your pages to alter any CSS overrides you had in place accordingly. You also might want to make some markup changes to make use of new available classes to tweak the fit of individual form fields on specific forms.Altered fields to fit available space better at various screen sizes.Added multiple utility classes that define how wide inputs will span in the responsive layout.Added support for input type=image.Added support for secondary labels.Added styling for invalid form fields.Added asterisk that appears on required inputs.Improved accessibility considerably. Now has 100% Lighthouse score.Added feature to progressively nest fieldsets with progressively darker/lighter background colors.Fixed bug causing clear button appearing on disabled inputs.Fixed bug causing clear button to overlap with scrollbars on textareas.Fixed bug causing nested fieldset to have incorrect padding and margins.Fixed various other small bugs.Replaced the less CSS preprocessor with sass.Updated various dependencies.3.2.1Fixed a bug that could cause checkboxes and radio buttons to not submit their values to the server properly.Updated various dependencies.3.2.0Added a reinitialization method to re-scan existing forms. Called with window.semanticForms.reinitialize(formName).Altered logic to enhance forms so that it now ignores inputs that have already been enhanced.Updated dependencies.3.1.0Added dark mode support.Deprecated \"reset\" versions and \"no images\" versions.Added mutation observer that monitors changes to the DOM and will enhance any additional semanticForms forms you insert, but the monitoring may not be perfect. If you want to re-scan for new forms to enhance manually, you may still need to call window.semanticForms().Fixed a bug that caused DOM events to be duplicated when DOM elements are added dynamically after the first page load.Updated dependencies.3.0.8Fixed main export on case-sensitive file systems.Updated dependencies.3.0.7Fixed Chrome issue for forms with no placeholder.3.0.6Fixed missing files in npm package.3.0.5Added \"reset\" versions of the CSS files that set all: unset; before applying any semantic forms styles to help avoid conflicts with other CSS. There is a performance degradation to using this technique, so you should only use this if absolutely necessary.3.0.4Reduced size of select box text.3.0.3Fixed issue that prevented id selectors from allowing dots in the string.Fixed issue that prevented the clear field from dispatching an input event.3.0.2Added support for a single checkbox rather than a group of checkboxes.3.0.1Fixed alignment issue.3.0.0Removed default two column layout. Now defaults to as many columns as the container is wide.Added x2 class you can put on dd elements to double the width of a form. Does not apply on small screens.2.1.2Added a function to the JS files's global scope called semanticForms that you can call to initialize new forms that have been added to the DOM since the initial initialization.Updated dependencies.2.1.1Fixed a situation that could lead to a JS error.Fix minor alignment issue.2.1.0Added all input types.Fixed clear field.Fixed markup mistakes in the examples.Fixed CSS to support <menu> elements correctly.Refactored the JavaScript to modernize it.Updated dependencies.2.0.0Replaced <div class=\"buttonGroup\"> with a <menu> element. You will need to refactor your HTML accordingly.Fixed alignment issue caused by browser engines changing their alignment calculations since the first release.Various other refactoring.Pinned deps.Updated dependencies.1.0.5Restricted JS events to target elements within semanticForms class form elements.Switched font sizes to % in case someone finds 16px too small and changes the default font size in the browser, these form fields will no longer stay fixed.Published to npm.Started CHANGELOG.Updated dependencies.1.0.4 and belowHere be dragons…"})
window.siteTexts.push({file: "docs/semantic-forms/5.1.1/fullDemo/index.html", title: "Semantic Forms (5.1.1)", text: "Semantic FormsA pattern library of forms based on semantic HTML enhanced with a modern UX.High flow (JavaScript enabled) stylingNamePrefilled fieldNo placeholderPassword fieldPassword should be at least 8 characters long.Don't show password fieldPassword should be at least 8 characters long.Customize clear/show buttonsPassword should be at least 8 characters long.Single form inputFieldset legendEmail fieldTelephone fieldURL fieldSearch fieldNumberInput with label help text Some help textInput with help iconRequired input with help iconInvalid fieldValid fieldRequired fieldRequired field (no asterisk)Required field (custom title)Disabled inputDisabled input w/ valueSelect boxItem oneItem twoItem threeItem fourItem fiveItem sixItem seven Some help text regarding the select boxRequired select boxItem oneItem twoItem threeItem fourItem fiveItem sixItem sevenRequired select box (no asterisk)Item oneItem twoItem threeItem fourItem fiveItem sixItem sevenCheckboxes One Two ThreeCheckboxes with help text One Two ThreeRequired checkboxes One Two ThreeSingle checkboxRequired single checkboxSingle help text checkboxRadios One Two ThreeColor fieldDate fieldTime fieldDatetime-local fieldMonth fieldWeek fieldFile fieldRange fieldTextareaTextarea (prefilled)Some prefilled content... Some help text regarding the textarea with some really long text that should overflow and wrapNested fieldsetInputHere is some subtext.Input 2Here's some small subtext.Input 3Here's some bold subtext.Input 4Here is some subtext.Here is some more subtext.Another nested fieldsetInput 1Input 2SelectHeyA final nested fieldset with colspanInput AInput BInput CInput DColspan classescolspan-1colspan-1colspan-2colspan-4colspan-3colspan-1colspan-fullcolspan-5colspan-1Input AInput BInput CInput Dcolspan-2Input AInput BInput CInput Dcolspan-3Input AInput BInput CInput Dcolspan-fullInput AInput BInput CInput DDetail elementDetail inputDetail inputDetail inputDetail inputAnother detail elementDetail input Flexbox button layout pattern with two submit buttons:Button 1Flexbox button layout pattern with three submit buttons:Button 1Button 2P tag elements CheckboxText input Textarea ButtonSome regular text with other elements inside of itNon-form related HTML elementsThis is some regular HTML that should not be affected by any semantic forms stylesThis is a divThis is a block quoteA link to the semantic forms repounordered list 1unordered list 2unordered list 3ordered list 1ordered list 2ordered list 3menu list 1menu list 2menu list 3description list titledescription list valueDetails summarySome detail textLow flow (JavaScript disabled) stylingAdding the lowFlow class to the form element removes all JS enhancements.NamePrefilled fieldNo placeholderPassword fieldPassword should be at least 8 characters long.Single form inputFieldset legendEmail fieldTelephone fieldURL fieldSearch fieldNumberInput with label help text Some help textInvalid fieldValid fieldRequired fieldSelect boxItem oneItem twoItem threeItem fourItem fiveItem sixItem seven Some help text regarding the select boxCheckboxes One Two ThreeSingle checkboxRadios One Two ThreeColor fieldDate fieldTime fieldDatetime-local fieldMonth fieldWeek fieldFile fieldRange fieldTextareaTextarea (prefilled)Some prefilled content... Some help text regarding the textarea with some really long text that should overflow and wrapNested fieldsetInputHere is some subtext.Input 2Here's some small subtext.Input 3Here's some bold subtext.Input 4Here is some subtext.Here is some more subtext.Another nested fieldsetInputInput 2SelectHeyColspan classescolspan-1colspan-1colspan-2colspan-4colspan-3colspan-1colspan-fullcolspan-5colspan-1Input AInput BInput Ccolspan-2Input AInput BInput Ccolspan-3Input AInput BInput CInput Dcolspan-4Input AInput BInput CInput DInput Ecolspan-5Input AInput BInput CInput DInput EInput FDetails summaryDetail inputDetail inputDetail inputDetail inputAnother details elementDetail inputP tag elements CheckboxText input Textarea ButtonSome regular text with other elements inside of it Flexbox button layout pattern with two submit buttons:Button 1Flexbox button layout pattern with three submit buttons:Button 1Button 2Non-form related HTML elementsThis is some regular HTML that should not be affected by any semantic forms stylesThis is a divThis is a block quoteA link to the semantic forms repounordered list 1unordered list 2unordered list 3ordered list 1ordered list 2ordered list 3menu list 1menu list 2menu list 3description list titledescription list valueDetails summarySome detail text"})
window.siteTexts.push({file: "docs/semantic-forms/5.1.1/usage/index.html", title: "Semantic Forms — usage (5.1.1)", text: "Installnpm install semantic-formsThe package is distributed with the following builds available:dist/semantic-forms.cjs: CommonJS bundle: const semanticForms = require('semantic-forms')dist/semantic-forms.js: Standalone bundle that can be included via <script> tags. Declares a global variable called: semanticFormsdist/semantic-forms.min.js: Minified standalone bundle that can be included via <p> tags. Declares a global variable called: semanticFormsdist/semantic-forms.mjs: ES module: import semanticForms from 'semantic-forms'dist/semantic-forms.min.mjs: Minified ES module: import semanticForms from 'semantic-forms/min'UseInclude the dist/semantic-forms.css and whichever of the above versions of the JS file you prefer from this repo into your project.Then apply the semanticForms class to your <form> elements:<form class=\"semanticForms\">   <!-- your form here --> </form>Then apply the JavaScript enhancements:semanticForms()Then the CSS/JS enhancements to your forms will apply automatically, assuming the markup structure you use is one of the supported patterns.If you make changes to the DOM after Semantic Forms is activated and want to activate any additional semanticForms forms you insert, you can re-scan for new forms by calling semanticForms.reinitialize() again. If you only want to reinitialize one form instead of all of them, call semanticForms.reinitialize(formElement).FeaturesFloat label inputsThe float label input pattern is notoriously difficult to implement in a fashion that doesn't degrade HTML semantics or accessibility. This pattern library implements a solution that solves that problem. Your label doesn't need to be a sibling of your input like with other implementations. This implementation also has a custom clear button for each input.Example<form class=\"semanticForms\">   <dl>     <dt><label for=\"name\">Name</label></dt>     <dd><input id=\"name\" name=\"name\" type=\"text\" placeholder=\"e.g. John Smith\"></dd>   </dl> </form>NameOr with a <textarea><form class=\"semanticForms\">   <dl>     <dt><label for=\"textarea\">Textarea</label></dt>     <dd><textarea id=\"textarea\" name=\"textarea\" rows=\"5\" cols=\"50\" placeholder=\"e.g. Long string of text\"></textarea></dd>   </dl> </form>TextareaAdd help textInclude a label in the <dd> element with a matching for attribute to place help text beneath the input:<form class=\"semanticForms\" method=\"post\">   <dl>     <dt><label for=\"password\">Password</label></dt>     <dd>       <input id=\"password\" name=\"password\" type=\"password\" placeholder=\"Enter a password\" minlength=\"8\" required autocomplete=\"off\">       <label for=\"password\">Must be at least 8 characters long.</label>     </dd>   </dl> </form>Password Must be at least 8 characters long.Customizing input fieldsBy default, input fields will display an X icon to clear the text and password fields will also display a show/hide toggle for displaying the password in plain text. You can customize this behavior as follows:Customize the hover text of the clear field button by applying a data-clear-field-text=\"your text\" attribute to the input.Customize the hover text of the show password button by applying a data-show-password-text=\"your text\" attribute to the input.Customize the hover text of the hide password button by applying a data-hide-password-text=\"your text\" attribute to the input.Prevent the show/hide toggle from appearing on password fields by applying a data-no-reveal attribute to the input.Show a help text icon next to labels of inputs that contain a title attribute by applying a data-show-help-icon attribute to the label.Note that checkboxes and radios should have a title attribute on the label instead of the inputs.Responsive columnsThis feature makes it so the form fields will grow, shrink, expand the number of columns, or reduce the number of columns based on how much space exists in the container. You can customize it by applying various colspan-# classes to various elements in the form markup structure.Set number of columns for a group of formsYou can limit the number of columns on your forms using the colspan-# class on a <dl> element:<form class=\"semanticForms\">   <dl class=\"colspan-2\">     <dt><label for=\"input-a\">Input A</label></dt>     <dd><input type=\"text\" id=\"input-a\" name=\"input-a\"></dd>      <dt><label for=\"input-b\">Input B</label></dt>     <dd><input type=\"text\" id=\"input-b\" name=\"input-b\"></dd>      <!-- wraps to the next row -->     <dt><label for=\"input-c\">Input C</label></dt>     <dd><input type=\"text\" id=\"input-c\" name=\"input-c\"></dd>   </dl> </form>Input AInput BInput CYou can also apply the class to a <fieldset> which will apply that styling to all nested <dl> elements:<form class=\"semanticForms\">   <fieldset class=\"colspan-3\">     <!-- inherits 3 column class -->     <dl>       <dt><label for=\"f-ex-input-a\">Input A</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-a\" name=\"f-ex-input-a\"></dd>        <dt><label for=\"f-ex-input-b\">Input B</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-b\" name=\"f-ex-input-b\"></dd>        <dt><label for=\"f-ex-input-c\">Input C</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-c\" name=\"f-ex-input-c\"></dd>     </dl>      <!-- has 4 columns -->     <dl class=\"colspan-4\">       <dt><label for=\"f-ex-input-d\">Input D</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-d\" name=\"f-ex-input-d\"></dd>        <dt><label for=\"f-ex-input-e\">Input E</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-e\" name=\"f-ex-input-e\"></dd>        <dt><label for=\"f-ex-input-f\">Input F</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-f\" name=\"f-ex-input-f\"></dd>     </dl>   </fieldset> </form>Input AInput BInput CInput DInput EInput FSet number of columns a single input field takes upYou can specify the number of columns an input will span using the colspan-# class on the <dd> element. The inputs are responsive and will shrink according to available space. Available numbered classes are colspan-1 through colspan-5:<form class=\"semanticForms\">   <fieldset>     <dl>       <dt><label for=\"cspan-ex-input-a\">Input A</label></dt>       <!-- 1 column -->       <dd class=\"colspan-1\"><input type=\"text\" id=\"cspan-ex-input-a\" name=\"cspan-ex-input-a\"></dd>        <dt><label for=\"cspan-ex-input-b\">Input B</label></dt>       <!-- 2 columns  -->       <dd class=\"colspan-2\"><input type=\"text\" id=\"cspan-ex-input-b\" name=\"cspan-ex-input-b\"></dd>        <dt><label for=\"cspan-ex-input-c\">Input C</label></dt>       <!-- 5 columns (max) -->       <dd class=\"colspan-5\"><input type=\"text\" id=\"cspan-ex-input-c\" name=\"cspan-ex-input-c\"></dd>     </dl>   </fieldset> </form>Input AInput BInput Ccolspan-full can also be used to force an input to take up the entire width of a form:<form class=\"semanticForms\">   <fieldset>     <dl>       <dt><label for=\"cspanfull-ex-input-a\">Input A</label></dt>       <!-- this spans 2 columns on row 1 -->       <dd class=\"colspan-2\"><input type=\"text\" id=\"cspanfull-ex-input-a\" name=\"cspanfull-ex-input-a\"></dd>        <dt><label for=\"cspanfull-ex-input-b\">Input B</label></dt>       <!-- this spans the full width of row 2 -->       <dd class=\"colspan-full\"><input type=\"text\" id=\"cspanfull-ex-input-b\" name=\"cspanfull-ex-input-b\"></dd>        <!-- this spans 1 column on row 3 -->       <dt><label for=\"cspanfull-ex-input-c\">Input C</label></dt>       <dd><input type=\"text\" id=\"cspanfull-ex-input-c\" name=\"cspanfull-ex-input-c\"></dd>     </dl>   </fieldset> </form>Input AInput BInput CButton groupsYou can align buttons side-by-side, or in left/right/center groups.Non-grouped exampleNothing fancy here:<form class=\"semanticForms\" method=\"post\">   <button type=\"submit\" name=\"submit\">Non-grouped submit button</button>   <button type=\"submit\" name=\"submit\">Another one</button> </form>Non-grouped submit button Another oneButton groupsDriven by flexbox to intelligently align the buttons based on how many are in the group:<form class=\"semanticForms\" method=\"post\">   <!-- aligns left/right -->   <menu>     <li><button type=\"submit\" name=\"submit\">Button 1</button></li>     <li><button type=\"submit\" name=\"submit\">Button 2</button></li>   </menu>    <!-- aligns left/center/right -->   <menu>     <li><button type=\"submit\" name=\"submit\">Button 1</button></li>     <li><button type=\"submit\" name=\"submit\">Button 2</button></li>     <li><button type=\"submit\" name=\"submit\">Button 3</button></li>   </menu> </form>Button 1Button 2Button 1Button 2Button 3Checkboxes and radio buttonsCheckboxes and radio buttons need to follow the following markup structure:A single checkboxNot too different than other inputs:<form class=\"semanticForms\">   <dl>     <dt><label for=\"some_field_name\">Single checkbox</label></dt>     <dd><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name\"></dd>   </dl> </form>Single checkboxCheckbox group<form class=\"semanticForms\">   <dl>     <dt><label data-for=\"some_checkboxes\">Checkboxes:</label></dt>     <dd class=\"checkboxes\">       <ul id=\"some_checkboxes\">         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_one\"> <label for=\"some_field_name_checkboxes_one\">One</label></li>         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_two\"> <label for=\"some_field_name_checkboxes_two\">Two</label></li>         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_three\"> <label for=\"some_field_name_checkboxes_three\">Three</label></li>       </ul>     </dd>   </dl> </form>Checkboxes: One Two ThreeRadio buttons<form class=\"semanticForms\">   <dl>     <dt><label data-for=\"some_radios\">Radios:</label></dt>     <dd class=\"radios\">       <ul id=\"some_radios\">         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_one\"> <label for=\"some_field_name_radios_one\">One</label></li>         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_two\"> <label for=\"some_field_name_radios_two\">Two</label></li>         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_three\"> <label for=\"some_field_name_radios_three\">Three</label></li>       </ul>     </dd>   </dl> </form>Radios: One Two ThreeValidation stylesInputs with the required attribute will result in a visual indicator (*) being added to its label. You can disable this indicator with the data-no-asterisk attribute on the label element:<form class=\"semanticForms\">   <dl>     <dt><label for=\"input\" data-no-asterisk>Input label</label></dt>     <dd><input type=\"text\" name=\"input\" id=\"input\" required>   </dl> </form>Input labelYou can set a paragraph of text below a field to only appear when a field is invalid with the data-invalid-text attribute:<form class=\"semanticForms\" method=\"post\">   <dl>     <dt><label for=\"password_validation\">Password label</label></dt>     <dd>       <input type=\"password\" name=\"password\" id=\"password_validation\" minlength=\"8\" autocomplete=\"off\">       <p data-invalid-text>Password must be at least 8 characters long.</p>     </dd>   </dl> </form>Password labelPassword must be at least 8 characters long.You can adjust the tooltip text of the asterisk with the data-asterisk-text attribute:<form class=\"semanticForms\">   <dl>     <dt><label for=\"input_validation\" data-asterisk-text=\"This is a custom tooltip.\">Input label</label></dt>     <dd><input type=\"text\" name=\"input\" id=\"input_validation\" required>   </dl> </form>Input labelLight mode and dark modeLight mode and dark mode will be detected automatically based on operating system preference. To set it manually, you can apply an additional class of light or dark to your <form> elements to force the mode.Low flow (JavaScript disabled) modeThe low flow will be displayed if JS is disabled.You can also activate the low flow (JavaScript disabled) mode manually by adding the lowFlow class to your <form> element.The low-flow mode reverts the float label pattern to traditional labels and doesn't include other JS-exclusive enhancements, but preserves the other visual design enhancements driven purely by CSS.Overriding default stylesThe most convenient way to override the default styles in Semantic Forms is to override the built-in CSS variables.For example:form.semanticForms {   /* will overwrite the default semantic-forms values */   --semanticFormsFontFamily: monospace;   --semanticFormsTextColor: blue;   --semanticFormsInputMinWidth: 300px; }For a complete list of CSS variables you can override, see the top of semanticForms.scss.MoreSee a page demoing all features here."})
window.siteTexts.push({file: "docs/semantic-forms/5.1.2/changelog/index.html", title: "Semantic Forms — changelog (5.1.2)", text: "5.1.2Added a search icon to search inputs.Added support for select elements with the multiple attribute.Added styling to tables within a form, or tables with the semanticForm class.Fixed missing styles to single radios.Fixed a bug that caused additional text labels to not work on checkbox groups, single checkboxes, and radios.Fixed alignment issues on checkbox and radio groups.Updated dependencies.5.1.1Fixed broken low flow styling.Fixed a visual bug on button gradients in Firefox.Fixed background styling on nested fieldsets within <detail> elements.Updated dependencies.5.1.0Added ability to more conveniently override default CSS via additional CSS variables.Updated all CSS variables to be prefixed with semanticForms (i.e. --semanticFormsFontFamily) to minimize the chance of naming collisions with the rest of your CSS.Fixed bug that prevented input label ellipses from being responsive to the input width.Updated dependencies.5.0.10Fixed bug causing active styles to apply to focused buttons.Updated dependencies.5.0.9Fixed bug causing native clear field to appear on search inputs.Updated dependencies.5.0.8Altered dark mode support so that it does not apply if the <html> or <body> tag has a class of \"light\".Updated dependencies.5.0.7Fixed a bug where the responsive grid layout would not always line up correctly.Fixed a bug that prevented text from being longer than input element, causing graphical errors.Updated dependencies.5.0.6Added slicker live demo docs.Fixed a bug causing dark mode not to respect OS preference.Updated dependencies.5.0.5Added better error handling to the JS.Updated dependencies.5.0.4Fixed a periodic JS error.5.0.3Fixed a bug that prevented semantic-forms from detecting when you inserted new forms into the page.Updated dependencies.5.0.2Fixed a bug that would cause errors when reinitialize() was called.Fixed a bug that caused nested selects to lose their dropdown icon.Fixed a bug where required single checkboxes would not show an asterisk.Added a help text icon beside labels with a title attribute on their respective inputs, or on labels for checkboxes and radios. Enabled with a data-show-help-icon attribute.Updated various dependencies.5.0.1Fixed a bug that caused some devDependencies to end up in the production build.Updated various dependencies.5.0.0Breaking: Added JS module bundling to make it possible for you to import CJS, ESM, or a standalone version of the JavaScript in this library to your project. However you will need to change your imports to match the new file names. See README for details.Added show/hide toggle to password fields which can be disabled with a data-no-reveal attribute.Added hover text for the clear field button and the show/hide password button.Added ability to customize clear field button hover text and show/hide password button hover text using data attributes as well.Added support for undo/redo keyboard commands when pressing the clear field.Added test suite.Fixed some accessibility issues.Updated various dependencies.4.0.4Fixed a bug that caused menu items with buttons to appear as a list.Updated various dependencies.4.0.3Fixed bug in which a form entry consisting of a single checkbox would be misaligned.Fixed bug that prevented some inputs from expanding to the width of its container.Fixed bug in which CSS reset for elements within a semantic forms form was overly aggressive, making it harder to style unrelated content within such a form.Updated various dependencies.4.0.2Fixed a visual bug that occurred when single checkbox elements had extra elements included.Updated various dependencies.4.0.1Added invalid help text support.Fixed a bug that caused float labels to break when certain browser extensions were enabled.4.0.0Breaking: Overhauled entire codebase to drive it using mostly CSS grid instead of flexbox. This makes everything more flexible overall and fit more designs better. However the CSS and markup changes will likely cause breaking changes to previous integrations, so when upgrading make some time to visually test all your pages to alter any CSS overrides you had in place accordingly. You also might want to make some markup changes to make use of new available classes to tweak the fit of individual form fields on specific forms.Altered fields to fit available space better at various screen sizes.Added multiple utility classes that define how wide inputs will span in the responsive layout.Added support for input type=image.Added support for secondary labels.Added styling for invalid form fields.Added asterisk that appears on required inputs.Improved accessibility considerably. Now has 100% Lighthouse score.Added feature to progressively nest fieldsets with progressively darker/lighter background colors.Fixed bug causing clear button appearing on disabled inputs.Fixed bug causing clear button to overlap with scrollbars on textareas.Fixed bug causing nested fieldset to have incorrect padding and margins.Fixed various other small bugs.Replaced the less CSS preprocessor with sass.Updated various dependencies.3.2.1Fixed a bug that could cause checkboxes and radio buttons to not submit their values to the server properly.Updated various dependencies.3.2.0Added a reinitialization method to re-scan existing forms. Called with window.semanticForms.reinitialize(formName).Altered logic to enhance forms so that it now ignores inputs that have already been enhanced.Updated dependencies.3.1.0Added dark mode support.Deprecated \"reset\" versions and \"no images\" versions.Added mutation observer that monitors changes to the DOM and will enhance any additional semanticForms forms you insert, but the monitoring may not be perfect. If you want to re-scan for new forms to enhance manually, you may still need to call window.semanticForms().Fixed a bug that caused DOM events to be duplicated when DOM elements are added dynamically after the first page load.Updated dependencies.3.0.8Fixed main export on case-sensitive file systems.Updated dependencies.3.0.7Fixed Chrome issue for forms with no placeholder.3.0.6Fixed missing files in npm package.3.0.5Added \"reset\" versions of the CSS files that set all: unset; before applying any semantic forms styles to help avoid conflicts with other CSS. There is a performance degradation to using this technique, so you should only use this if absolutely necessary.3.0.4Reduced size of select box text.3.0.3Fixed issue that prevented id selectors from allowing dots in the string.Fixed issue that prevented the clear field from dispatching an input event.3.0.2Added support for a single checkbox rather than a group of checkboxes.3.0.1Fixed alignment issue.3.0.0Removed default two column layout. Now defaults to as many columns as the container is wide.Added x2 class you can put on dd elements to double the width of a form. Does not apply on small screens.2.1.2Added a function to the JS files's global scope called semanticForms that you can call to initialize new forms that have been added to the DOM since the initial initialization.Updated dependencies.2.1.1Fixed a situation that could lead to a JS error.Fix minor alignment issue.2.1.0Added all input types.Fixed clear field.Fixed markup mistakes in the examples.Fixed CSS to support <menu> elements correctly.Refactored the JavaScript to modernize it.Updated dependencies.2.0.0Replaced <div class=\"buttonGroup\"> with a <menu> element. You will need to refactor your HTML accordingly.Fixed alignment issue caused by browser engines changing their alignment calculations since the first release.Various other refactoring.Pinned deps.Updated dependencies.1.0.5Restricted JS events to target elements within semanticForms class form elements.Switched font sizes to % in case someone finds 16px too small and changes the default font size in the browser, these form fields will no longer stay fixed.Published to npm.Started CHANGELOG.Updated dependencies.1.0.4 and belowHere be dragons…"})
window.siteTexts.push({file: "docs/semantic-forms/5.1.2/fullDemo/index.html", title: "Semantic Forms (5.1.2)", text: "Semantic FormsA pattern library of forms based on semantic HTML enhanced with a modern UX.High flow (JavaScript enabled) stylingNamePrefilled fieldNo placeholderPassword fieldPassword should be at least 8 characters long.Don't show password fieldPassword should be at least 8 characters long.Customize clear/show buttonsPassword should be at least 8 characters long.Single form inputFieldset legendInputsEmail fieldTelephone fieldURL fieldSearch fieldNumberInput with label help text Some help textInput with help iconRequired input with help iconInvalid fieldValid fieldRequired fieldRequired field (no asterisk)Required field (custom title)Disabled inputDisabled input w/ valueColor fieldDate fieldTime fieldDatetime-local fieldMonth fieldWeek fieldFile fieldRange fieldSelectsSelect boxItem oneItem twoItem threeItem fourItem fiveItem sixItem seven Some help text regarding the select boxRequired select boxMake a selectionItem oneItem twoItem threeItem fourItem fiveItem sixItem sevenRequired select box (no asterisk)Make a selectionItem oneItem twoItem threeItem fourItem fiveItem sixItem sevenMultiple selectOption 1Option 2Option 3Option 4Option 5CheckboxesCheckboxes One Two ThreeRequired checkboxes One Two ThreeCheckboxes w/ help text One Two ThreeCheckboxes w/ additional text One Two ThreeThis is some additional text.CheckboxCheckbox (required)Checkbox w/ help textCheckbox w/ additional text This is some additional text.RadiosRadios One Two ThreeRequired radios One Two ThreeRadios w/ help text One Two ThreeRadios w/ additional text One Two ThreeThis is some additional text.RadioRadio (required)Radio w/ help textRadio w/ additional text This is some additional text.OtherTextareaTextarea (prefilled)Some prefilled content... Some help text regarding the textarea with some really long text that should overflow and wrapTablesTable with inputs and buttonsTable TitleColumn 1Column 2Column 31Button 1Button 22Button 1Button 23Button 1Button 2Table using colgroups to define column widthTable TitleColumn 1Column 2Column 320%50%30%Nested fieldsetsFieldset 1InputHere is some subtext.Input 2Here's some small subtext.Input 3Here's some bold subtext.Input 4Here is some subtext.Here is some more subtext.Fieldset 2Input 1Input 2SelectHeyFieldset 3Input AInput BInput CInput DColspan classescolspan-1colspan-1colspan-2colspan-4colspan-3colspan-1colspan-fullcolspan-5colspan-1Input AInput BInput CInput Dcolspan-2Input AInput BInput CInput Dcolspan-3Input AInput BInput CInput Dcolspan-fullInput AInput BInput CInput DDetail elementDetail inputDetail inputDetail inputDetail inputAnother detail element with a nested fieldsetDetail inputNested fieldsetNested fieldset input Flexbox button layout pattern with two submit buttons:Button 1Flexbox button layout pattern with three submit buttons:Button 1Button 2P tag elements CheckboxText input Textarea ButtonSome regular text with other elements inside of itNon-form related HTML elementsThis is some regular HTML that should not be affected by any semantic forms stylesThis is a divThis is a block quoteA link to the semantic forms repounordered list 1unordered list 2unordered list 3ordered list 1ordered list 2ordered list 3menu list 1menu list 2menu list 3description list titledescription list valueDetails summarySome detail textTable with semanticForms classTable TitleColumn 1Column 2Column 31Button 1Button 22Button 1Button 23Button 1Button 2Table with a form in a cellTable TitleColumn 1Column 2Some textSubmit buttonUnstyled tableTable TitleColumn 1Column 2Column 31Aa2Bb3CcLow flow (JavaScript disabled) stylingAdding the lowFlow class to the form element removes all JS enhancements.NamePrefilled fieldNo placeholderPassword fieldPassword should be at least 8 characters long.Single form inputFieldset legendEmail fieldTelephone fieldURL fieldSearch fieldNumberInput with label help text Some help textInvalid fieldValid fieldRequired fieldSelect boxItem oneItem twoItem threeItem fourItem fiveItem sixItem seven Some help text regarding the select boxCheckboxes One Two ThreeSingle checkboxRadios One Two ThreeColor fieldDate fieldTime fieldDatetime-local fieldMonth fieldWeek fieldFile fieldRange fieldTextareaTextarea (prefilled)Some prefilled content... Some help text regarding the textarea with some really long text that should overflow and wrapNested fieldsetInputHere is some subtext.Input 2Here's some small subtext.Input 3Here's some bold subtext.Input 4Here is some subtext.Here is some more subtext.Another nested fieldsetInputInput 2SelectHeyColspan classescolspan-1colspan-1colspan-2colspan-4colspan-3colspan-1colspan-fullcolspan-5colspan-1Input AInput BInput Ccolspan-2Input AInput BInput Ccolspan-3Input AInput BInput CInput Dcolspan-4Input AInput BInput CInput DInput Ecolspan-5Input AInput BInput CInput DInput EInput FDetails summaryDetail inputDetail inputDetail inputDetail inputAnother details elementDetail inputP tag elements CheckboxText input Textarea ButtonSome regular text with other elements inside of it Flexbox button layout pattern with two submit buttons:Button 1Flexbox button layout pattern with three submit buttons:Button 1Button 2Non-form related HTML elementsThis is some regular HTML that should not be affected by any semantic forms stylesThis is a divThis is a block quoteA link to the semantic forms repounordered list 1unordered list 2unordered list 3ordered list 1ordered list 2ordered list 3menu list 1menu list 2menu list 3description list titledescription list valueDetails summarySome detail text"})
window.siteTexts.push({file: "docs/semantic-forms/5.1.2/usage/index.html", title: "Semantic Forms — usage (5.1.2)", text: "Installnpm install semantic-formsThe package is distributed with the following builds available:dist/semantic-forms.cjs: CommonJS bundle: const semanticForms = require('semantic-forms')dist/semantic-forms.js: Standalone bundle that can be included via <script> tags. Declares a global variable called: semanticFormsdist/semantic-forms.min.js: Minified standalone bundle that can be included via <p> tags. Declares a global variable called: semanticFormsdist/semantic-forms.mjs: ES module: import semanticForms from 'semantic-forms'dist/semantic-forms.min.mjs: Minified ES module: import semanticForms from 'semantic-forms/min'UseInclude the dist/semantic-forms.css and whichever of the above versions of the JS file you prefer from this repo into your project.Then apply the semanticForms class to your <form> elements:<form class=\"semanticForms\">   <!-- your form here --> </form>Then apply the JavaScript enhancements:semanticForms()Then the CSS/JS enhancements to your forms will apply automatically, assuming the markup structure you use is one of the supported patterns.If you make changes to the DOM after Semantic Forms is activated and want to activate any additional semanticForms forms you insert, you can re-scan for new forms by calling semanticForms.reinitialize() again. If you only want to reinitialize one form instead of all of them, call semanticForms.reinitialize(formElement).FeaturesFloat label inputsThe float label input pattern is notoriously difficult to implement in a fashion that doesn't degrade HTML semantics or accessibility. This pattern library implements a solution that solves that problem. Your label doesn't need to be a sibling of your input like with other implementations. This implementation also has a custom clear button for each input.Example<form class=\"semanticForms\">   <dl>     <dt><label for=\"name\">Name</label></dt>     <dd><input id=\"name\" name=\"name\" type=\"text\" placeholder=\"e.g. John Smith\"></dd>   </dl> </form>NameOr with a <textarea><form class=\"semanticForms\">   <dl>     <dt><label for=\"textarea\">Textarea</label></dt>     <dd><textarea id=\"textarea\" name=\"textarea\" rows=\"5\" cols=\"50\" placeholder=\"e.g. Long string of text\"></textarea></dd>   </dl> </form>TextareaAdd help textInclude a label in the <dd> element with a matching for attribute to place help text beneath the input:<form class=\"semanticForms\" method=\"post\">   <dl>     <dt><label for=\"password\">Password</label></dt>     <dd>       <input id=\"password\" name=\"password\" type=\"password\" placeholder=\"Enter a password\" minlength=\"8\" required autocomplete=\"off\">       <label for=\"password\">Must be at least 8 characters long.</label>     </dd>   </dl> </form>Password Must be at least 8 characters long.Customizing input fieldsBy default, input fields will display an X icon to clear the text and password fields will also display a show/hide toggle for displaying the password in plain text. You can customize this behavior as follows:Customize the hover text of the clear field button by applying a data-clear-field-text=\"your text\" attribute to the input.Customize the hover text of the show password button by applying a data-show-password-text=\"your text\" attribute to the input.Customize the hover text of the hide password button by applying a data-hide-password-text=\"your text\" attribute to the input.Prevent the show/hide toggle from appearing on password fields by applying a data-no-reveal attribute to the input.Show a help text icon next to labels of inputs that contain a title attribute by applying a data-show-help-icon attribute to the label.Note that checkboxes and radios should have a title attribute on the label instead of the inputs.Responsive columnsThis feature makes it so the form fields will grow, shrink, expand the number of columns, or reduce the number of columns based on how much space exists in the container. You can customize it by applying various colspan-# classes to various elements in the form markup structure.Set number of columns for a group of formsYou can limit the number of columns on your forms using the colspan-# class on a <dl> element:<form class=\"semanticForms\">   <dl class=\"colspan-2\">     <dt><label for=\"input-a\">Input A</label></dt>     <dd><input type=\"text\" id=\"input-a\" name=\"input-a\"></dd>      <dt><label for=\"input-b\">Input B</label></dt>     <dd><input type=\"text\" id=\"input-b\" name=\"input-b\"></dd>      <!-- wraps to the next row -->     <dt><label for=\"input-c\">Input C</label></dt>     <dd><input type=\"text\" id=\"input-c\" name=\"input-c\"></dd>   </dl> </form>Input AInput BInput CYou can also apply the class to a <fieldset> which will apply that styling to all nested <dl> elements:<form class=\"semanticForms\">   <fieldset class=\"colspan-3\">     <!-- inherits 3 column class -->     <dl>       <dt><label for=\"f-ex-input-a\">Input A</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-a\" name=\"f-ex-input-a\"></dd>        <dt><label for=\"f-ex-input-b\">Input B</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-b\" name=\"f-ex-input-b\"></dd>        <dt><label for=\"f-ex-input-c\">Input C</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-c\" name=\"f-ex-input-c\"></dd>     </dl>      <!-- has 4 columns -->     <dl class=\"colspan-4\">       <dt><label for=\"f-ex-input-d\">Input D</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-d\" name=\"f-ex-input-d\"></dd>        <dt><label for=\"f-ex-input-e\">Input E</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-e\" name=\"f-ex-input-e\"></dd>        <dt><label for=\"f-ex-input-f\">Input F</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-f\" name=\"f-ex-input-f\"></dd>     </dl>   </fieldset> </form>Input AInput BInput CInput DInput EInput FSet number of columns a single input field takes upYou can specify the number of columns an input will span using the colspan-# class on the <dd> element. The inputs are responsive and will shrink according to available space. Available numbered classes are colspan-1 through colspan-5:<form class=\"semanticForms\">   <fieldset>     <dl>       <dt><label for=\"cspan-ex-input-a\">Input A</label></dt>       <!-- 1 column -->       <dd class=\"colspan-1\"><input type=\"text\" id=\"cspan-ex-input-a\" name=\"cspan-ex-input-a\"></dd>        <dt><label for=\"cspan-ex-input-b\">Input B</label></dt>       <!-- 2 columns  -->       <dd class=\"colspan-2\"><input type=\"text\" id=\"cspan-ex-input-b\" name=\"cspan-ex-input-b\"></dd>        <dt><label for=\"cspan-ex-input-c\">Input C</label></dt>       <!-- 5 columns (max) -->       <dd class=\"colspan-5\"><input type=\"text\" id=\"cspan-ex-input-c\" name=\"cspan-ex-input-c\"></dd>     </dl>   </fieldset> </form>Input AInput BInput Ccolspan-full can also be used to force an input to take up the entire width of a form:<form class=\"semanticForms\">   <fieldset>     <dl>       <dt><label for=\"cspanfull-ex-input-a\">Input A</label></dt>       <!-- this spans 2 columns on row 1 -->       <dd class=\"colspan-2\"><input type=\"text\" id=\"cspanfull-ex-input-a\" name=\"cspanfull-ex-input-a\"></dd>        <dt><label for=\"cspanfull-ex-input-b\">Input B</label></dt>       <!-- this spans the full width of row 2 -->       <dd class=\"colspan-full\"><input type=\"text\" id=\"cspanfull-ex-input-b\" name=\"cspanfull-ex-input-b\"></dd>        <!-- this spans 1 column on row 3 -->       <dt><label for=\"cspanfull-ex-input-c\">Input C</label></dt>       <dd><input type=\"text\" id=\"cspanfull-ex-input-c\" name=\"cspanfull-ex-input-c\"></dd>     </dl>   </fieldset> </form>Input AInput BInput CButton groupsYou can align buttons side-by-side, or in left/right/center groups.Non-grouped exampleNothing fancy here:<form class=\"semanticForms\" method=\"post\">   <button type=\"submit\" name=\"submit\">Non-grouped submit button</button>   <button type=\"submit\" name=\"submit\">Another one</button> </form>Non-grouped submit button Another oneButton groupsDriven by flexbox to intelligently align the buttons based on how many are in the group:<form class=\"semanticForms\" method=\"post\">   <!-- aligns left/right -->   <menu>     <li><button type=\"submit\" name=\"submit\">Button 1</button></li>     <li><button type=\"submit\" name=\"submit\">Button 2</button></li>   </menu>    <!-- aligns left/center/right -->   <menu>     <li><button type=\"submit\" name=\"submit\">Button 1</button></li>     <li><button type=\"submit\" name=\"submit\">Button 2</button></li>     <li><button type=\"submit\" name=\"submit\">Button 3</button></li>   </menu> </form>Button 1Button 2Button 1Button 2Button 3Checkboxes and radio buttonsCheckboxes and radio buttons need to follow the following markup structure:A single checkboxNot too different than other inputs:<form class=\"semanticForms\">   <dl>     <dt><label for=\"some_field_name\">Single checkbox</label></dt>     <dd><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name\"></dd>   </dl> </form>Single checkboxCheckbox group<form class=\"semanticForms\">   <dl>     <dt><label data-for=\"some_checkboxes\">Checkboxes:</label></dt>     <dd class=\"checkboxes\">       <ul id=\"some_checkboxes\">         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_one\"> <label for=\"some_field_name_checkboxes_one\">One</label></li>         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_two\"> <label for=\"some_field_name_checkboxes_two\">Two</label></li>         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_three\"> <label for=\"some_field_name_checkboxes_three\">Three</label></li>       </ul>     </dd>   </dl> </form>Checkboxes: One Two ThreeRadio buttons<form class=\"semanticForms\">   <dl>     <dt><label data-for=\"some_radios\">Radios:</label></dt>     <dd class=\"radios\">       <ul id=\"some_radios\">         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_one\"> <label for=\"some_field_name_radios_one\">One</label></li>         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_two\"> <label for=\"some_field_name_radios_two\">Two</label></li>         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_three\"> <label for=\"some_field_name_radios_three\">Three</label></li>       </ul>     </dd>   </dl> </form>Radios: One Two ThreeValidation stylesInputs with the required attribute will result in a visual indicator (*) being added to its label. You can disable this indicator with the data-no-asterisk attribute on the label element:<form class=\"semanticForms\">   <dl>     <dt><label for=\"input\" data-no-asterisk>Input label</label></dt>     <dd><input type=\"text\" name=\"input\" id=\"input\" required>   </dl> </form>Input labelYou can set a paragraph of text below a field to only appear when a field is invalid with the data-invalid-text attribute:<form class=\"semanticForms\" method=\"post\">   <dl>     <dt><label for=\"password_validation\">Password label</label></dt>     <dd>       <input type=\"password\" name=\"password\" id=\"password_validation\" minlength=\"8\" autocomplete=\"off\">       <p data-invalid-text>Password must be at least 8 characters long.</p>     </dd>   </dl> </form>Password labelPassword must be at least 8 characters long.You can adjust the tooltip text of the asterisk with the data-asterisk-text attribute:<form class=\"semanticForms\">   <dl>     <dt><label for=\"input_validation\" data-asterisk-text=\"This is a custom tooltip.\">Input label</label></dt>     <dd><input type=\"text\" name=\"input\" id=\"input_validation\" required>   </dl> </form>Input labelLight mode and dark modeLight mode and dark mode will be detected automatically based on operating system preference. To set it manually, you can apply an additional class of light or dark to your <form> elements to force the mode.Low flow (JavaScript disabled) modeThe low flow will be displayed if JS is disabled.You can also activate the low flow (JavaScript disabled) mode manually by adding the lowFlow class to your <form> element.The low-flow mode reverts the float label pattern to traditional labels and doesn't include other JS-exclusive enhancements, but preserves the other visual design enhancements driven purely by CSS.Overriding default stylesThe most convenient way to override the default styles in Semantic Forms is to override the built-in CSS variables.For example:form.semanticForms {   /* will overwrite the default semantic-forms values */   --semanticFormsFontFamily: monospace;   --semanticFormsTextColor: blue;   --semanticFormsInputMinWidth: 300px; }For a complete list of CSS variables you can override, see the top of semanticForms.scss.MoreSee a page demoing all features here."})
window.siteTexts.push({file: "docs/semantic-forms/5.1.3/changelog/index.html", title: "Semantic Forms — changelog (5.1.3)", text: "5.1.3Added support for range inputs that display their value as you slide it around.Updated dependencies.5.1.2Added a search icon to search inputs.Added support for select elements with the multiple attribute.Added styling to tables within a form, or tables with the semanticForm class.Fixed missing styles on single radios.Fixed a bug that caused additional text labels to not work on checkbox groups, single checkboxes, and radios.Fixed alignment issues on checkbox and radio groups.Updated dependencies.5.1.1Fixed broken low flow styling.Fixed a visual bug on button gradients in Firefox.Fixed background styling on nested fieldsets within <detail> elements.Updated dependencies.5.1.0Added ability to more conveniently override default CSS via additional CSS variables.Updated all CSS variables to be prefixed with semanticForms (i.e. --semanticFormsFontFamily) to minimize the chance of naming collisions with the rest of your CSS.Fixed bug that prevented input label ellipses from being responsive to the input width.Updated dependencies.5.0.10Fixed bug causing active styles to apply to focused buttons.Updated dependencies.5.0.9Fixed bug causing native clear field to appear on search inputs.Updated dependencies.5.0.8Altered dark mode support so that it does not apply if the <html> or <body> tag has a class of \"light\".Updated dependencies.5.0.7Fixed a bug where the responsive grid layout would not always line up correctly.Fixed a bug that prevented text from being longer than input element, causing graphical errors.Updated dependencies.5.0.6Added slicker live demo docs.Fixed a bug causing dark mode not to respect OS preference.Updated dependencies.5.0.5Added better error handling to the JS.Updated dependencies.5.0.4Fixed a periodic JS error.5.0.3Fixed a bug that prevented semantic-forms from detecting when you inserted new forms into the page.Updated dependencies.5.0.2Fixed a bug that would cause errors when reinitialize() was called.Fixed a bug that caused nested selects to lose their dropdown icon.Fixed a bug where required single checkboxes would not show an asterisk.Added a help text icon beside labels with a title attribute on their respective inputs, or on labels for checkboxes and radios. Enabled with a data-show-help-icon attribute.Updated various dependencies.5.0.1Fixed a bug that caused some devDependencies to end up in the production build.Updated various dependencies.5.0.0Breaking: Added JS module bundling to make it possible for you to import CJS, ESM, or a standalone version of the JavaScript in this library to your project. However you will need to change your imports to match the new file names. See README for details.Added show/hide toggle to password fields which can be disabled with a data-no-reveal attribute.Added hover text for the clear field button and the show/hide password button.Added ability to customize clear field button hover text and show/hide password button hover text using data attributes as well.Added support for undo/redo keyboard commands when pressing the clear field.Added test suite.Fixed some accessibility issues.Updated various dependencies.4.0.4Fixed a bug that caused menu items with buttons to appear as a list.Updated various dependencies.4.0.3Fixed bug in which a form entry consisting of a single checkbox would be misaligned.Fixed bug that prevented some inputs from expanding to the width of its container.Fixed bug in which CSS reset for elements within a semantic forms form was overly aggressive, making it harder to style unrelated content within such a form.Updated various dependencies.4.0.2Fixed a visual bug that occurred when single checkbox elements had extra elements included.Updated various dependencies.4.0.1Added invalid help text support.Fixed a bug that caused float labels to break when certain browser extensions were enabled.4.0.0Breaking: Overhauled entire codebase to drive it using mostly CSS grid instead of flexbox. This makes everything more flexible overall and fit more designs better. However the CSS and markup changes will likely cause breaking changes to previous integrations, so when upgrading make some time to visually test all your pages to alter any CSS overrides you had in place accordingly. You also might want to make some markup changes to make use of new available classes to tweak the fit of individual form fields on specific forms.Altered fields to fit available space better at various screen sizes.Added multiple utility classes that define how wide inputs will span in the responsive layout.Added support for input type=image.Added support for secondary labels.Added styling for invalid form fields.Added asterisk that appears on required inputs.Improved accessibility considerably. Now has 100% Lighthouse score.Added feature to progressively nest fieldsets with progressively darker/lighter background colors.Fixed bug causing clear button appearing on disabled inputs.Fixed bug causing clear button to overlap with scrollbars on textareas.Fixed bug causing nested fieldset to have incorrect padding and margins.Fixed various other small bugs.Replaced the less CSS preprocessor with sass.Updated various dependencies.3.2.1Fixed a bug that could cause checkboxes and radio buttons to not submit their values to the server properly.Updated various dependencies.3.2.0Added a reinitialization method to re-scan existing forms. Called with window.semanticForms.reinitialize(formName).Altered logic to enhance forms so that it now ignores inputs that have already been enhanced.Updated dependencies.3.1.0Added dark mode support.Deprecated \"reset\" versions and \"no images\" versions.Added mutation observer that monitors changes to the DOM and will enhance any additional semanticForms forms you insert, but the monitoring may not be perfect. If you want to re-scan for new forms to enhance manually, you may still need to call window.semanticForms().Fixed a bug that caused DOM events to be duplicated when DOM elements are added dynamically after the first page load.Updated dependencies.3.0.8Fixed main export on case-sensitive file systems.Updated dependencies.3.0.7Fixed Chrome issue for forms with no placeholder.3.0.6Fixed missing files in npm package.3.0.5Added \"reset\" versions of the CSS files that set all: unset; before applying any semantic forms styles to help avoid conflicts with other CSS. There is a performance degradation to using this technique, so you should only use this if absolutely necessary.3.0.4Reduced size of select box text.3.0.3Fixed issue that prevented id selectors from allowing dots in the string.Fixed issue that prevented the clear field from dispatching an input event.3.0.2Added support for a single checkbox rather than a group of checkboxes.3.0.1Fixed alignment issue.3.0.0Removed default two column layout. Now defaults to as many columns as the container is wide.Added x2 class you can put on dd elements to double the width of a form. Does not apply on small screens.2.1.2Added a function to the JS files's global scope called semanticForms that you can call to initialize new forms that have been added to the DOM since the initial initialization.Updated dependencies.2.1.1Fixed a situation that could lead to a JS error.Fix minor alignment issue.2.1.0Added all input types.Fixed clear field.Fixed markup mistakes in the examples.Fixed CSS to support <menu> elements correctly.Refactored the JavaScript to modernize it.Updated dependencies.2.0.0Replaced <div class=\"buttonGroup\"> with a <menu> element. You will need to refactor your HTML accordingly.Fixed alignment issue caused by browser engines changing their alignment calculations since the first release.Various other refactoring.Pinned deps.Updated dependencies.1.0.5Restricted JS events to target elements within semanticForms class form elements.Switched font sizes to % in case someone finds 16px too small and changes the default font size in the browser, these form fields will no longer stay fixed.Published to npm.Started CHANGELOG.Updated dependencies.1.0.4 and belowHere be dragons…"})
window.siteTexts.push({file: "docs/semantic-forms/5.1.3/fullDemo/index.html", title: "Semantic Forms (5.1.3)", text: "Semantic FormsA pattern library of forms based on semantic HTML enhanced with a modern UX.High flow (JavaScript enabled) stylingNamePrefilled fieldNo placeholderPassword fieldPassword should be at least 8 characters long.Don't show password fieldPassword should be at least 8 characters long.Customize clear/show buttonsPassword should be at least 8 characters long.Single form inputFieldset legendInputsEmail fieldTelephone fieldURL fieldSearch fieldNumberInput with label help text Some help textInput with help iconRequired input with help iconInvalid fieldValid fieldRequired fieldRequired field (no asterisk)Required field (custom title)Disabled inputDisabled input w/ valueColor fieldDate fieldTime fieldDatetime-local fieldMonth fieldWeek fieldFile fieldRange fieldRange valueSelectsSelect boxItem oneItem twoItem threeItem fourItem fiveItem sixItem seven Some help text regarding the select boxRequired select boxMake a selectionItem oneItem twoItem threeItem fourItem fiveItem sixItem sevenRequired select box (no asterisk)Make a selectionItem oneItem twoItem threeItem fourItem fiveItem sixItem sevenMultiple selectOption 1Option 2Option 3Option 4Option 5CheckboxesCheckboxes One Two ThreeRequired checkboxes One Two ThreeCheckboxes w/ help text One Two ThreeCheckboxes w/ additional text One Two ThreeThis is some additional text.CheckboxCheckbox (required)Checkbox w/ help textCheckbox w/ additional text This is some additional text.RadiosRadios One Two ThreeRequired radios One Two ThreeRadios w/ help text One Two ThreeRadios w/ additional text One Two ThreeThis is some additional text.RadioRadio (required)Radio w/ help textRadio w/ additional text This is some additional text.OtherTextareaTextarea (prefilled)Some prefilled content... Some help text regarding the textarea with some really long text that should overflow and wrapTablesTable with inputs and buttonsTable TitleColumn 1Column 2Column 31Button 1Button 22Button 1Button 23Button 1Button 2Table using colgroups to define column widthTable TitleColumn 1Column 2Column 320%50%30%Nested fieldsetsFieldset 1InputHere is some subtext.Input 2Here's some small subtext.Input 3Here's some bold subtext.Input 4Here is some subtext.Here is some more subtext.Fieldset 2Input 1Input 2SelectHeyFieldset 3Input AInput BInput CInput DColspan classescolspan-1colspan-1colspan-2colspan-4colspan-3colspan-1colspan-fullcolspan-5colspan-1Input AInput BInput CInput Dcolspan-2Input AInput BInput CInput Dcolspan-3Input AInput BInput CInput Dcolspan-fullInput AInput BInput CInput DDetail elementDetail inputDetail inputDetail inputDetail inputAnother detail element with a nested fieldsetDetail inputNested fieldsetNested fieldset input Flexbox button layout pattern with two submit buttons:Button 1Flexbox button layout pattern with three submit buttons:Button 1Button 2P tag elements CheckboxText input Textarea ButtonSome regular text with other elements inside of itNon-form related HTML elementsThis is some regular HTML that should not be affected by any semantic forms stylesThis is a divThis is a block quoteA link to the semantic forms repounordered list 1unordered list 2unordered list 3ordered list 1ordered list 2ordered list 3menu list 1menu list 2menu list 3description list titledescription list valueDetails summarySome detail textTable with semanticForms classTable TitleColumn 1Column 2Column 31Button 1Button 22Button 1Button 23Button 1Button 2Table with a form in a cellTable TitleColumn 1Column 2Some textSubmit buttonUnstyled tableTable TitleColumn 1Column 2Column 31Aa2Bb3CcLow flow (JavaScript disabled) stylingAdding the lowFlow class to the form element removes all JS enhancements.NamePrefilled fieldNo placeholderPassword fieldPassword should be at least 8 characters long.Single form inputFieldset legendEmail fieldTelephone fieldURL fieldSearch fieldNumberInput with label help text Some help textInvalid fieldValid fieldRequired fieldSelect boxItem oneItem twoItem threeItem fourItem fiveItem sixItem seven Some help text regarding the select boxCheckboxes One Two ThreeSingle checkboxRadios One Two ThreeColor fieldDate fieldTime fieldDatetime-local fieldMonth fieldWeek fieldFile fieldRange fieldTextareaTextarea (prefilled)Some prefilled content... Some help text regarding the textarea with some really long text that should overflow and wrapNested fieldsetInputHere is some subtext.Input 2Here's some small subtext.Input 3Here's some bold subtext.Input 4Here is some subtext.Here is some more subtext.Another nested fieldsetInputInput 2SelectHeyColspan classescolspan-1colspan-1colspan-2colspan-4colspan-3colspan-1colspan-fullcolspan-5colspan-1Input AInput BInput Ccolspan-2Input AInput BInput Ccolspan-3Input AInput BInput CInput Dcolspan-4Input AInput BInput CInput DInput Ecolspan-5Input AInput BInput CInput DInput EInput FDetails summaryDetail inputDetail inputDetail inputDetail inputAnother details elementDetail inputP tag elements CheckboxText input Textarea ButtonSome regular text with other elements inside of it Flexbox button layout pattern with two submit buttons:Button 1Flexbox button layout pattern with three submit buttons:Button 1Button 2Non-form related HTML elementsThis is some regular HTML that should not be affected by any semantic forms stylesThis is a divThis is a block quoteA link to the semantic forms repounordered list 1unordered list 2unordered list 3ordered list 1ordered list 2ordered list 3menu list 1menu list 2menu list 3description list titledescription list valueDetails summarySome detail text"})
window.siteTexts.push({file: "docs/semantic-forms/5.1.3/usage/index.html", title: "Semantic Forms — usage (5.1.3)", text: "Installnpm install semantic-formsThe package is distributed with the following builds available:dist/semantic-forms.cjs: CommonJS bundle: const semanticForms = require('semantic-forms')dist/semantic-forms.js: Standalone bundle that can be included via <script> tags. Declares a global variable called: semanticFormsdist/semantic-forms.min.js: Minified standalone bundle that can be included via <p> tags. Declares a global variable called: semanticFormsdist/semantic-forms.mjs: ES module: import semanticForms from 'semantic-forms'dist/semantic-forms.min.mjs: Minified ES module: import semanticForms from 'semantic-forms/min'UseInclude the dist/semantic-forms.css and whichever of the above versions of the JS file you prefer from this repo into your project.Then apply the semanticForms class to your <form> elements:<form class=\"semanticForms\">   <!-- your form here --> </form>Then apply the JavaScript enhancements:semanticForms()Then the CSS/JS enhancements to your forms will apply automatically, assuming the markup structure you use is one of the supported patterns.If you make changes to the DOM after Semantic Forms is activated and want to activate any additional semanticForms forms you insert, you can re-scan for new forms by calling semanticForms.reinitialize() again. If you only want to reinitialize one form instead of all of them, call semanticForms.reinitialize(formElement).FeaturesFloat label inputsThe float label input pattern is notoriously difficult to implement in a fashion that doesn't degrade HTML semantics or accessibility. This pattern library implements a solution that solves that problem. Your label doesn't need to be a sibling of your input like with other implementations. This implementation also has a custom clear button for each input.Example<form class=\"semanticForms\">   <dl>     <dt><label for=\"name\">Name</label></dt>     <dd><input id=\"name\" name=\"name\" type=\"text\" placeholder=\"e.g. John Smith\"></dd>   </dl> </form>NameOr with a <textarea><form class=\"semanticForms\">   <dl>     <dt><label for=\"textarea\">Textarea</label></dt>     <dd><textarea id=\"textarea\" name=\"textarea\" rows=\"5\" cols=\"50\" placeholder=\"e.g. Long string of text\"></textarea></dd>   </dl> </form>TextareaAdd help textInclude a label in the <dd> element with a matching for attribute to place help text beneath the input:<form class=\"semanticForms\" method=\"post\">   <dl>     <dt><label for=\"password\">Password</label></dt>     <dd>       <input id=\"password\" name=\"password\" type=\"password\" placeholder=\"Enter a password\" minlength=\"8\" required autocomplete=\"off\">       <label for=\"password\">Must be at least 8 characters long.</label>     </dd>   </dl> </form>Password Must be at least 8 characters long.Customizing input fieldsBy default, input fields will display an X icon to clear the text and password fields will also display a show/hide toggle for displaying the password in plain text. You can customize this behavior as follows:Customize the hover text of the clear field button by applying a data-clear-field-text=\"your text\" attribute to the input.Customize the hover text of the show password button by applying a data-show-password-text=\"your text\" attribute to the input.Customize the hover text of the hide password button by applying a data-hide-password-text=\"your text\" attribute to the input.Prevent the show/hide toggle from appearing on password fields by applying a data-no-reveal attribute to the input.Show a help text icon next to labels of inputs that contain a title attribute by applying a data-show-help-icon attribute to the label.Note that checkboxes and radios should have a title attribute on the label instead of the inputs.Responsive columnsThis feature makes it so the form fields will grow, shrink, expand the number of columns, or reduce the number of columns based on how much space exists in the container. You can customize it by applying various colspan-# classes to various elements in the form markup structure.Set number of columns for a group of formsYou can limit the number of columns on your forms using the colspan-# class on a <dl> element:<form class=\"semanticForms\">   <dl class=\"colspan-2\">     <dt><label for=\"input-a\">Input A</label></dt>     <dd><input type=\"text\" id=\"input-a\" name=\"input-a\"></dd>      <dt><label for=\"input-b\">Input B</label></dt>     <dd><input type=\"text\" id=\"input-b\" name=\"input-b\"></dd>      <!-- wraps to the next row -->     <dt><label for=\"input-c\">Input C</label></dt>     <dd><input type=\"text\" id=\"input-c\" name=\"input-c\"></dd>   </dl> </form>Input AInput BInput CYou can also apply the class to a <fieldset> which will apply that styling to all nested <dl> elements:<form class=\"semanticForms\">   <fieldset class=\"colspan-3\">     <!-- inherits 3 column class -->     <dl>       <dt><label for=\"f-ex-input-a\">Input A</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-a\" name=\"f-ex-input-a\"></dd>        <dt><label for=\"f-ex-input-b\">Input B</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-b\" name=\"f-ex-input-b\"></dd>        <dt><label for=\"f-ex-input-c\">Input C</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-c\" name=\"f-ex-input-c\"></dd>     </dl>      <!-- has 4 columns -->     <dl class=\"colspan-4\">       <dt><label for=\"f-ex-input-d\">Input D</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-d\" name=\"f-ex-input-d\"></dd>        <dt><label for=\"f-ex-input-e\">Input E</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-e\" name=\"f-ex-input-e\"></dd>        <dt><label for=\"f-ex-input-f\">Input F</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-f\" name=\"f-ex-input-f\"></dd>     </dl>   </fieldset> </form>Input AInput BInput CInput DInput EInput FSet number of columns a single input field takes upYou can specify the number of columns an input will span using the colspan-# class on the <dd> element. The inputs are responsive and will shrink according to available space. Available numbered classes are colspan-1 through colspan-5:<form class=\"semanticForms\">   <fieldset>     <dl>       <dt><label for=\"cspan-ex-input-a\">Input A</label></dt>       <!-- 1 column -->       <dd class=\"colspan-1\"><input type=\"text\" id=\"cspan-ex-input-a\" name=\"cspan-ex-input-a\"></dd>        <dt><label for=\"cspan-ex-input-b\">Input B</label></dt>       <!-- 2 columns  -->       <dd class=\"colspan-2\"><input type=\"text\" id=\"cspan-ex-input-b\" name=\"cspan-ex-input-b\"></dd>        <dt><label for=\"cspan-ex-input-c\">Input C</label></dt>       <!-- 5 columns (max) -->       <dd class=\"colspan-5\"><input type=\"text\" id=\"cspan-ex-input-c\" name=\"cspan-ex-input-c\"></dd>     </dl>   </fieldset> </form>Input AInput BInput Ccolspan-full can also be used to force an input to take up the entire width of a form:<form class=\"semanticForms\">   <fieldset>     <dl>       <dt><label for=\"cspanfull-ex-input-a\">Input A</label></dt>       <!-- this spans 2 columns on row 1 -->       <dd class=\"colspan-2\"><input type=\"text\" id=\"cspanfull-ex-input-a\" name=\"cspanfull-ex-input-a\"></dd>        <dt><label for=\"cspanfull-ex-input-b\">Input B</label></dt>       <!-- this spans the full width of row 2 -->       <dd class=\"colspan-full\"><input type=\"text\" id=\"cspanfull-ex-input-b\" name=\"cspanfull-ex-input-b\"></dd>        <!-- this spans 1 column on row 3 -->       <dt><label for=\"cspanfull-ex-input-c\">Input C</label></dt>       <dd><input type=\"text\" id=\"cspanfull-ex-input-c\" name=\"cspanfull-ex-input-c\"></dd>     </dl>   </fieldset> </form>Input AInput BInput CButton groupsYou can align buttons side-by-side, or in left/right/center groups.Non-grouped exampleNothing fancy here:<form class=\"semanticForms\" method=\"post\">   <button type=\"submit\" name=\"submit\">Non-grouped submit button</button>   <button type=\"submit\" name=\"submit\">Another one</button> </form>Non-grouped submit button Another oneButton groupsDriven by flexbox to intelligently align the buttons based on how many are in the group:<form class=\"semanticForms\" method=\"post\">   <!-- aligns left/right -->   <menu>     <li><button type=\"submit\" name=\"submit\">Button 1</button></li>     <li><button type=\"submit\" name=\"submit\">Button 2</button></li>   </menu>    <!-- aligns left/center/right -->   <menu>     <li><button type=\"submit\" name=\"submit\">Button 1</button></li>     <li><button type=\"submit\" name=\"submit\">Button 2</button></li>     <li><button type=\"submit\" name=\"submit\">Button 3</button></li>   </menu> </form>Button 1Button 2Button 1Button 2Button 3Checkboxes and radio buttonsCheckboxes and radio buttons need to follow the following markup structure:A single checkboxNot too different than other inputs:<form class=\"semanticForms\">   <dl>     <dt><label for=\"some_field_name\">Single checkbox</label></dt>     <dd><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name\"></dd>   </dl> </form>Single checkboxCheckbox group<form class=\"semanticForms\">   <dl>     <dt><label data-for=\"some_checkboxes\">Checkboxes:</label></dt>     <dd class=\"checkboxes\">       <ul id=\"some_checkboxes\">         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_one\"> <label for=\"some_field_name_checkboxes_one\">One</label></li>         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_two\"> <label for=\"some_field_name_checkboxes_two\">Two</label></li>         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_three\"> <label for=\"some_field_name_checkboxes_three\">Three</label></li>       </ul>     </dd>   </dl> </form>Checkboxes: One Two ThreeRadio buttons<form class=\"semanticForms\">   <dl>     <dt><label data-for=\"some_radios\">Radios:</label></dt>     <dd class=\"radios\">       <ul id=\"some_radios\">         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_one\"> <label for=\"some_field_name_radios_one\">One</label></li>         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_two\"> <label for=\"some_field_name_radios_two\">Two</label></li>         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_three\"> <label for=\"some_field_name_radios_three\">Three</label></li>       </ul>     </dd>   </dl> </form>Radios: One Two ThreeValidation stylesInputs with the required attribute will result in a visual indicator (*) being added to its label. You can disable this indicator with the data-no-asterisk attribute on the label element:<form class=\"semanticForms\">   <dl>     <dt><label for=\"input\" data-no-asterisk>Input label</label></dt>     <dd><input type=\"text\" name=\"input\" id=\"input\" required>   </dl> </form>Input labelYou can set a paragraph of text below a field to only appear when a field is invalid with the data-invalid-text attribute:<form class=\"semanticForms\" method=\"post\">   <dl>     <dt><label for=\"password_validation\">Password label</label></dt>     <dd>       <input type=\"password\" name=\"password\" id=\"password_validation\" minlength=\"8\" autocomplete=\"off\">       <p data-invalid-text>Password must be at least 8 characters long.</p>     </dd>   </dl> </form>Password labelPassword must be at least 8 characters long.You can adjust the tooltip text of the asterisk with the data-asterisk-text attribute:<form class=\"semanticForms\">   <dl>     <dt><label for=\"input_validation\" data-asterisk-text=\"This is a custom tooltip.\">Input label</label></dt>     <dd><input type=\"text\" name=\"input\" id=\"input_validation\" required>   </dl> </form>Input labelRange inputs that display valuesAdd a class of displayValue to any <input type=\"range\"> element to make its value display on the label:<form class=\"semanticForms\">   <dl>     <dt><label for=\"rangeValue\">Range value</label></dt>     <dd><input id=\"rangeValue\" name=\"rangeValue\" type=\"range\" class=\"displayValue\"></dd>   </dl> </form>Range valueLight mode and dark modeLight mode and dark mode will be detected automatically based on operating system preference. To set it manually, you can apply an additional class of light or dark to your <form> elements to force the mode.Low flow (JavaScript disabled) modeThe low flow will be displayed if JS is disabled.You can also activate the low flow (JavaScript disabled) mode manually by adding the lowFlow class to your <form> element.The low-flow mode reverts the float label pattern to traditional labels and doesn't include other JS-exclusive enhancements, but preserves the other visual design enhancements driven purely by CSS.Overriding default stylesThe most convenient way to override the default styles in Semantic Forms is to override the built-in CSS variables.For example:form.semanticForms {   /* will overwrite the default semantic-forms values */   --semanticFormsFontFamily: monospace;   --semanticFormsTextColor: blue;   --semanticFormsInputMinWidth: 300px; }For a complete list of CSS variables you can override, see the top of semanticForms.scss.MoreSee a page demoing all features here."})
window.siteTexts.push({file: "docs/semantic-forms/5.1.4/changelog/index.html", title: "Semantic Forms — changelog (5.1.4)", text: "5.1.4Fixed clipped help icon on Firefox.Updated dependencies.5.1.3Added support for range inputs that display their value as you slide it around.Updated dependencies.5.1.2Added a search icon to search inputs.Added support for select elements with the multiple attribute.Added styling to tables within a form, or tables with the semanticForm class.Fixed missing styles on single radios.Fixed a bug that caused additional text labels to not work on checkbox groups, single checkboxes, and radios.Fixed alignment issues on checkbox and radio groups.Updated dependencies.5.1.1Fixed broken low flow styling.Fixed a visual bug on button gradients in Firefox.Fixed background styling on nested fieldsets within <detail> elements.Updated dependencies.5.1.0Added ability to more conveniently override default CSS via additional CSS variables.Updated all CSS variables to be prefixed with semanticForms (i.e. --semanticFormsFontFamily) to minimize the chance of naming collisions with the rest of your CSS.Fixed bug that prevented input label ellipses from being responsive to the input width.Updated dependencies.5.0.10Fixed bug causing active styles to apply to focused buttons.Updated dependencies.5.0.9Fixed bug causing native clear field to appear on search inputs.Updated dependencies.5.0.8Altered dark mode support so that it does not apply if the <html> or <body> tag has a class of \"light\".Updated dependencies.5.0.7Fixed a bug where the responsive grid layout would not always line up correctly.Fixed a bug that prevented text from being longer than input element, causing graphical errors.Updated dependencies.5.0.6Added slicker live demo docs.Fixed a bug causing dark mode not to respect OS preference.Updated dependencies.5.0.5Added better error handling to the JS.Updated dependencies.5.0.4Fixed a periodic JS error.5.0.3Fixed a bug that prevented semantic-forms from detecting when you inserted new forms into the page.Updated dependencies.5.0.2Fixed a bug that would cause errors when reinitialize() was called.Fixed a bug that caused nested selects to lose their dropdown icon.Fixed a bug where required single checkboxes would not show an asterisk.Added a help text icon beside labels with a title attribute on their respective inputs, or on labels for checkboxes and radios. Enabled with a data-show-help-icon attribute.Updated various dependencies.5.0.1Fixed a bug that caused some devDependencies to end up in the production build.Updated various dependencies.5.0.0Breaking: Added JS module bundling to make it possible for you to import CJS, ESM, or a standalone version of the JavaScript in this library to your project. However you will need to change your imports to match the new file names. See README for details.Added show/hide toggle to password fields which can be disabled with a data-no-reveal attribute.Added hover text for the clear field button and the show/hide password button.Added ability to customize clear field button hover text and show/hide password button hover text using data attributes as well.Added support for undo/redo keyboard commands when pressing the clear field.Added test suite.Fixed some accessibility issues.Updated various dependencies.4.0.4Fixed a bug that caused menu items with buttons to appear as a list.Updated various dependencies.4.0.3Fixed bug in which a form entry consisting of a single checkbox would be misaligned.Fixed bug that prevented some inputs from expanding to the width of its container.Fixed bug in which CSS reset for elements within a semantic forms form was overly aggressive, making it harder to style unrelated content within such a form.Updated various dependencies.4.0.2Fixed a visual bug that occurred when single checkbox elements had extra elements included.Updated various dependencies.4.0.1Added invalid help text support.Fixed a bug that caused float labels to break when certain browser extensions were enabled.4.0.0Breaking: Overhauled entire codebase to drive it using mostly CSS grid instead of flexbox. This makes everything more flexible overall and fit more designs better. However the CSS and markup changes will likely cause breaking changes to previous integrations, so when upgrading make some time to visually test all your pages to alter any CSS overrides you had in place accordingly. You also might want to make some markup changes to make use of new available classes to tweak the fit of individual form fields on specific forms.Altered fields to fit available space better at various screen sizes.Added multiple utility classes that define how wide inputs will span in the responsive layout.Added support for input type=image.Added support for secondary labels.Added styling for invalid form fields.Added asterisk that appears on required inputs.Improved accessibility considerably. Now has 100% Lighthouse score.Added feature to progressively nest fieldsets with progressively darker/lighter background colors.Fixed bug causing clear button appearing on disabled inputs.Fixed bug causing clear button to overlap with scrollbars on textareas.Fixed bug causing nested fieldset to have incorrect padding and margins.Fixed various other small bugs.Replaced the less CSS preprocessor with sass.Updated various dependencies.3.2.1Fixed a bug that could cause checkboxes and radio buttons to not submit their values to the server properly.Updated various dependencies.3.2.0Added a reinitialization method to re-scan existing forms. Called with window.semanticForms.reinitialize(formName).Altered logic to enhance forms so that it now ignores inputs that have already been enhanced.Updated dependencies.3.1.0Added dark mode support.Deprecated \"reset\" versions and \"no images\" versions.Added mutation observer that monitors changes to the DOM and will enhance any additional semanticForms forms you insert, but the monitoring may not be perfect. If you want to re-scan for new forms to enhance manually, you may still need to call window.semanticForms().Fixed a bug that caused DOM events to be duplicated when DOM elements are added dynamically after the first page load.Updated dependencies.3.0.8Fixed main export on case-sensitive file systems.Updated dependencies.3.0.7Fixed Chrome issue for forms with no placeholder.3.0.6Fixed missing files in npm package.3.0.5Added \"reset\" versions of the CSS files that set all: unset; before applying any semantic forms styles to help avoid conflicts with other CSS. There is a performance degradation to using this technique, so you should only use this if absolutely necessary.3.0.4Reduced size of select box text.3.0.3Fixed issue that prevented id selectors from allowing dots in the string.Fixed issue that prevented the clear field from dispatching an input event.3.0.2Added support for a single checkbox rather than a group of checkboxes.3.0.1Fixed alignment issue.3.0.0Removed default two column layout. Now defaults to as many columns as the container is wide.Added x2 class you can put on dd elements to double the width of a form. Does not apply on small screens.2.1.2Added a function to the JS files's global scope called semanticForms that you can call to initialize new forms that have been added to the DOM since the initial initialization.Updated dependencies.2.1.1Fixed a situation that could lead to a JS error.Fix minor alignment issue.2.1.0Added all input types.Fixed clear field.Fixed markup mistakes in the examples.Fixed CSS to support <menu> elements correctly.Refactored the JavaScript to modernize it.Updated dependencies.2.0.0Replaced <div class=\"buttonGroup\"> with a <menu> element. You will need to refactor your HTML accordingly.Fixed alignment issue caused by browser engines changing their alignment calculations since the first release.Various other refactoring.Pinned deps.Updated dependencies.1.0.5Restricted JS events to target elements within semanticForms class form elements.Switched font sizes to % in case someone finds 16px too small and changes the default font size in the browser, these form fields will no longer stay fixed.Published to npm.Started CHANGELOG.Updated dependencies.1.0.4 and belowHere be dragons…"})
window.siteTexts.push({file: "docs/semantic-forms/5.1.4/fullDemo/index.html", title: "Semantic Forms (5.1.4)", text: "Semantic FormsA pattern library of forms based on semantic HTML enhanced with a modern UX.High flow (JavaScript enabled) stylingNamePrefilled fieldNo placeholderPassword fieldPassword should be at least 8 characters long.Don't show password fieldPassword should be at least 8 characters long.Customize clear/show buttonsPassword should be at least 8 characters long.Single form inputFieldset legendInputsEmail fieldTelephone fieldURL fieldSearch fieldNumberInput with label help text Some help textInput with help iconRequired input with help iconInvalid fieldValid fieldRequired fieldRequired field (no asterisk)Required field (custom title)Disabled inputDisabled input w/ valueColor fieldDate fieldTime fieldDatetime-local fieldMonth fieldWeek fieldFile fieldRange fieldRange valueSelectsSelect boxItem oneItem twoItem threeItem fourItem fiveItem sixItem seven Some help text regarding the select boxRequired select boxMake a selectionItem oneItem twoItem threeItem fourItem fiveItem sixItem sevenRequired select box (no asterisk)Make a selectionItem oneItem twoItem threeItem fourItem fiveItem sixItem sevenMultiple selectOption 1Option 2Option 3Option 4Option 5CheckboxesCheckboxes One Two ThreeRequired checkboxes One Two ThreeCheckboxes w/ help text One Two ThreeCheckboxes w/ additional text One Two ThreeThis is some additional text.CheckboxCheckbox (required)Checkbox w/ help textCheckbox w/ additional text This is some additional text.RadiosRadios One Two ThreeRequired radios One Two ThreeRadios w/ help text One Two ThreeRadios w/ additional text One Two ThreeThis is some additional text.RadioRadio (required)Radio w/ help textRadio w/ additional text This is some additional text.OtherTextareaTextarea (prefilled)Some prefilled content... Some help text regarding the textarea with some really long text that should overflow and wrapTablesTable with inputs and buttonsTable TitleColumn 1Column 2Column 31Button 1Button 22Button 1Button 23Button 1Button 2Table using colgroups to define column widthTable TitleColumn 1Column 2Column 320%50%30%Nested fieldsetsFieldset 1InputHere is some subtext.Input 2Here's some small subtext.Input 3Here's some bold subtext.Input 4Here is some subtext.Here is some more subtext.Fieldset 2Input 1Input 2SelectHeyFieldset 3Input AInput BInput CInput DColspan classescolspan-1colspan-1colspan-2colspan-4colspan-3colspan-1colspan-fullcolspan-5colspan-1Input AInput BInput CInput Dcolspan-2Input AInput BInput CInput Dcolspan-3Input AInput BInput CInput Dcolspan-fullInput AInput BInput CInput DDetail elementDetail inputDetail inputDetail inputDetail inputAnother detail element with a nested fieldsetDetail inputNested fieldsetNested fieldset input Flexbox button layout pattern with two submit buttons:Button 1Flexbox button layout pattern with three submit buttons:Button 1Button 2P tag elements CheckboxText input Textarea ButtonSome regular text with other elements inside of itNon-form related HTML elementsThis is some regular HTML that should not be affected by any semantic forms stylesThis is a divThis is a block quoteA link to the semantic forms repounordered list 1unordered list 2unordered list 3ordered list 1ordered list 2ordered list 3menu list 1menu list 2menu list 3description list titledescription list valueDetails summarySome detail textTable with semanticForms classTable TitleColumn 1Column 2Column 31Button 1Button 22Button 1Button 23Button 1Button 2Table with a form in a cellTable TitleColumn 1Column 2Some textSubmit buttonUnstyled tableTable TitleColumn 1Column 2Column 31Aa2Bb3CcLow flow (JavaScript disabled) stylingAdding the lowFlow class to the form element removes all JS enhancements.NamePrefilled fieldNo placeholderPassword fieldPassword should be at least 8 characters long.Single form inputFieldset legendEmail fieldTelephone fieldURL fieldSearch fieldNumberInput with label help text Some help textInvalid fieldValid fieldRequired fieldSelect boxItem oneItem twoItem threeItem fourItem fiveItem sixItem seven Some help text regarding the select boxCheckboxes One Two ThreeSingle checkboxRadios One Two ThreeColor fieldDate fieldTime fieldDatetime-local fieldMonth fieldWeek fieldFile fieldRange fieldTextareaTextarea (prefilled)Some prefilled content... Some help text regarding the textarea with some really long text that should overflow and wrapNested fieldsetInputHere is some subtext.Input 2Here's some small subtext.Input 3Here's some bold subtext.Input 4Here is some subtext.Here is some more subtext.Another nested fieldsetInputInput 2SelectHeyColspan classescolspan-1colspan-1colspan-2colspan-4colspan-3colspan-1colspan-fullcolspan-5colspan-1Input AInput BInput Ccolspan-2Input AInput BInput Ccolspan-3Input AInput BInput CInput Dcolspan-4Input AInput BInput CInput DInput Ecolspan-5Input AInput BInput CInput DInput EInput FDetails summaryDetail inputDetail inputDetail inputDetail inputAnother details elementDetail inputP tag elements CheckboxText input Textarea ButtonSome regular text with other elements inside of it Flexbox button layout pattern with two submit buttons:Button 1Flexbox button layout pattern with three submit buttons:Button 1Button 2Non-form related HTML elementsThis is some regular HTML that should not be affected by any semantic forms stylesThis is a divThis is a block quoteA link to the semantic forms repounordered list 1unordered list 2unordered list 3ordered list 1ordered list 2ordered list 3menu list 1menu list 2menu list 3description list titledescription list valueDetails summarySome detail text"})
window.siteTexts.push({file: "docs/semantic-forms/5.1.4/usage/index.html", title: "Semantic Forms — usage (5.1.4)", text: "Installnpm install semantic-formsThe package is distributed with the following builds available:dist/semantic-forms.cjs: CommonJS bundle: const semanticForms = require('semantic-forms')dist/semantic-forms.js: Standalone bundle that can be included via <script> tags. Declares a global variable called: semanticFormsdist/semantic-forms.min.js: Minified standalone bundle that can be included via <p> tags. Declares a global variable called: semanticFormsdist/semantic-forms.mjs: ES module: import semanticForms from 'semantic-forms'dist/semantic-forms.min.mjs: Minified ES module: import semanticForms from 'semantic-forms/min'UseInclude the dist/semantic-forms.css and whichever of the above versions of the JS file you prefer from this repo into your project.Then apply the semanticForms class to your <form> elements:<form class=\"semanticForms\">   <!-- your form here --> </form>Then apply the JavaScript enhancements:semanticForms()Then the CSS/JS enhancements to your forms will apply automatically, assuming the markup structure you use is one of the supported patterns.If you make changes to the DOM after Semantic Forms is activated and want to activate any additional semanticForms forms you insert, you can re-scan for new forms by calling semanticForms.reinitialize() again. If you only want to reinitialize one form instead of all of them, call semanticForms.reinitialize(formElement).FeaturesFloat label inputsThe float label input pattern is notoriously difficult to implement in a fashion that doesn't degrade HTML semantics or accessibility. This pattern library implements a solution that solves that problem. Your label doesn't need to be a sibling of your input like with other implementations. This implementation also has a custom clear button for each input.Example<form class=\"semanticForms\">   <dl>     <dt><label for=\"name\">Name</label></dt>     <dd><input id=\"name\" name=\"name\" type=\"text\" placeholder=\"e.g. John Smith\"></dd>   </dl> </form>NameOr with a <textarea><form class=\"semanticForms\">   <dl>     <dt><label for=\"textarea\">Textarea</label></dt>     <dd><textarea id=\"textarea\" name=\"textarea\" rows=\"5\" cols=\"50\" placeholder=\"e.g. Long string of text\"></textarea></dd>   </dl> </form>TextareaAdd help textInclude a label in the <dd> element with a matching for attribute to place help text beneath the input:<form class=\"semanticForms\" method=\"post\">   <dl>     <dt><label for=\"password\">Password</label></dt>     <dd>       <input id=\"password\" name=\"password\" type=\"password\" placeholder=\"Enter a password\" minlength=\"8\" required autocomplete=\"off\">       <label for=\"password\">Must be at least 8 characters long.</label>     </dd>   </dl> </form>Password Must be at least 8 characters long.Customizing input fieldsBy default, input fields will display an X icon to clear the text and password fields will also display a show/hide toggle for displaying the password in plain text. You can customize this behavior as follows:Customize the hover text of the clear field button by applying a data-clear-field-text=\"your text\" attribute to the input.Customize the hover text of the show password button by applying a data-show-password-text=\"your text\" attribute to the input.Customize the hover text of the hide password button by applying a data-hide-password-text=\"your text\" attribute to the input.Prevent the show/hide toggle from appearing on password fields by applying a data-no-reveal attribute to the input.Show a help text icon next to labels of inputs that contain a title attribute by applying a data-show-help-icon attribute to the label.Note that checkboxes and radios should have a title attribute on the label instead of the inputs.Responsive columnsThis feature makes it so the form fields will grow, shrink, expand the number of columns, or reduce the number of columns based on how much space exists in the container. You can customize it by applying various colspan-# classes to various elements in the form markup structure.Set number of columns for a group of formsYou can limit the number of columns on your forms using the colspan-# class on a <dl> element:<form class=\"semanticForms\">   <dl class=\"colspan-2\">     <dt><label for=\"input-a\">Input A</label></dt>     <dd><input type=\"text\" id=\"input-a\" name=\"input-a\"></dd>      <dt><label for=\"input-b\">Input B</label></dt>     <dd><input type=\"text\" id=\"input-b\" name=\"input-b\"></dd>      <!-- wraps to the next row -->     <dt><label for=\"input-c\">Input C</label></dt>     <dd><input type=\"text\" id=\"input-c\" name=\"input-c\"></dd>   </dl> </form>Input AInput BInput CYou can also apply the class to a <fieldset> which will apply that styling to all nested <dl> elements:<form class=\"semanticForms\">   <fieldset class=\"colspan-3\">     <!-- inherits 3 column class -->     <dl>       <dt><label for=\"f-ex-input-a\">Input A</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-a\" name=\"f-ex-input-a\"></dd>        <dt><label for=\"f-ex-input-b\">Input B</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-b\" name=\"f-ex-input-b\"></dd>        <dt><label for=\"f-ex-input-c\">Input C</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-c\" name=\"f-ex-input-c\"></dd>     </dl>      <!-- has 4 columns -->     <dl class=\"colspan-4\">       <dt><label for=\"f-ex-input-d\">Input D</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-d\" name=\"f-ex-input-d\"></dd>        <dt><label for=\"f-ex-input-e\">Input E</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-e\" name=\"f-ex-input-e\"></dd>        <dt><label for=\"f-ex-input-f\">Input F</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-f\" name=\"f-ex-input-f\"></dd>     </dl>   </fieldset> </form>Input AInput BInput CInput DInput EInput FSet number of columns a single input field takes upYou can specify the number of columns an input will span using the colspan-# class on the <dd> element. The inputs are responsive and will shrink according to available space. Available numbered classes are colspan-1 through colspan-5:<form class=\"semanticForms\">   <fieldset>     <dl>       <dt><label for=\"cspan-ex-input-a\">Input A</label></dt>       <!-- 1 column -->       <dd class=\"colspan-1\"><input type=\"text\" id=\"cspan-ex-input-a\" name=\"cspan-ex-input-a\"></dd>        <dt><label for=\"cspan-ex-input-b\">Input B</label></dt>       <!-- 2 columns  -->       <dd class=\"colspan-2\"><input type=\"text\" id=\"cspan-ex-input-b\" name=\"cspan-ex-input-b\"></dd>        <dt><label for=\"cspan-ex-input-c\">Input C</label></dt>       <!-- 5 columns (max) -->       <dd class=\"colspan-5\"><input type=\"text\" id=\"cspan-ex-input-c\" name=\"cspan-ex-input-c\"></dd>     </dl>   </fieldset> </form>Input AInput BInput Ccolspan-full can also be used to force an input to take up the entire width of a form:<form class=\"semanticForms\">   <fieldset>     <dl>       <dt><label for=\"cspanfull-ex-input-a\">Input A</label></dt>       <!-- this spans 2 columns on row 1 -->       <dd class=\"colspan-2\"><input type=\"text\" id=\"cspanfull-ex-input-a\" name=\"cspanfull-ex-input-a\"></dd>        <dt><label for=\"cspanfull-ex-input-b\">Input B</label></dt>       <!-- this spans the full width of row 2 -->       <dd class=\"colspan-full\"><input type=\"text\" id=\"cspanfull-ex-input-b\" name=\"cspanfull-ex-input-b\"></dd>        <!-- this spans 1 column on row 3 -->       <dt><label for=\"cspanfull-ex-input-c\">Input C</label></dt>       <dd><input type=\"text\" id=\"cspanfull-ex-input-c\" name=\"cspanfull-ex-input-c\"></dd>     </dl>   </fieldset> </form>Input AInput BInput CButton groupsYou can align buttons side-by-side, or in left/right/center groups.Non-grouped exampleNothing fancy here:<form class=\"semanticForms\" method=\"post\">   <button type=\"submit\" name=\"submit\">Non-grouped submit button</button>   <button type=\"submit\" name=\"submit\">Another one</button> </form>Non-grouped submit button Another oneButton groupsDriven by flexbox to intelligently align the buttons based on how many are in the group:<form class=\"semanticForms\" method=\"post\">   <!-- aligns left/right -->   <menu>     <li><button type=\"submit\" name=\"submit\">Button 1</button></li>     <li><button type=\"submit\" name=\"submit\">Button 2</button></li>   </menu>    <!-- aligns left/center/right -->   <menu>     <li><button type=\"submit\" name=\"submit\">Button 1</button></li>     <li><button type=\"submit\" name=\"submit\">Button 2</button></li>     <li><button type=\"submit\" name=\"submit\">Button 3</button></li>   </menu> </form>Button 1Button 2Button 1Button 2Button 3Checkboxes and radio buttonsCheckboxes and radio buttons need to follow the following markup structure:A single checkboxNot too different than other inputs:<form class=\"semanticForms\">   <dl>     <dt><label for=\"some_field_name\">Single checkbox</label></dt>     <dd><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name\"></dd>   </dl> </form>Single checkboxCheckbox group<form class=\"semanticForms\">   <dl>     <dt><label data-for=\"some_checkboxes\">Checkboxes:</label></dt>     <dd class=\"checkboxes\">       <ul id=\"some_checkboxes\">         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_one\"> <label for=\"some_field_name_checkboxes_one\">One</label></li>         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_two\"> <label for=\"some_field_name_checkboxes_two\">Two</label></li>         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_three\"> <label for=\"some_field_name_checkboxes_three\">Three</label></li>       </ul>     </dd>   </dl> </form>Checkboxes: One Two ThreeRadio buttons<form class=\"semanticForms\">   <dl>     <dt><label data-for=\"some_radios\">Radios:</label></dt>     <dd class=\"radios\">       <ul id=\"some_radios\">         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_one\"> <label for=\"some_field_name_radios_one\">One</label></li>         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_two\"> <label for=\"some_field_name_radios_two\">Two</label></li>         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_three\"> <label for=\"some_field_name_radios_three\">Three</label></li>       </ul>     </dd>   </dl> </form>Radios: One Two ThreeValidation stylesInputs with the required attribute will result in a visual indicator (*) being added to its label. You can disable this indicator with the data-no-asterisk attribute on the label element:<form class=\"semanticForms\">   <dl>     <dt><label for=\"input\" data-no-asterisk>Input label</label></dt>     <dd><input type=\"text\" name=\"input\" id=\"input\" required>   </dl> </form>Input labelYou can set a paragraph of text below a field to only appear when a field is invalid with the data-invalid-text attribute:<form class=\"semanticForms\" method=\"post\">   <dl>     <dt><label for=\"password_validation\">Password label</label></dt>     <dd>       <input type=\"password\" name=\"password\" id=\"password_validation\" minlength=\"8\" autocomplete=\"off\">       <p data-invalid-text>Password must be at least 8 characters long.</p>     </dd>   </dl> </form>Password labelPassword must be at least 8 characters long.You can adjust the tooltip text of the asterisk with the data-asterisk-text attribute:<form class=\"semanticForms\">   <dl>     <dt><label for=\"input_validation\" data-asterisk-text=\"This is a custom tooltip.\">Input label</label></dt>     <dd><input type=\"text\" name=\"input\" id=\"input_validation\" required>   </dl> </form>Input labelRange inputs that display valuesAdd a class of displayValue to any <input type=\"range\"> element to make its value display on the label:<form class=\"semanticForms\">   <dl>     <dt><label for=\"rangeValue\">Range value</label></dt>     <dd><input id=\"rangeValue\" name=\"rangeValue\" type=\"range\" class=\"displayValue\"></dd>   </dl> </form>Range valueLight mode and dark modeLight mode and dark mode will be detected automatically based on operating system preference. To set it manually, you can apply an additional class of light or dark to your <form> elements to force the mode.Low flow (JavaScript disabled) modeThe low flow will be displayed if JS is disabled.You can also activate the low flow (JavaScript disabled) mode manually by adding the lowFlow class to your <form> element.The low-flow mode reverts the float label pattern to traditional labels and doesn't include other JS-exclusive enhancements, but preserves the other visual design enhancements driven purely by CSS.Overriding default stylesThe most convenient way to override the default styles in Semantic Forms is to override the built-in CSS variables.For example:form.semanticForms {   /* will overwrite the default semantic-forms values */   --semanticFormsFontFamily: monospace;   --semanticFormsTextColor: blue;   --semanticFormsInputMinWidth: 300px; }For a complete list of CSS variables you can override, see the top of semanticForms.scss.MoreSee a page demoing all features here."})
window.siteTexts.push({file: "docs/semantic-forms/5.1.5/changelog/index.html", title: "Semantic Forms — changelog (5.1.5)", text: "5.1.5Added no-float-label class to disable float labels on a per input basis.Updated dependencies.5.1.4Fixed clipped help icon on Firefox.Updated dependencies.5.1.3Added support for range inputs that display their value as you slide it around.Updated dependencies.5.1.2Added a search icon to search inputs.Added support for select elements with the multiple attribute.Added styling to tables within a form, or tables with the semanticForm class.Fixed missing styles on single radios.Fixed a bug that caused additional text labels to not work on checkbox groups, single checkboxes, and radios.Fixed alignment issues on checkbox and radio groups.Updated dependencies.5.1.1Fixed broken low flow styling.Fixed a visual bug on button gradients in Firefox.Fixed background styling on nested fieldsets within <detail> elements.Updated dependencies.5.1.0Added ability to more conveniently override default CSS via additional CSS variables.Updated all CSS variables to be prefixed with semanticForms (i.e. --semanticFormsFontFamily) to minimize the chance of naming collisions with the rest of your CSS.Fixed bug that prevented input label ellipses from being responsive to the input width.Updated dependencies.5.0.10Fixed bug causing active styles to apply to focused buttons.Updated dependencies.5.0.9Fixed bug causing native clear field to appear on search inputs.Updated dependencies.5.0.8Altered dark mode support so that it does not apply if the <html> or <body> tag has a class of \"light\".Updated dependencies.5.0.7Fixed a bug where the responsive grid layout would not always line up correctly.Fixed a bug that prevented text from being longer than input element, causing graphical errors.Updated dependencies.5.0.6Added slicker live demo docs.Fixed a bug causing dark mode not to respect OS preference.Updated dependencies.5.0.5Added better error handling to the JS.Updated dependencies.5.0.4Fixed a periodic JS error.5.0.3Fixed a bug that prevented semantic-forms from detecting when you inserted new forms into the page.Updated dependencies.5.0.2Fixed a bug that would cause errors when reinitialize() was called.Fixed a bug that caused nested selects to lose their dropdown icon.Fixed a bug where required single checkboxes would not show an asterisk.Added a help text icon beside labels with a title attribute on their respective inputs, or on labels for checkboxes and radios. Enabled with a data-show-help-icon attribute.Updated various dependencies.5.0.1Fixed a bug that caused some devDependencies to end up in the production build.Updated various dependencies.5.0.0Breaking: Added JS module bundling to make it possible for you to import CJS, ESM, or a standalone version of the JavaScript in this library to your project. However you will need to change your imports to match the new file names. See README for details.Added show/hide toggle to password fields which can be disabled with a data-no-reveal attribute.Added hover text for the clear field button and the show/hide password button.Added ability to customize clear field button hover text and show/hide password button hover text using data attributes as well.Added support for undo/redo keyboard commands when pressing the clear field.Added test suite.Fixed some accessibility issues.Updated various dependencies.4.0.4Fixed a bug that caused menu items with buttons to appear as a list.Updated various dependencies.4.0.3Fixed bug in which a form entry consisting of a single checkbox would be misaligned.Fixed bug that prevented some inputs from expanding to the width of its container.Fixed bug in which CSS reset for elements within a semantic forms form was overly aggressive, making it harder to style unrelated content within such a form.Updated various dependencies.4.0.2Fixed a visual bug that occurred when single checkbox elements had extra elements included.Updated various dependencies.4.0.1Added invalid help text support.Fixed a bug that caused float labels to break when certain browser extensions were enabled.4.0.0Breaking: Overhauled entire codebase to drive it using mostly CSS grid instead of flexbox. This makes everything more flexible overall and fit more designs better. However the CSS and markup changes will likely cause breaking changes to previous integrations, so when upgrading make some time to visually test all your pages to alter any CSS overrides you had in place accordingly. You also might want to make some markup changes to make use of new available classes to tweak the fit of individual form fields on specific forms.Altered fields to fit available space better at various screen sizes.Added multiple utility classes that define how wide inputs will span in the responsive layout.Added support for input type=image.Added support for secondary labels.Added styling for invalid form fields.Added asterisk that appears on required inputs.Improved accessibility considerably. Now has 100% Lighthouse score.Added feature to progressively nest fieldsets with progressively darker/lighter background colors.Fixed bug causing clear button appearing on disabled inputs.Fixed bug causing clear button to overlap with scrollbars on textareas.Fixed bug causing nested fieldset to have incorrect padding and margins.Fixed various other small bugs.Replaced the less CSS preprocessor with sass.Updated various dependencies.3.2.1Fixed a bug that could cause checkboxes and radio buttons to not submit their values to the server properly.Updated various dependencies.3.2.0Added a reinitialization method to re-scan existing forms. Called with window.semanticForms.reinitialize(formName).Altered logic to enhance forms so that it now ignores inputs that have already been enhanced.Updated dependencies.3.1.0Added dark mode support.Deprecated \"reset\" versions and \"no images\" versions.Added mutation observer that monitors changes to the DOM and will enhance any additional semanticForms forms you insert, but the monitoring may not be perfect. If you want to re-scan for new forms to enhance manually, you may still need to call window.semanticForms().Fixed a bug that caused DOM events to be duplicated when DOM elements are added dynamically after the first page load.Updated dependencies.3.0.8Fixed main export on case-sensitive file systems.Updated dependencies.3.0.7Fixed Chrome issue for forms with no placeholder.3.0.6Fixed missing files in npm package.3.0.5Added \"reset\" versions of the CSS files that set all: unset; before applying any semantic forms styles to help avoid conflicts with other CSS. There is a performance degradation to using this technique, so you should only use this if absolutely necessary.3.0.4Reduced size of select box text.3.0.3Fixed issue that prevented id selectors from allowing dots in the string.Fixed issue that prevented the clear field from dispatching an input event.3.0.2Added support for a single checkbox rather than a group of checkboxes.3.0.1Fixed alignment issue.3.0.0Removed default two column layout. Now defaults to as many columns as the container is wide.Added x2 class you can put on dd elements to double the width of a form. Does not apply on small screens.2.1.2Added a function to the JS files's global scope called semanticForms that you can call to initialize new forms that have been added to the DOM since the initial initialization.Updated dependencies.2.1.1Fixed a situation that could lead to a JS error.Fix minor alignment issue.2.1.0Added all input types.Fixed clear field.Fixed markup mistakes in the examples.Fixed CSS to support <menu> elements correctly.Refactored the JavaScript to modernize it.Updated dependencies.2.0.0Replaced <div class=\"buttonGroup\"> with a <menu> element. You will need to refactor your HTML accordingly.Fixed alignment issue caused by browser engines changing their alignment calculations since the first release.Various other refactoring.Pinned deps.Updated dependencies.1.0.5Restricted JS events to target elements within semanticForms class form elements.Switched font sizes to % in case someone finds 16px too small and changes the default font size in the browser, these form fields will no longer stay fixed.Published to npm.Started CHANGELOG.Updated dependencies.1.0.4 and belowHere be dragons…"})
window.siteTexts.push({file: "docs/semantic-forms/5.1.5/fullDemo/index.html", title: "Semantic Forms (5.1.5)", text: "Semantic FormsA pattern library of forms based on semantic HTML enhanced with a modern UX.High flow (JavaScript enabled) stylingNamePrefilled fieldNo placeholderPassword fieldPassword should be at least 8 characters long.Don't show password fieldPassword should be at least 8 characters long.Customize clear/show buttonsPassword should be at least 8 characters long.Single form inputFieldset legendInputsEmail fieldTelephone fieldURL fieldSearch fieldNo float labelNumberInput with label help text Some help textInput with help iconRequired input with help iconInvalid fieldValid fieldRequired fieldRequired field (no asterisk)Required field (custom title)Disabled inputDisabled input w/ valueColor fieldDate fieldTime fieldDatetime-local fieldMonth fieldWeek fieldFile fieldRange fieldRange valueSelectsSelect boxItem oneItem twoItem threeItem fourItem fiveItem sixItem seven Some help text regarding the select boxRequired select boxMake a selectionItem oneItem twoItem threeItem fourItem fiveItem sixItem sevenRequired select box (no asterisk)Make a selectionItem oneItem twoItem threeItem fourItem fiveItem sixItem sevenMultiple selectOption 1Option 2Option 3Option 4Option 5CheckboxesCheckboxes One Two ThreeRequired checkboxes One Two ThreeCheckboxes w/ help text One Two ThreeCheckboxes w/ additional text One Two ThreeThis is some additional text.CheckboxCheckbox (required)Checkbox w/ help textCheckbox w/ additional text This is some additional text.RadiosRadios One Two ThreeRequired radios One Two ThreeRadios w/ help text One Two ThreeRadios w/ additional text One Two ThreeThis is some additional text.RadioRadio (required)Radio w/ help textRadio w/ additional text This is some additional text.OtherTextareaTextarea (prefilled)Some prefilled content... Some help text regarding the textarea with some really long text that should overflow and wrapTablesTable with inputs and buttonsTable TitleColumn 1Column 2Column 31Button 1Button 22Button 1Button 23Button 1Button 2Table using colgroups to define column widthTable TitleColumn 1Column 2Column 320%50%30%Nested fieldsetsFieldset 1InputHere is some subtext.Input 2Here's some small subtext.Input 3Here's some bold subtext.Input 4Here is some subtext.Here is some more subtext.Fieldset 2Input 1Input 2SelectHeyFieldset 3Input AInput BInput CInput DColspan classescolspan-1colspan-1colspan-2colspan-4colspan-3colspan-1colspan-fullcolspan-5colspan-1Input AInput BInput CInput Dcolspan-2Input AInput BInput CInput Dcolspan-3Input AInput BInput CInput Dcolspan-fullInput AInput BInput CInput DDetail elementDetail inputDetail inputDetail inputDetail inputAnother detail element with a nested fieldsetDetail inputNested fieldsetNested fieldset input Flexbox button layout pattern with two submit buttons:Button 1Flexbox button layout pattern with three submit buttons:Button 1Button 2P tag elements CheckboxText input Textarea ButtonSome regular text with other elements inside of itNon-form related HTML elementsThis is some regular HTML that should not be affected by any semantic forms stylesThis is a divThis is a block quoteA link to the semantic forms repounordered list 1unordered list 2unordered list 3ordered list 1ordered list 2ordered list 3menu list 1menu list 2menu list 3description list titledescription list valueDetails summarySome detail textTable with semanticForms classTable TitleColumn 1Column 2Column 31Button 1Button 22Button 1Button 23Button 1Button 2Table with a form in a cellTable TitleColumn 1Column 2Some textSubmit buttonUnstyled tableTable TitleColumn 1Column 2Column 31Aa2Bb3CcLow flow (JavaScript disabled) stylingAdding the lowFlow class to the form element removes all JS enhancements.NamePrefilled fieldNo placeholderPassword fieldPassword should be at least 8 characters long.Single form inputFieldset legendEmail fieldTelephone fieldURL fieldSearch fieldNumberInput with label help text Some help textInvalid fieldValid fieldRequired fieldSelect boxItem oneItem twoItem threeItem fourItem fiveItem sixItem seven Some help text regarding the select boxCheckboxes One Two ThreeSingle checkboxRadios One Two ThreeColor fieldDate fieldTime fieldDatetime-local fieldMonth fieldWeek fieldFile fieldRange fieldTextareaTextarea (prefilled)Some prefilled content... Some help text regarding the textarea with some really long text that should overflow and wrapNested fieldsetInputHere is some subtext.Input 2Here's some small subtext.Input 3Here's some bold subtext.Input 4Here is some subtext.Here is some more subtext.Another nested fieldsetInputInput 2SelectHeyColspan classescolspan-1colspan-1colspan-2colspan-4colspan-3colspan-1colspan-fullcolspan-5colspan-1Input AInput BInput Ccolspan-2Input AInput BInput Ccolspan-3Input AInput BInput CInput Dcolspan-4Input AInput BInput CInput DInput Ecolspan-5Input AInput BInput CInput DInput EInput FDetails summaryDetail inputDetail inputDetail inputDetail inputAnother details elementDetail inputP tag elements CheckboxText input Textarea ButtonSome regular text with other elements inside of it Flexbox button layout pattern with two submit buttons:Button 1Flexbox button layout pattern with three submit buttons:Button 1Button 2Non-form related HTML elementsThis is some regular HTML that should not be affected by any semantic forms stylesThis is a divThis is a block quoteA link to the semantic forms repounordered list 1unordered list 2unordered list 3ordered list 1ordered list 2ordered list 3menu list 1menu list 2menu list 3description list titledescription list valueDetails summarySome detail text"})
window.siteTexts.push({file: "docs/semantic-forms/5.1.5/usage/index.html", title: "Semantic Forms — usage (5.1.5)", text: "Installnpm install semantic-formsThe package is distributed with the following builds available:dist/semantic-forms.cjs: CommonJS bundle: const semanticForms = require('semantic-forms')dist/semantic-forms.js: Standalone bundle that can be included via <script> tags. Declares a global variable called: semanticFormsdist/semantic-forms.min.js: Minified standalone bundle that can be included via <p> tags. Declares a global variable called: semanticFormsdist/semantic-forms.mjs: ES module: import semanticForms from 'semantic-forms'dist/semantic-forms.min.mjs: Minified ES module: import semanticForms from 'semantic-forms/min'UseInclude the dist/semantic-forms.css and whichever of the above versions of the JS file you prefer from this repo into your project.Then apply the semanticForms class to your <form> elements:<form class=\"semanticForms\">   <!-- your form here --> </form>Then apply the JavaScript enhancements:semanticForms()Then the CSS/JS enhancements to your forms will apply automatically, assuming the markup structure you use is one of the supported patterns.If you make changes to the DOM after Semantic Forms is activated and want to activate any additional semanticForms forms you insert, you can re-scan for new forms by calling semanticForms.reinitialize() again. If you only want to reinitialize one form instead of all of them, call semanticForms.reinitialize(formElement).FeaturesFloat label inputsThe float label input pattern is notoriously difficult to implement in a fashion that doesn't degrade HTML semantics or accessibility. This pattern library implements a solution that solves that problem. Your label doesn't need to be a sibling of your input like with other implementations. This implementation also has a custom clear button for each input.Example<form class=\"semanticForms\">   <dl>     <dt><label for=\"name\">Name</label></dt>     <dd><input id=\"name\" name=\"name\" type=\"text\" placeholder=\"e.g. John Smith\"></dd>   </dl> </form>NameOr with a <textarea><form class=\"semanticForms\">   <dl>     <dt><label for=\"textarea\">Textarea</label></dt>     <dd><textarea id=\"textarea\" name=\"textarea\" rows=\"5\" cols=\"50\" placeholder=\"e.g. Long string of text\"></textarea></dd>   </dl> </form>TextareaAdd help textInclude a label in the <dd> element with a matching for attribute to place help text beneath the input:<form class=\"semanticForms\" method=\"post\">   <dl>     <dt><label for=\"password\">Password</label></dt>     <dd>       <input id=\"password\" name=\"password\" type=\"password\" placeholder=\"Enter a password\" minlength=\"8\" required autocomplete=\"off\">       <label for=\"password\">Must be at least 8 characters long.</label>     </dd>   </dl> </form>Password Must be at least 8 characters long.Customizing input fieldsBy default, input fields will display an X icon to clear the text and password fields will also display a show/hide toggle for displaying the password in plain text. You can customize this behavior as follows:Customize the hover text of the clear field button by applying a data-clear-field-text=\"your text\" attribute to the input.Customize the hover text of the show password button by applying a data-show-password-text=\"your text\" attribute to the input.Customize the hover text of the hide password button by applying a data-hide-password-text=\"your text\" attribute to the input.Prevent the show/hide toggle from appearing on password fields by applying a data-no-reveal attribute to the input.Show a help text icon next to labels of inputs that contain a title attribute by applying a data-show-help-icon attribute to the label.Note that checkboxes and radios should have a title attribute on the label instead of the inputs.You can also disable float labels on a per-field basis with the no-float-label class:<form class=\"semanticForms\">   <dl>     <dt><label for=\"search-field\">Search</label></dt>     <dd><input id=\"search-field\" name=\"search-field\" type=\"search\" placeholder=\"e.g. cool stuff\" class=\"no-float-label\"></dd>   </dl> </form>SearchResponsive columnsThis feature makes it so the form fields will grow, shrink, expand the number of columns, or reduce the number of columns based on how much space exists in the container. You can customize it by applying various colspan-# classes to various elements in the form markup structure.Set number of columns for a group of formsYou can limit the number of columns on your forms using the colspan-# class on a <dl> element:<form class=\"semanticForms\">   <dl class=\"colspan-2\">     <dt><label for=\"input-a\">Input A</label></dt>     <dd><input type=\"text\" id=\"input-a\" name=\"input-a\"></dd>      <dt><label for=\"input-b\">Input B</label></dt>     <dd><input type=\"text\" id=\"input-b\" name=\"input-b\"></dd>      <!-- wraps to the next row -->     <dt><label for=\"input-c\">Input C</label></dt>     <dd><input type=\"text\" id=\"input-c\" name=\"input-c\"></dd>   </dl> </form>Input AInput BInput CYou can also apply the class to a <fieldset> which will apply that styling to all nested <dl> elements:<form class=\"semanticForms\">   <fieldset class=\"colspan-3\">     <!-- inherits 3 column class -->     <dl>       <dt><label for=\"f-ex-input-a\">Input A</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-a\" name=\"f-ex-input-a\"></dd>        <dt><label for=\"f-ex-input-b\">Input B</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-b\" name=\"f-ex-input-b\"></dd>        <dt><label for=\"f-ex-input-c\">Input C</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-c\" name=\"f-ex-input-c\"></dd>     </dl>      <!-- has 4 columns -->     <dl class=\"colspan-4\">       <dt><label for=\"f-ex-input-d\">Input D</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-d\" name=\"f-ex-input-d\"></dd>        <dt><label for=\"f-ex-input-e\">Input E</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-e\" name=\"f-ex-input-e\"></dd>        <dt><label for=\"f-ex-input-f\">Input F</label></dt>       <dd><input type=\"text\" id=\"f-ex-input-f\" name=\"f-ex-input-f\"></dd>     </dl>   </fieldset> </form>Input AInput BInput CInput DInput EInput FSet number of columns a single input field takes upYou can specify the number of columns an input will span using the colspan-# class on the <dd> element. The inputs are responsive and will shrink according to available space. Available numbered classes are colspan-1 through colspan-5:<form class=\"semanticForms\">   <fieldset>     <dl>       <dt><label for=\"cspan-ex-input-a\">Input A</label></dt>       <!-- 1 column -->       <dd class=\"colspan-1\"><input type=\"text\" id=\"cspan-ex-input-a\" name=\"cspan-ex-input-a\"></dd>        <dt><label for=\"cspan-ex-input-b\">Input B</label></dt>       <!-- 2 columns  -->       <dd class=\"colspan-2\"><input type=\"text\" id=\"cspan-ex-input-b\" name=\"cspan-ex-input-b\"></dd>        <dt><label for=\"cspan-ex-input-c\">Input C</label></dt>       <!-- 5 columns (max) -->       <dd class=\"colspan-5\"><input type=\"text\" id=\"cspan-ex-input-c\" name=\"cspan-ex-input-c\"></dd>     </dl>   </fieldset> </form>Input AInput BInput Ccolspan-full can also be used to force an input to take up the entire width of a form:<form class=\"semanticForms\">   <fieldset>     <dl>       <dt><label for=\"cspanfull-ex-input-a\">Input A</label></dt>       <!-- this spans 2 columns on row 1 -->       <dd class=\"colspan-2\"><input type=\"text\" id=\"cspanfull-ex-input-a\" name=\"cspanfull-ex-input-a\"></dd>        <dt><label for=\"cspanfull-ex-input-b\">Input B</label></dt>       <!-- this spans the full width of row 2 -->       <dd class=\"colspan-full\"><input type=\"text\" id=\"cspanfull-ex-input-b\" name=\"cspanfull-ex-input-b\"></dd>        <!-- this spans 1 column on row 3 -->       <dt><label for=\"cspanfull-ex-input-c\">Input C</label></dt>       <dd><input type=\"text\" id=\"cspanfull-ex-input-c\" name=\"cspanfull-ex-input-c\"></dd>     </dl>   </fieldset> </form>Input AInput BInput CButton groupsYou can align buttons side-by-side, or in left/right/center groups.Non-grouped exampleNothing fancy here:<form class=\"semanticForms\" method=\"post\">   <button type=\"submit\" name=\"submit\">Non-grouped submit button</button>   <button type=\"submit\" name=\"submit\">Another one</button> </form>Non-grouped submit button Another oneButton groupsDriven by flexbox to intelligently align the buttons based on how many are in the group:<form class=\"semanticForms\" method=\"post\">   <!-- aligns left/right -->   <menu>     <li><button type=\"submit\" name=\"submit\">Button 1</button></li>     <li><button type=\"submit\" name=\"submit\">Button 2</button></li>   </menu>    <!-- aligns left/center/right -->   <menu>     <li><button type=\"submit\" name=\"submit\">Button 1</button></li>     <li><button type=\"submit\" name=\"submit\">Button 2</button></li>     <li><button type=\"submit\" name=\"submit\">Button 3</button></li>   </menu> </form>Button 1Button 2Button 1Button 2Button 3Checkboxes and radio buttonsCheckboxes and radio buttons need to follow the following markup structure:A single checkboxNot too different than other inputs:<form class=\"semanticForms\">   <dl>     <dt><label for=\"some_field_name\">Single checkbox</label></dt>     <dd><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name\"></dd>   </dl> </form>Single checkboxCheckbox group<form class=\"semanticForms\">   <dl>     <dt><label data-for=\"some_checkboxes\">Checkboxes:</label></dt>     <dd class=\"checkboxes\">       <ul id=\"some_checkboxes\">         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_one\"> <label for=\"some_field_name_checkboxes_one\">One</label></li>         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_two\"> <label for=\"some_field_name_checkboxes_two\">Two</label></li>         <li><input type=\"checkbox\" name=\"some_field_name\" id=\"some_field_name_checkboxes_three\"> <label for=\"some_field_name_checkboxes_three\">Three</label></li>       </ul>     </dd>   </dl> </form>Checkboxes: One Two ThreeRadio buttons<form class=\"semanticForms\">   <dl>     <dt><label data-for=\"some_radios\">Radios:</label></dt>     <dd class=\"radios\">       <ul id=\"some_radios\">         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_one\"> <label for=\"some_field_name_radios_one\">One</label></li>         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_two\"> <label for=\"some_field_name_radios_two\">Two</label></li>         <li><input type=\"radio\" name=\"some_field_name\" id=\"some_field_name_radios_three\"> <label for=\"some_field_name_radios_three\">Three</label></li>       </ul>     </dd>   </dl> </form>Radios: One Two ThreeValidation stylesInputs with the required attribute will result in a visual indicator (*) being added to its label. You can disable this indicator with the data-no-asterisk attribute on the label element:<form class=\"semanticForms\">   <dl>     <dt><label for=\"input\" data-no-asterisk>Input label</label></dt>     <dd><input type=\"text\" name=\"input\" id=\"input\" required>   </dl> </form>Input labelYou can set a paragraph of text below a field to only appear when a field is invalid with the data-invalid-text attribute:<form class=\"semanticForms\" method=\"post\">   <dl>     <dt><label for=\"password_validation\">Password label</label></dt>     <dd>       <input type=\"password\" name=\"password\" id=\"password_validation\" minlength=\"8\" autocomplete=\"off\">       <p data-invalid-text>Password must be at least 8 characters long.</p>     </dd>   </dl> </form>Password labelPassword must be at least 8 characters long.You can adjust the tooltip text of the asterisk with the data-asterisk-text attribute:<form class=\"semanticForms\">   <dl>     <dt><label for=\"input_validation\" data-asterisk-text=\"This is a custom tooltip.\">Input label</label></dt>     <dd><input type=\"text\" name=\"input\" id=\"input_validation\" required>   </dl> </form>Input labelRange inputs that display valuesAdd a class of displayValue to any <input type=\"range\"> element to make its value display on the label:<form class=\"semanticForms\">   <dl>     <dt><label for=\"rangeValue\">Range value</label></dt>     <dd><input id=\"rangeValue\" name=\"rangeValue\" type=\"range\" class=\"displayValue\"></dd>   </dl> </form>Range valueLight mode and dark modeLight mode and dark mode will be detected automatically based on operating system preference. To set it manually, you can apply an additional class of light or dark to your <form> elements to force the mode.Low flow (JavaScript disabled) modeThe low flow will be displayed if JS is disabled.You can also activate the low flow (JavaScript disabled) mode manually by adding the lowFlow class to your <form> element.The low-flow mode reverts the float label pattern to traditional labels and doesn't include other JS-exclusive enhancements, but preserves the other visual design enhancements driven purely by CSS.Overriding default stylesThe most convenient way to override the default styles in Semantic Forms is to override the built-in CSS variables.For example:form.semanticForms {   /* will overwrite the default semantic-forms values */   --semanticFormsFontFamily: monospace;   --semanticFormsTextColor: blue;   --semanticFormsInputMinWidth: 300px; }For a complete list of CSS variables you can override, see the top of semanticForms.scss.MoreSee a page demoing all features here."})
window.siteTexts.push({file: "docs/single-page-express/2.0.0/changelog/index.html", title: "Single Page Express — changelog (2.0.0)", text: "2.0.0Breaking: Changed default Express API version to 5.To migrate:Most apps probably only need to change * routes to *all.Apps that use more complex routing may need other changes.Full list of considerations for migrating to Express 5: https://expressjs.com/en/guide/migrating-5.htmlFixed a bug that caused req.body to populate {} instead of undefined in Express 5 mode.Fixed a bug that caused the default / route to not load in some situations.Fixed a bug that caused extra <head> tags to get inserted into the DOM with the default render method in some situations.Fixed issues in sample app 2.Updated dependencies.1.2.0Added view transition support in the default render method.Added support for multiple DOM update targets in the default render method.Added req.backButtonPressed and req.forwardButtonPressed to app.Added classes backButtonPressed and forwardButtonPressed which will populate on the <html> element if either button was pressed.Added [data-page-title] to the top of the list of accepted query selectors for sourcing content to announce to screen readers when a new page is rendered.Added new params to the res.beforeRender(params), beforeEveryRender(params), res.afterRender(params), and afterEveryRender(params) methods:It now supplies an object with:model: The data model supplied to the template to be rendered.doc: The document object created from the template after it is rendered.markup: The HTML string that will be written to the page.targets: The list of DOM nodes that will be updated.Fixed a bug that caused postRenderCallbacks not to function properly.Fixed a bug related to script tags from the rendered page being executed unnecessarily.Fixed a bug causing unnecessary outlines to appear on page transitions in Safari.Updated dependencies.1.1.1Fixed crash related to unfinished HTML validation feature.Updated dependencies.1.1.0Added feature which will allow single-page-express to remember the scroll position of pages that have been visited. It will also remember the scroll position of child containers on each page as well, but only if those containers have assigned id attributes.Added alwaysScrollTop param which will let you disable this behavior app wide and res.resetScroll which will let you disable this behavior on a per-route basis.Added new behaviors to the default render method. It will now:Update the attributes of the <html> and <head> tags.Add new children to the <head> tag if anything new is in the template render.Delay the DOM update until any new <link> or <script> tags load to prevent a FOUC.Set browser focus appropriately after the DOM update. Also added res.focus to let you set it manually.Announce page changes to screen readers.Added res properties which will let you remove elements from the <head> tag on a per route basis: res.removeMetaTags, res.removeStyleTags, res.removeLinkTags, res.removeScriptTags, res.removeBaseTags, res.removeTemplateTags. There is also res.removeHeadTags to remove all children of the <head> tag except the <title> tag.Added topBarRoutes param to allow restricting the top bar to certain routes.Added req.singlePageExpress which you can use to detect if your route is executing in the single-page-express context.Fixed a bug which caused back/forward buttons to not function properly sometimes.Fixed a bug which would cause the top bar not to ever hide if it was enabled but the default render method was replaced.Fixed a bug in the Express sample app that would cause server-rendering to fail on routes with more than one /.Added a new sample app.Added an automated test suite and a few starter tests.Refactored some code to simplify it.Removed some unneeded dependencies.Updated dependencies.1.0.3Fixed missing exports so you can require/import Single Page Express less verbosely in your projects.Updated docs to clarify what the different builds of Single Page Express are meant to be used for.Updated dependencies.1.0.2Fixed bug causing custom res variables to not be set properly during certain default render method calls.Fixed broken Express 5 support.Updated dependencies.1.0.1Fixed broken postinstall script.1.0.0Initial version."})
window.siteTexts.push({file: "docs/single-page-express/2.0.0/configuration/index.html", title: "Single Page Express — configuration (2.0.0)", text: "APIDefault render method behaviorThe default render method will handle both full page renders as well as rendering partials:If you set res.title, the page's title will be updated with its contents. Alternatively, if the template render output contains a <title> tag, the page's title will be updated with its contents.When the new page is rendered, it will be announced to screen readers. The content to read to screen readers will be sourced from one of the following querySelectors: [data-page-title], h1[aria-label], h1, or title in that order.If the template render contains an <html> or <head> tag and there are new attributes on the <html> or <head> tags that aren't present in the current document, those attributes will be set on the current document. This behavior is additive or replacement-level only. Attributes cannot be removed simply by omitting them in the template render. If you want to remove an attribute, do it with JavaScript, or set it to a different value in your template render.If there are any new children for the <head> in the template render, they will be inserted into the current document's <head> tag if they are not present already.If any of the new tags are <link> or <script> tags, the DOM update will be delayed until those external files load to prevent a flash of unstyled content.If you set res.removeMetaTags, all <meta> tags will be removed from the <head> before adding any new ones.If you set res.removeStyleTags, all <style> tags will be removed from the <head> before adding any new ones.If you set res.removeLinkTags, all <link> tags will be removed from the <head> before adding any new ones.If you set res.removeScriptTags, all <script> tags will be removed from the <head> before adding any new ones.If you set res.removeBaseTags, all <base> tags will be removed from the <head> before adding any new ones.If you set res.removeTemplateTags, all <template> tags will be removed from the <head> before adding any new ones.If you set res.removeHeadTags, all tags except <title> will be removed from the <head> before adding any new ones.If you set res.target, the DOM will be updated at that spot. res.target is a query selector, so an example value you could give it would be #my-container. That would replace the contents of the element with the id \"my-container\" with the output of your rendered template.If the output of your rendered template also has an element matching the same query selector, then the contents of that portion of the output will be all that is used to replace the target.If you do not set res.target and neither app.defaultTarget nor app.defaultTargets is set, then the contents of the <body> tag will be replaced with the output of your rendered template.You can also supply an array of query selectors to res.target. Elements found matching the query selectors in the array will be replaced with the corresponding query selectors from the rendered template.If you set res.appendTargets = true, any new target(s) you add will be in addition to whatever is set by app.defaultTarget or app.defaultTargets.If you set res.focus, the browser's focus will be set to that element after the page is rendered. If you do not set res.focus, then the browser's focus will be set to the first non-inert element in the DOM with the autofocus attribute, or, if none are present, it will be set to whatever the target element was set to for the DOM update. If there are multiple targets, the first target on the list will be what is selected.There are also hooks for setting animations as well. See \"Hooks for setting animations\" below.If this DOM manipulation behavior is undesirable to you, you can supply your own render method instead and do whatever you like. To supply your own render method, see the constructor parameter documentation below.Constructor parametersBasic configurationexpressVersion [Number]: Optionally set which version of the Express API to use for route string parsing. Supports values 4 or 5. Express 3 and below are not supported. Defaults to 5.templatingEngine [String]: Which Express templating system to use. You must include the package in your app and supply the module as an argument to this param. This param is required if you use the default render method and do not supply your own.templates [Object]: Supply an object with keys that are template names and values that are template strings. This param is required if you use the default render method and do not supply your own.renderMethod(template, model callback) [Function]: Optionally supply a function to execute when res.render is called in your routes. If you do not provide one, a default one will be used that will render your template with your chosen templating engine and make appropriate updates to the DOM. See below for details about what the default render method does specifically and how to customize its behavior.disableTopbar [Boolean]: Disable the top bar loading bar. Default: false (the loading bar is enabled by default)topbarConfig [Object]: Options to supply to top bar to customize its aesthetics and behavior. See the site's documentation for a list of options.topBarRoutes [Array of Strings]: Which routes to use top bar on. Defaults to all if this option is not supplied.alwaysScrollTop [Boolean]: Always scroll to the top of the page after every render. Default: false (the default render method will remember the scroll position of each page visited and restore that scroll position when you revisit those pages)Customizing the default render method's behaviorThese constructor params are only relevant if you're not supplying a custom render method.Pre-renderbeforeEveryRender(params) [Function]: Optionally supply a function to execute just before your template is rendered and written to the DOM. Useful for beginning a CSS transition.You can also set res.beforeRender(params) [Function] on a per request basis.The params argument contains:model [Object]: The data model supplied to the template to be rendered.doc [String]: The document object created from the template after it is rendered.markup [String]: The HTML string that will be written to the page.targets [Array of Strings]: The list of DOM nodes that will be updated.defaultTarget [String]: Query string representing the default element to target if one is not supplied by res.target. Defaults to the <body> tag if neither res.target or app.defaultTarget is supplied.defaultTargets [Array of Strings]: Array of query strings representing elements to target for replacement if such an array is not supplied by res.target. Elements found matching the query strings in the array will be replaced with the corresponding query string from the rendered template.updateDelay [Number]: How long to wait in milliseconds between rendering the template and writing its contents to the DOM. This is useful to give your animations time to animate if you're using animations. Default: 0.You can also set res.updateDelay on a per request basis.Post-renderafterEveryRender(params) [Function]: Optionally supply a function to execute just after your template is rendered and written to the DOM. Useful for finishing a CSS transition.You can also set res.afterRender(params) [Function] on a per request basis.The params argument contains:model [Object]: The data model supplied to the template rendered.doc [String]: The document object created from the template after it was rendered.markup [String]: The HTML string that was written to the page.targets [Array of Strings]: The list of DOM nodes that were updated.postRenderCallbacks [Object]: Optionally supply an object with keys that are template names and values that are functions to execute after that template renders. You can also supply * as a key to execute a post-render callback after every template render.Application objectWhen you call the constructor, it will return an app object.PropertiesafterEveryRender(params) [Function]: Function to execute after every template render sourced from the constructor params.alwaysScrollTop [Boolean]: If true, the app will not remember scroll position on a per-page basis.appVars [Object]: List of variables stored via app.set() and retrieved with app.get().beforeEveryRender(params) [Function]: Function to execute before every template render sourced from the constructor params.defaultTarget [String]: Query string representing the default element to target if one is not supplied by res.target.defaultTargets [Array of Strings]: Optional array of query strings representing elements to target for replacement if such an array is not supplied by res.target.expressVersion [Number]: Which version of the Express API to use for route string parsing sourced from the constructor params.postRenderCallbacks [Object]: List of callback functions to execute after a render event occurs sourced from the constructor params.routes [Object]: List of routes registered with single-page-express.routeCallbacks [Object]: List of callback functions executed when a given route is visited.templates [Object]: List of templates loaded into into single-page-express sourced from the constructor params.templatingEngine [String]: The templating engine module loaded into single-page-express sourced from the constructor params.topbarEnabled [Boolean]: Whether or not the top loading bar is enabled.topbarRoutes [Array of Strings]: Which routes to use the top loading bar on; defaults to all if this option is not supplied.updateDelay [Number]: How long to wait before rendering a template sourced from constructor params.urls [Object]: List of URLs that have been visited and metadata about them.Express API implementationsingle-page-express is a partial frontend implementation of the Express API. Below is a full list of Express API methods and the degree to which it is implemented.App constructor methodsNot supported: None from Express are implemented. single-page-express implements its own constructor which is described above.Application objectSettingscase sensitive routing [Boolean]: Supported. Defaults to false.env [String]: Supported. Defaults to production.etag: Not supported because there is no request cycle concept in single page app contexts.jsonp callback name: Not supported because it is not useful in single page app contexts.json escape: Not supported because it is not useful in single page app contexts.json replacer: Not supported because it is not useful in single page app contexts.json spaces: Not supported because it is not useful in single page app contexts.query parser [Boolean]: Partially supported. In Express there are multiple options, but in single-page-express you can set it to either true or false. It defaults to true.strict routing [Boolean]: Supported. Defaults to false.subdomain offset [Number]: Supported. Defaults to 2.trust proxy: Not supported because there is no request cycle concept in single page app contexts.views: Not supported because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.view cache: Not supported because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.view engine: Not supported because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.x-powered-by: Not supported because there is no request cycle concept in single page app contexts.Propertiesapp.locals [Object]: Stubbed out. This will always return {} because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.app.mountpath [String]: Stubbed out. This will always return '' because single-page-express does not have a concept of app mounting in the way that Express does. See feature request.Eventsmount: Stubbed out but does nothing because single-page-express does not have a concept of app mounting in the way that Express does. See feature request.Methodsapp.all(): Supported.app.delete(): Supported.app.disable(): Supported.app.disabled(): Supported.app.enable(): Supported.app.enabled(): Supported.app.engine(): Stubbed out but does nothing because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.app.get(): Supported. (Both versions.)app.listen(): Stubbed out but does nothing because there is no \"server\" concept in single page app contexts.app.METHOD(): Supported.app.param(): Stubbed out but does nothing because this feature has not been implemented yet. See feature request.app.path(): Stubbed out but does nothing because single-page-express does not have a concept of app mounting in the way that Express does. See feature request.app.post(): Supported.app.put(): Supported.app.render(): Supported.app.route(): Supported.app.set(): Supported.app.use(): Stubbed out but does nothing because single-page-express does not have a concept of app middleware in the way that Express does. See feature request.New methods defined by single-page-expressapp.triggerRoute(params): This will activate the route callback registered for a given route, as though a link was clicked or a form was POSTed.Params accepted by app.triggerRoute include:route [String]: Which route you're triggering.method [String]: e.g. GET, POST, etc. (Case insensitive.)body [Object]: What to supply to req.body if you're triggering a POST.Request objectPropertiesreq.app [Object]: Supported, however the app object returned will not have all the same properties and methods as Express itself due to the API differences documented above.req.baseUrl [String]: Stubbed out. This will always be '' because single-page-express does not have a concept of app mounting in the way that Express does. See feature request.req.body [Object]: Supported.req.cookies [Object]: Supported.req.fresh [Boolean]: Stubbed out. This will always be true because there is no request cycle concept in single page app contexts.req.hostname [String]: Supported.req.ip [String]: Stubbed out. This will always be 127.0.0.1 because there is no request cycle concept in single page app contexts.req.ips [Array of Strings]: Stubbed out. This will always be [] because there is no request cycle concept in single page app contexts.req.method [String]: Supported.req.originalUrl [String]: Supported.req.params [Object]: Supported.req.path [String]: Supported.req.protocol [String]: Supported.req.query [String]: Supported.req.res [Object]: Supported.req.route [String]: Supported.req.secure [Boolean]: Supported.req.signedCookies [Object]: Stubbed out. This will always be {} because there is no request cycle concept in single page app contexts.req.stale [Boolean]: Stubbed out. This will always be false because there is no request cycle concept in single page app contexts.req.subdomains [Array of Strings]: Supported.req.xhr [Boolean]: Stubbed out. This will always be true because there is no request cycle concept in single page app contexts.Other req properties from the Node.js API: Not supported. They are uncommonly used in Express applications, so they are not even stubbed out. See feature request.MethodsAll Express request object methods are stubbed out but do nothing because because there is no request cycle concept in single page app contexts and all of the Request methods in Express pertain to the HTTP traffic flowing back and forth between the server and client.Likewise all other req methods from the Node.js API are not supported. They are uncommonly used in Express applications, so they are not even stubbed out. See feature request.New properties defined by single-page-expressreq.backButtonPressed [Boolean]: This will be true when the browser back button was pressed. A class backButtonPressed will also be added to the <html> element.req.forwardButtonPressed [Boolean]: This will be true when the browser forward button was pressed. A class forwardButtonPressed will also be added to the <html> element.req.singlePageExpress [Boolean]: This property will always be set to true. You can use it to detect whether your route is executing in the single-page-express context or not.Response objectPropertiesres.app [Object]: Supported, however the app object returned will not have all the same properties and methods as Express itself due to the API differences documented above.res.headersSent [Boolean]: Stubbed out. This will always be false because there is no request cycle concept in single page app contexts.res.locals [Object]: Stubbed out: This will always return {} because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.res.req [Object]: Supported.Other res properties from the Node.js API: Not supported. They are uncommonly used in Express applications, so they are not even stubbed out. See feature request.New properties defined by single-page-expressres.addTargets [Array of Strings]: If using the default render method, use this variable to set an array of query selectors representing elements to target for replacement in addition to whatever is set by app.defaultTargets. Elements found matching the query strings in the array will be replaced with the corresponding query string from the rendered template.res.afterRender(params) [Function]: If using the default render method, you can set this to a function that will execute after every render.res.beforeRender(params) [Function]: If using the default render method, you can set this to a function that will execute before every render.res.focus [String]: If using the default render method, if you set res.focus, the browser's focus will be set to that element after the page is rendered. If you do not set res.focus, then the browser's focus will be set to the first non-inert element in the DOM with the autofocus attribute, or, if none are present, it will be set to whatever the target element was set to for the DOM update.res.removeBaseTags [Boolean]: If using the default render method, this will remove any <base> tags from the page before doing the DOM update.res.removeHeadTags [Boolean]: If using the default render method, this will remove all children of the <head> tag except the title element from the page before doing the DOM update.res.removeLinkTags [Boolean]: If using the default render method, this will remove any <link> tags from the page before doing the DOM update.res.removeMetaTags [Boolean]: If using the default render method, this will remove any <meta> tags from the page before doing the DOM update.res.removeScriptTags [Boolean]: If using the default render method, this will remove any <script> tags from the page before doing the DOM update.res.removeStyleTags [Boolean]: If using the default render method, this will remove any <style> tags from the page before doing the DOM update.res.removeTemplateTags [Boolean]: If using the default render method, this will remove any <template> tags from the page before doing the DOM update.res.target [String or Array of Strings]: If using the default render method, use this variable to set a query selector or array of query selectors to determine which DOM node contents will be replaced by your template render's contents. If none is supplied, and neither app.defaultTarget nor app.defaultTargets is set, then the contents of the <body> tag will be replaced with the output of your rendered template.res.title [String]: If using the default render method, use this variable to set a page title for the new render.res.updateDelay [Number]: If using the default render method, use this variable to set a delay in milliseconds before the render occurs. If not using the default render method, this property will still allow you to specify a delay before resetting the scroll position.res.resetScroll [Boolean]: Purges the memory of the scroll position for this route so that scroll position is reset to the top for this page and all its child containers.Methodsres.append(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.attachment(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.cookie(): Supported.res.clearCookie(): Supported.res.download(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.end(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.format(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.get(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.json(): Supported, but behaves differently than Express. This method will log the JSON data to the console.res.jsonp(): Stubbed out but does nothing because it is not useful in single page app contexts.res.links(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.location(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.redirect(): Supported.res.render(): Supported.res.send(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.sendFile(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.sendStatus(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.set(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.status(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.type(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.vary(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.Other res methods from the Node.js API: Not supported. They are uncommonly used in Express applications, so they are not even stubbed out. See feature request.Router objectNot supported: See feature request."})
window.siteTexts.push({file: "docs/single-page-express/2.0.0/usage/index.html", title: "Single Page Express — usage (2.0.0)", text: "InstallFirst, install single-page-express from npm.The package is distributed with the following builds available:dist/single-page-express.cjs: CommonJS bundle: const singlePageExpress = require('single-page-express')dist/single-page-express.js: Standalone bundle that can be included via <script> tags. Declares a global variable: singlePageExpressdist/single-page-express.min.js: Minified standalone bundle that can be included via <script> tags. Declares a global variable: singlePageExpressdist/single-page-express.mjs: ES module: import singlePageExpress from 'single-page-express'dist/single-page-express.min.mjs: Minified ES module: import singlePageExpress from 'single-page-express/min'UseThen, in your frontend code:const templatingEngine = require('') // define which templating engine to use here const templates = {} // load some templates hereFor templatingEngine, use something like teddy, mustache, or any other templating system that supports Express and works in the browser.For templates, create an object of key/value pairs where the key is the name of the template and the value is the template code.Once those variables are defined, you can call the single-page-express constructor.Below is an example using Teddy for templating and defining two simple templates.const templatingEngine = require('teddy/client') const templates = {   index: '<p>hello world</p>',   secondPage: '<p>this page has a {variable} in it</p>' } const app = require('single-page-express')({   templatingEngine,   templates })Defining routesThe various methods of defining routes like you would with Express are supported.A simple example:app.route('/').get(function (req, res) {   res.render('index', {}) })  app.route('/secondPage').get(function (req, res) {   res.render('secondPage', {     variable: 'variable with contents: \"hi there!\"' &nbsp;&nbsp;}) })Some more examples:// using the app.METHOD syntax app.get('/routeWithAppDotMethod', function (req, res) {   res.render('someTemplate', { some: 'model' }) })  // using the app.route('route').METHOD syntax app.route('/routeWithAppDotRouterDotMethod').get(function (req, res) {   res.render('someTemplate', { some: 'model' }) })  // route with params app.route('/route/:with/:params').get(function (req, res) {   console.log('req.params:', req.params)   res.render('someTemplate', { some: 'model' }) })  // route with express 4 wildcard syntax app.route('*').get(function (req, res) {   res.render('someTemplate', { some: 'model' }) })  // route with express 5 wildcard syntax app.route('*:all').get(function (req, res) {   res.render('someTemplate', { some: 'model' }) })  // handle a form submit app.route('/routeWithFormSubmit').post(function (req, res) {   console.log('req.body:', req.body)   res.render('someTemplate', { some: 'model' }) })You can also call app.triggerRoute(params) to activate the route callback registered for a given route, as though the link was clicked or a form was POSTed.Params accepted by app.triggerRoute include:route: Which route you're triggering.method: e.g. GET, POST, etc. (Case insensitive.)body: What to supply to req.body if you're triggering a POST.Controlling scroll position behaviorBy default, single-page-express will remember the scroll position of pages that have been visited. It will also remember the scroll position of child containers on each page as well, but only if those containers have assigned id attributes.If you wish to not remember the scroll position on a per route basis, supply res.resetScroll = true in your route. To disable this memory app-wide, set the alwaysScrollTop param to true in the constructor.Running the sample appsThere are 3 sample apps you can run to see demos of how single-page-express can be used:Basic frontend-only sample app:This is a minimalist demo of single-page-express that just demos various kinds of routes working as expected, but does not wire up any templating system or do anything other than log data to the console when the render method is called.To run it:npm cinpm run sample-app-basic-frontend-onlyOr npm run sample1Go to http://localhost:3000Basic frontend-only sample app with templating:Similar to the above demo, but includes a templating engine and demos page navigation in the single page app context.To run it:npm cinpm run sample-app-basic-frontend-only-with-templatingOr npm run sample2Go to http://localhost:3000Express-based sample app:This is a full Express app that demos sharing routes and templates on the backend and frontend.To run it:cd sampleApps/expressnpm cicd ../../npm run express-sampleOr npm run sample3Or cd into sampleApps/express and run npm ci and npm startGo to http://localhost:3000More complex Express-based sample app:Similar to the previous one but tests more features of single-page-express. This app exists mainly for the automated tests, but you can use it as a template for your app too if you like.To run it:cd sampleApps/express-complexnpm cicd ../../npm run express-express-complexOr npm run sample4Or cd into sampleApps/express-complex and run npm ci and npm startGo to http://localhost:3000"})
window.siteTexts.push({file: "docs/single-page-express/2.0.1/changelog/index.html", title: "Single Page Express — changelog (2.0.1)", text: "2.0.1Added support for middleware on routes.Updated dependencies.2.0.0Breaking: Changed default Express API version to 5.To migrate:Most apps probably only need to change * routes to *all.Apps that use more complex routing may need other changes.Full list of considerations for migrating to Express 5: https://expressjs.com/en/guide/migrating-5.htmlFixed a bug that caused req.body to populate {} instead of undefined in Express 5 mode.Fixed a bug that caused the default / route to not load in some situations.Fixed a bug that caused extra <head> tags to get inserted into the DOM with the default render method in some situations.Fixed issues in sample app 2.Updated dependencies.1.2.0Added view transition support in the default render method.Added support for multiple DOM update targets in the default render method.Added req.backButtonPressed and req.forwardButtonPressed to app.Added classes backButtonPressed and forwardButtonPressed which will populate on the <html> element if either button was pressed.Added [data-page-title] to the top of the list of accepted query selectors for sourcing content to announce to screen readers when a new page is rendered.Added new params to the res.beforeRender(params), beforeEveryRender(params), res.afterRender(params), and afterEveryRender(params) methods:It now supplies an object with:model: The data model supplied to the template to be rendered.doc: The document object created from the template after it is rendered.markup: The HTML string that will be written to the page.targets: The list of DOM nodes that will be updated.Fixed a bug that caused postRenderCallbacks not to function properly.Fixed a bug related to script tags from the rendered page being executed unnecessarily.Fixed a bug causing unnecessary outlines to appear on page transitions in Safari.Updated dependencies.1.1.1Fixed crash related to unfinished HTML validation feature.Updated dependencies.1.1.0Added feature which will allow single-page-express to remember the scroll position of pages that have been visited. It will also remember the scroll position of child containers on each page as well, but only if those containers have assigned id attributes.Added alwaysScrollTop param which will let you disable this behavior app wide and res.resetScroll which will let you disable this behavior on a per-route basis.Added new behaviors to the default render method. It will now:Update the attributes of the <html> and <head> tags.Add new children to the <head> tag if anything new is in the template render.Delay the DOM update until any new <link> or <script> tags load to prevent a FOUC.Set browser focus appropriately after the DOM update. Also added res.focus to let you set it manually.Announce page changes to screen readers.Added res properties which will let you remove elements from the <head> tag on a per route basis: res.removeMetaTags, res.removeStyleTags, res.removeLinkTags, res.removeScriptTags, res.removeBaseTags, res.removeTemplateTags. There is also res.removeHeadTags to remove all children of the <head> tag except the <title> tag.Added topBarRoutes param to allow restricting the top bar to certain routes.Added req.singlePageExpress which you can use to detect if your route is executing in the single-page-express context.Fixed a bug which caused back/forward buttons to not function properly sometimes.Fixed a bug which would cause the top bar not to ever hide if it was enabled but the default render method was replaced.Fixed a bug in the Express sample app that would cause server-rendering to fail on routes with more than one /.Added a new sample app.Added an automated test suite and a few starter tests.Refactored some code to simplify it.Removed some unneeded dependencies.Updated dependencies.1.0.3Fixed missing exports so you can require/import Single Page Express less verbosely in your projects.Updated docs to clarify what the different builds of Single Page Express are meant to be used for.Updated dependencies.1.0.2Fixed bug causing custom res variables to not be set properly during certain default render method calls.Fixed broken Express 5 support.Updated dependencies.1.0.1Fixed broken postinstall script.1.0.0Initial version."})
window.siteTexts.push({file: "docs/single-page-express/2.0.1/configuration/index.html", title: "Single Page Express — configuration (2.0.1)", text: "APIDefault render method behaviorThe default render method will handle both full page renders as well as rendering partials:If you set res.title, the page's title will be updated with its contents. Alternatively, if the template render output contains a <title> tag, the page's title will be updated with its contents.When the new page is rendered, it will be announced to screen readers. The content to read to screen readers will be sourced from one of the following querySelectors: [data-page-title], h1[aria-label], h1, or title in that order.If the template render contains an <html> or <head> tag and there are new attributes on the <html> or <head> tags that aren't present in the current document, those attributes will be set on the current document. This behavior is additive or replacement-level only. Attributes cannot be removed simply by omitting them in the template render. If you want to remove an attribute, do it with JavaScript, or set it to a different value in your template render.If there are any new children for the <head> in the template render, they will be inserted into the current document's <head> tag if they are not present already.If any of the new tags are <link> or <script> tags, the DOM update will be delayed until those external files load to prevent a flash of unstyled content.If you set res.removeMetaTags, all <meta> tags will be removed from the <head> before adding any new ones.If you set res.removeStyleTags, all <style> tags will be removed from the <head> before adding any new ones.If you set res.removeLinkTags, all <link> tags will be removed from the <head> before adding any new ones.If you set res.removeScriptTags, all <script> tags will be removed from the <head> before adding any new ones.If you set res.removeBaseTags, all <base> tags will be removed from the <head> before adding any new ones.If you set res.removeTemplateTags, all <template> tags will be removed from the <head> before adding any new ones.If you set res.removeHeadTags, all tags except <title> will be removed from the <head> before adding any new ones.If you set res.target, the DOM will be updated at that spot. res.target is a query selector, so an example value you could give it would be #my-container. That would replace the contents of the element with the id \"my-container\" with the output of your rendered template.If the output of your rendered template also has an element matching the same query selector, then the contents of that portion of the output will be all that is used to replace the target.If you do not set res.target and neither app.defaultTarget nor app.defaultTargets is set, then the contents of the <body> tag will be replaced with the output of your rendered template.You can also supply an array of query selectors to res.target. Elements found matching the query selectors in the array will be replaced with the corresponding query selectors from the rendered template.If you set res.appendTargets = true, any new target(s) you add will be in addition to whatever is set by app.defaultTarget or app.defaultTargets.If you set res.focus, the browser's focus will be set to that element after the page is rendered. If you do not set res.focus, then the browser's focus will be set to the first non-inert element in the DOM with the autofocus attribute, or, if none are present, it will be set to whatever the target element was set to for the DOM update. If there are multiple targets, the first target on the list will be what is selected.There are also hooks for setting animations as well. See \"Hooks for setting animations\" below.If this DOM manipulation behavior is undesirable to you, you can supply your own render method instead and do whatever you like. To supply your own render method, see the constructor parameter documentation below.Constructor parametersBasic configurationexpressVersion [Number]: Optionally set which version of the Express API to use for route string parsing. Supports values 4 or 5. Express 3 and below are not supported. Defaults to 5.templatingEngine [String]: Which Express templating system to use. You must include the package in your app and supply the module as an argument to this param. This param is required if you use the default render method and do not supply your own.templates [Object]: Supply an object with keys that are template names and values that are template strings. This param is required if you use the default render method and do not supply your own.renderMethod(template, model callback) [Function]: Optionally supply a function to execute when res.render is called in your routes. If you do not provide one, a default one will be used that will render your template with your chosen templating engine and make appropriate updates to the DOM. See below for details about what the default render method does specifically and how to customize its behavior.disableTopbar [Boolean]: Disable the top bar loading bar. Default: false (the loading bar is enabled by default)topbarConfig [Object]: Options to supply to top bar to customize its aesthetics and behavior. See the site's documentation for a list of options.topBarRoutes [Array of Strings]: Which routes to use top bar on. Defaults to all if this option is not supplied.alwaysScrollTop [Boolean]: Always scroll to the top of the page after every render. Default: false (the default render method will remember the scroll position of each page visited and restore that scroll position when you revisit those pages)Customizing the default render method's behaviorThese constructor params are only relevant if you're not supplying a custom render method.Pre-renderbeforeEveryRender(params) [Function]: Optionally supply a function to execute just before your template is rendered and written to the DOM. Useful for beginning a CSS transition.You can also set res.beforeRender(params) [Function] on a per request basis.The params argument contains:model [Object]: The data model supplied to the template to be rendered.doc [String]: The document object created from the template after it is rendered.markup [String]: The HTML string that will be written to the page.targets [Array of Strings]: The list of DOM nodes that will be updated.defaultTarget [String]: Query string representing the default element to target if one is not supplied by res.target. Defaults to the <body> tag if neither res.target or app.defaultTarget is supplied.defaultTargets [Array of Strings]: Array of query strings representing elements to target for replacement if such an array is not supplied by res.target. Elements found matching the query strings in the array will be replaced with the corresponding query string from the rendered template.updateDelay [Number]: How long to wait in milliseconds between rendering the template and writing its contents to the DOM. This is useful to give your animations time to animate if you're using animations. Default: 0.You can also set res.updateDelay on a per request basis.Post-renderafterEveryRender(params) [Function]: Optionally supply a function to execute just after your template is rendered and written to the DOM. Useful for finishing a CSS transition.You can also set res.afterRender(params) [Function] on a per request basis.The params argument contains:model [Object]: The data model supplied to the template rendered.doc [String]: The document object created from the template after it was rendered.markup [String]: The HTML string that was written to the page.targets [Array of Strings]: The list of DOM nodes that were updated.postRenderCallbacks [Object]: Optionally supply an object with keys that are template names and values that are functions to execute after that template renders. You can also supply * as a key to execute a post-render callback after every template render.Application objectWhen you call the constructor, it will return an app object.PropertiesafterEveryRender(params) [Function]: Function to execute after every template render sourced from the constructor params.alwaysScrollTop [Boolean]: If true, the app will not remember scroll position on a per-page basis.appVars [Object]: List of variables stored via app.set() and retrieved with app.get().beforeEveryRender(params) [Function]: Function to execute before every template render sourced from the constructor params.defaultTarget [String]: Query string representing the default element to target if one is not supplied by res.target.defaultTargets [Array of Strings]: Optional array of query strings representing elements to target for replacement if such an array is not supplied by res.target.expressVersion [Number]: Which version of the Express API to use for route string parsing sourced from the constructor params.postRenderCallbacks [Object]: List of callback functions to execute after a render event occurs sourced from the constructor params.routes [Object]: List of routes registered with single-page-express.routeCallbacks [Object]: List of callback functions executed when a given route is visited.templates [Object]: List of templates loaded into into single-page-express sourced from the constructor params.templatingEngine [String]: The templating engine module loaded into single-page-express sourced from the constructor params.topbarEnabled [Boolean]: Whether or not the top loading bar is enabled.topbarRoutes [Array of Strings]: Which routes to use the top loading bar on; defaults to all if this option is not supplied.updateDelay [Number]: How long to wait before rendering a template sourced from constructor params.urls [Object]: List of URLs that have been visited and metadata about them.Express API implementationsingle-page-express is a partial frontend implementation of the Express API. Below is a full list of Express API methods and the degree to which it is implemented.App constructor methodsNot supported: None from Express are implemented. single-page-express implements its own constructor which is described above.Application objectSettingscase sensitive routing [Boolean]: Supported. Defaults to false.env [String]: Supported. Defaults to production.etag: Not supported because there is no request cycle concept in single page app contexts.jsonp callback name: Not supported because it is not useful in single page app contexts.json escape: Not supported because it is not useful in single page app contexts.json replacer: Not supported because it is not useful in single page app contexts.json spaces: Not supported because it is not useful in single page app contexts.query parser [Boolean]: Partially supported. In Express there are multiple options, but in single-page-express you can set it to either true or false. It defaults to true.strict routing [Boolean]: Supported. Defaults to false.subdomain offset [Number]: Supported. Defaults to 2.trust proxy: Not supported because there is no request cycle concept in single page app contexts.views: Not supported because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.view cache: Not supported because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.view engine: Not supported because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.x-powered-by: Not supported because there is no request cycle concept in single page app contexts.Propertiesapp.locals [Object]: Stubbed out. This will always return {} because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.app.mountpath [String]: Stubbed out. This will always return '' because single-page-express does not have a concept of app mounting in the way that Express does. See feature request.Eventsmount: Stubbed out but does nothing because single-page-express does not have a concept of app mounting in the way that Express does. See feature request.Methodsapp.all(): Supported.app.delete(): Supported.app.disable(): Supported.app.disabled(): Supported.app.enable(): Supported.app.enabled(): Supported.app.engine(): Stubbed out but does nothing because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.app.get(): Supported. (Both versions.)app.listen(): Stubbed out but does nothing because there is no \"server\" concept in single page app contexts.app.METHOD(): Supported.app.param(): Stubbed out but does nothing because this feature has not been implemented yet. See feature request.app.path(): Stubbed out but does nothing because single-page-express does not have a concept of app mounting in the way that Express does. See feature request.app.post(): Supported.app.put(): Supported.app.render(): Supported.app.route(): Supported.app.set(): Supported.app.use(): Stubbed out but does nothing because single-page-express does not have a concept of app middleware in the way that Express does. See feature request.New methods defined by single-page-expressapp.triggerRoute(params): This will activate the route callback registered for a given route, as though a link was clicked or a form was POSTed.Params accepted by app.triggerRoute include:route [String]: Which route you're triggering.method [String]: e.g. GET, POST, etc. (Case insensitive.)body [Object]: What to supply to req.body if you're triggering a POST.Request objectPropertiesreq.app [Object]: Supported, however the app object returned will not have all the same properties and methods as Express itself due to the API differences documented above.req.baseUrl [String]: Stubbed out. This will always be '' because single-page-express does not have a concept of app mounting in the way that Express does. See feature request.req.body [Object]: Supported.req.cookies [Object]: Supported.req.fresh [Boolean]: Stubbed out. This will always be true because there is no request cycle concept in single page app contexts.req.hostname [String]: Supported.req.ip [String]: Stubbed out. This will always be 127.0.0.1 because there is no request cycle concept in single page app contexts.req.ips [Array of Strings]: Stubbed out. This will always be [] because there is no request cycle concept in single page app contexts.req.method [String]: Supported.req.originalUrl [String]: Supported.req.params [Object]: Supported.req.path [String]: Supported.req.protocol [String]: Supported.req.query [String]: Supported.req.res [Object]: Supported.req.route [String]: Supported.req.secure [Boolean]: Supported.req.signedCookies [Object]: Stubbed out. This will always be {} because there is no request cycle concept in single page app contexts.req.stale [Boolean]: Stubbed out. This will always be false because there is no request cycle concept in single page app contexts.req.subdomains [Array of Strings]: Supported.req.xhr [Boolean]: Stubbed out. This will always be true because there is no request cycle concept in single page app contexts.Other req properties from the Node.js API: Not supported. They are uncommonly used in Express applications, so they are not even stubbed out. See feature request.MethodsAll Express request object methods are stubbed out but do nothing because because there is no request cycle concept in single page app contexts and all of the Request methods in Express pertain to the HTTP traffic flowing back and forth between the server and client.Likewise all other req methods from the Node.js API are not supported. They are uncommonly used in Express applications, so they are not even stubbed out. See feature request.New properties defined by single-page-expressreq.backButtonPressed [Boolean]: This will be true when the browser back button was pressed. A class backButtonPressed will also be added to the <html> element.req.forwardButtonPressed [Boolean]: This will be true when the browser forward button was pressed. A class forwardButtonPressed will also be added to the <html> element.req.singlePageExpress [Boolean]: This property will always be set to true. You can use it to detect whether your route is executing in the single-page-express context or not.Response objectPropertiesres.app [Object]: Supported, however the app object returned will not have all the same properties and methods as Express itself due to the API differences documented above.res.headersSent [Boolean]: Stubbed out. This will always be false because there is no request cycle concept in single page app contexts.res.locals [Object]: Stubbed out: This will always return {} because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.res.req [Object]: Supported.Other res properties from the Node.js API: Not supported. They are uncommonly used in Express applications, so they are not even stubbed out. See feature request.New properties defined by single-page-expressres.addTargets [Array of Strings]: If using the default render method, use this variable to set an array of query selectors representing elements to target for replacement in addition to whatever is set by app.defaultTargets. Elements found matching the query strings in the array will be replaced with the corresponding query string from the rendered template.res.afterRender(params) [Function]: If using the default render method, you can set this to a function that will execute after every render.res.beforeRender(params) [Function]: If using the default render method, you can set this to a function that will execute before every render.res.focus [String]: If using the default render method, if you set res.focus, the browser's focus will be set to that element after the page is rendered. If you do not set res.focus, then the browser's focus will be set to the first non-inert element in the DOM with the autofocus attribute, or, if none are present, it will be set to whatever the target element was set to for the DOM update.res.removeBaseTags [Boolean]: If using the default render method, this will remove any <base> tags from the page before doing the DOM update.res.removeHeadTags [Boolean]: If using the default render method, this will remove all children of the <head> tag except the title element from the page before doing the DOM update.res.removeLinkTags [Boolean]: If using the default render method, this will remove any <link> tags from the page before doing the DOM update.res.removeMetaTags [Boolean]: If using the default render method, this will remove any <meta> tags from the page before doing the DOM update.res.removeScriptTags [Boolean]: If using the default render method, this will remove any <script> tags from the page before doing the DOM update.res.removeStyleTags [Boolean]: If using the default render method, this will remove any <style> tags from the page before doing the DOM update.res.removeTemplateTags [Boolean]: If using the default render method, this will remove any <template> tags from the page before doing the DOM update.res.target [String or Array of Strings]: If using the default render method, use this variable to set a query selector or array of query selectors to determine which DOM node contents will be replaced by your template render's contents. If none is supplied, and neither app.defaultTarget nor app.defaultTargets is set, then the contents of the <body> tag will be replaced with the output of your rendered template.res.title [String]: If using the default render method, use this variable to set a page title for the new render.res.updateDelay [Number]: If using the default render method, use this variable to set a delay in milliseconds before the render occurs. If not using the default render method, this property will still allow you to specify a delay before resetting the scroll position.res.resetScroll [Boolean]: Purges the memory of the scroll position for this route so that scroll position is reset to the top for this page and all its child containers.Methodsres.append(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.attachment(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.cookie(): Supported.res.clearCookie(): Supported.res.download(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.end(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.format(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.get(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.json(): Supported, but behaves differently than Express. This method will log the JSON data to the console.res.jsonp(): Stubbed out but does nothing because it is not useful in single page app contexts.res.links(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.location(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.redirect(): Supported.res.render(): Supported.res.send(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.sendFile(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.sendStatus(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.set(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.status(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.type(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.vary(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.Other res methods from the Node.js API: Not supported. They are uncommonly used in Express applications, so they are not even stubbed out. See feature request.Router objectNot supported: See feature request."})
window.siteTexts.push({file: "docs/single-page-express/2.0.1/usage/index.html", title: "Single Page Express — usage (2.0.1)", text: "InstallFirst, install single-page-express from npm.The package is distributed with the following builds available:dist/single-page-express.cjs: CommonJS bundle: const singlePageExpress = require('single-page-express')dist/single-page-express.js: Standalone bundle that can be included via <script> tags. Declares a global variable: singlePageExpressdist/single-page-express.min.js: Minified standalone bundle that can be included via <script> tags. Declares a global variable: singlePageExpressdist/single-page-express.mjs: ES module: import singlePageExpress from 'single-page-express'dist/single-page-express.min.mjs: Minified ES module: import singlePageExpress from 'single-page-express/min'UseThen, in your frontend code:const templatingEngine = require('') // define which templating engine to use here const templates = {} // load some templates hereFor templatingEngine, use something like teddy, mustache, or any other templating system that supports Express and works in the browser.For templates, create an object of key/value pairs where the key is the name of the template and the value is the template code.Once those variables are defined, you can call the single-page-express constructor.Below is an example using Teddy for templating and defining two simple templates.const templatingEngine = require('teddy/client') const templates = {   index: '<p>hello world</p>',   secondPage: '<p>this page has a {variable} in it</p>' } const app = require('single-page-express')({   templatingEngine,   templates })Defining routesThe various methods of defining routes like you would with Express are supported.A simple example:app.route('/').get(function (req, res) {   res.render('index', {}) })  app.route('/secondPage').get(function (req, res) {   res.render('secondPage', {     variable: 'variable with contents: \"hi there!\"' &nbsp;&nbsp;}) })Some more examples:// using the app.METHOD syntax app.get('/routeWithAppDotMethod', function (req, res) {   res.render('someTemplate', { some: 'model' }) })  // using the app.route('route').METHOD syntax app.route('/routeWithAppDotRouterDotMethod').get(function (req, res) {   res.render('someTemplate', { some: 'model' }) })  // route with params app.route('/route/:with/:params').get(function (req, res) {   console.log('req.params:', req.params)   res.render('someTemplate', { some: 'model' }) })  // route with express 4 wildcard syntax app.route('*').get(function (req, res) {   res.render('someTemplate', { some: 'model' }) })  // route with express 5 wildcard syntax app.route('*:all').get(function (req, res) {   res.render('someTemplate', { some: 'model' }) })  // handle a form submit app.route('/routeWithFormSubmit').post(function (req, res) {   console.log('req.body:', req.body)   res.render('someTemplate', { some: 'model' }) })You can also call app.triggerRoute(params) to activate the route callback registered for a given route, as though the link was clicked or a form was POSTed.Params accepted by app.triggerRoute include:route: Which route you're triggering.method: e.g. GET, POST, etc. (Case insensitive.)body: What to supply to req.body if you're triggering a POST.Controlling scroll position behaviorBy default, single-page-express will remember the scroll position of pages that have been visited. It will also remember the scroll position of child containers on each page as well, but only if those containers have assigned id attributes.If you wish to not remember the scroll position on a per route basis, supply res.resetScroll = true in your route. To disable this memory app-wide, set the alwaysScrollTop param to true in the constructor.Running the sample appsThere are 3 sample apps you can run to see demos of how single-page-express can be used:Basic frontend-only sample app:This is a minimalist demo of single-page-express that just demos various kinds of routes working as expected, but does not wire up any templating system or do anything other than log data to the console when the render method is called.To run it:npm cinpm run sample-app-basic-frontend-onlyOr npm run sample1Go to http://localhost:3000Basic frontend-only sample app with templating:Similar to the above demo, but includes a templating engine and demos page navigation in the single page app context.To run it:npm cinpm run sample-app-basic-frontend-only-with-templatingOr npm run sample2Go to http://localhost:3000Express-based sample app:This is a full Express app that demos sharing routes and templates on the backend and frontend.To run it:cd sampleApps/expressnpm cicd ../../npm run express-sampleOr npm run sample3Or cd into sampleApps/express and run npm ci and npm startGo to http://localhost:3000More complex Express-based sample app:Similar to the previous one but tests more features of single-page-express. This app exists mainly for the automated tests, but you can use it as a template for your app too if you like.To run it:cd sampleApps/express-complexnpm cicd ../../npm run express-express-complexOr npm run sample4Or cd into sampleApps/express-complex and run npm ci and npm startGo to http://localhost:3000"})
window.siteTexts.push({file: "docs/single-page-express/2.0.2/changelog/index.html", title: "Single Page Express — changelog (2.0.2)", text: "2.0.2Fixed regression that caused middleware support to break routes without middleware.Updated dependencies.2.0.1Added support for middleware on routes.Updated dependencies.2.0.0Breaking: Changed default Express API version to 5.To migrate:Most apps probably only need to change * routes to *all.Apps that use more complex routing may need other changes.Full list of considerations for migrating to Express 5: https://expressjs.com/en/guide/migrating-5.htmlFixed a bug that caused req.body to populate {} instead of undefined in Express 5 mode.Fixed a bug that caused the default / route to not load in some situations.Fixed a bug that caused extra <head> tags to get inserted into the DOM with the default render method in some situations.Fixed issues in sample app 2.Updated dependencies.1.2.0Added view transition support in the default render method.Added support for multiple DOM update targets in the default render method.Added req.backButtonPressed and req.forwardButtonPressed to app.Added classes backButtonPressed and forwardButtonPressed which will populate on the <html> element if either button was pressed.Added [data-page-title] to the top of the list of accepted query selectors for sourcing content to announce to screen readers when a new page is rendered.Added new params to the res.beforeRender(params), beforeEveryRender(params), res.afterRender(params), and afterEveryRender(params) methods:It now supplies an object with:model: The data model supplied to the template to be rendered.doc: The document object created from the template after it is rendered.markup: The HTML string that will be written to the page.targets: The list of DOM nodes that will be updated.Fixed a bug that caused postRenderCallbacks not to function properly.Fixed a bug related to script tags from the rendered page being executed unnecessarily.Fixed a bug causing unnecessary outlines to appear on page transitions in Safari.Updated dependencies.1.1.1Fixed crash related to unfinished HTML validation feature.Updated dependencies.1.1.0Added feature which will allow single-page-express to remember the scroll position of pages that have been visited. It will also remember the scroll position of child containers on each page as well, but only if those containers have assigned id attributes.Added alwaysScrollTop param which will let you disable this behavior app wide and res.resetScroll which will let you disable this behavior on a per-route basis.Added new behaviors to the default render method. It will now:Update the attributes of the <html> and <head> tags.Add new children to the <head> tag if anything new is in the template render.Delay the DOM update until any new <link> or <script> tags load to prevent a FOUC.Set browser focus appropriately after the DOM update. Also added res.focus to let you set it manually.Announce page changes to screen readers.Added res properties which will let you remove elements from the <head> tag on a per route basis: res.removeMetaTags, res.removeStyleTags, res.removeLinkTags, res.removeScriptTags, res.removeBaseTags, res.removeTemplateTags. There is also res.removeHeadTags to remove all children of the <head> tag except the <title> tag.Added topBarRoutes param to allow restricting the top bar to certain routes.Added req.singlePageExpress which you can use to detect if your route is executing in the single-page-express context.Fixed a bug which caused back/forward buttons to not function properly sometimes.Fixed a bug which would cause the top bar not to ever hide if it was enabled but the default render method was replaced.Fixed a bug in the Express sample app that would cause server-rendering to fail on routes with more than one /.Added a new sample app.Added an automated test suite and a few starter tests.Refactored some code to simplify it.Removed some unneeded dependencies.Updated dependencies.1.0.3Fixed missing exports so you can require/import Single Page Express less verbosely in your projects.Updated docs to clarify what the different builds of Single Page Express are meant to be used for.Updated dependencies.1.0.2Fixed bug causing custom res variables to not be set properly during certain default render method calls.Fixed broken Express 5 support.Updated dependencies.1.0.1Fixed broken postinstall script.1.0.0Initial version."})
window.siteTexts.push({file: "docs/single-page-express/2.0.2/configuration/index.html", title: "Single Page Express — configuration (2.0.2)", text: "APIDefault render method behaviorThe default render method will handle both full page renders as well as rendering partials:If you set res.title, the page's title will be updated with its contents. Alternatively, if the template render output contains a <title> tag, the page's title will be updated with its contents.When the new page is rendered, it will be announced to screen readers. The content to read to screen readers will be sourced from one of the following querySelectors: [data-page-title], h1[aria-label], h1, or title in that order.If the template render contains an <html> or <head> tag and there are new attributes on the <html> or <head> tags that aren't present in the current document, those attributes will be set on the current document. This behavior is additive or replacement-level only. Attributes cannot be removed simply by omitting them in the template render. If you want to remove an attribute, do it with JavaScript, or set it to a different value in your template render.If there are any new children for the <head> in the template render, they will be inserted into the current document's <head> tag if they are not present already.If any of the new tags are <link> or <script> tags, the DOM update will be delayed until those external files load to prevent a flash of unstyled content.If you set res.removeMetaTags, all <meta> tags will be removed from the <head> before adding any new ones.If you set res.removeStyleTags, all <style> tags will be removed from the <head> before adding any new ones.If you set res.removeLinkTags, all <link> tags will be removed from the <head> before adding any new ones.If you set res.removeScriptTags, all <script> tags will be removed from the <head> before adding any new ones.If you set res.removeBaseTags, all <base> tags will be removed from the <head> before adding any new ones.If you set res.removeTemplateTags, all <template> tags will be removed from the <head> before adding any new ones.If you set res.removeHeadTags, all tags except <title> will be removed from the <head> before adding any new ones.If you set res.target, the DOM will be updated at that spot. res.target is a query selector, so an example value you could give it would be #my-container. That would replace the contents of the element with the id \"my-container\" with the output of your rendered template.If the output of your rendered template also has an element matching the same query selector, then the contents of that portion of the output will be all that is used to replace the target.If you do not set res.target and neither app.defaultTarget nor app.defaultTargets is set, then the contents of the <body> tag will be replaced with the output of your rendered template.You can also supply an array of query selectors to res.target. Elements found matching the query selectors in the array will be replaced with the corresponding query selectors from the rendered template.If you set res.appendTargets = true, any new target(s) you add will be in addition to whatever is set by app.defaultTarget or app.defaultTargets.If you set res.focus, the browser's focus will be set to that element after the page is rendered. If you do not set res.focus, then the browser's focus will be set to the first non-inert element in the DOM with the autofocus attribute, or, if none are present, it will be set to whatever the target element was set to for the DOM update. If there are multiple targets, the first target on the list will be what is selected.There are also hooks for setting animations as well. See \"Hooks for setting animations\" below.If this DOM manipulation behavior is undesirable to you, you can supply your own render method instead and do whatever you like. To supply your own render method, see the constructor parameter documentation below.Constructor parametersBasic configurationexpressVersion [Number]: Optionally set which version of the Express API to use for route string parsing. Supports values 4 or 5. Express 3 and below are not supported. Defaults to 5.templatingEngine [String]: Which Express templating system to use. You must include the package in your app and supply the module as an argument to this param. This param is required if you use the default render method and do not supply your own.templates [Object]: Supply an object with keys that are template names and values that are template strings. This param is required if you use the default render method and do not supply your own.renderMethod(template, model callback) [Function]: Optionally supply a function to execute when res.render is called in your routes. If you do not provide one, a default one will be used that will render your template with your chosen templating engine and make appropriate updates to the DOM. See below for details about what the default render method does specifically and how to customize its behavior.disableTopbar [Boolean]: Disable the top bar loading bar. Default: false (the loading bar is enabled by default)topbarConfig [Object]: Options to supply to top bar to customize its aesthetics and behavior. See the site's documentation for a list of options.topBarRoutes [Array of Strings]: Which routes to use top bar on. Defaults to all if this option is not supplied.alwaysScrollTop [Boolean]: Always scroll to the top of the page after every render. Default: false (the default render method will remember the scroll position of each page visited and restore that scroll position when you revisit those pages)Customizing the default render method's behaviorThese constructor params are only relevant if you're not supplying a custom render method.Pre-renderbeforeEveryRender(params) [Function]: Optionally supply a function to execute just before your template is rendered and written to the DOM. Useful for beginning a CSS transition.You can also set res.beforeRender(params) [Function] on a per request basis.The params argument contains:model [Object]: The data model supplied to the template to be rendered.doc [String]: The document object created from the template after it is rendered.markup [String]: The HTML string that will be written to the page.targets [Array of Strings]: The list of DOM nodes that will be updated.defaultTarget [String]: Query string representing the default element to target if one is not supplied by res.target. Defaults to the <body> tag if neither res.target or app.defaultTarget is supplied.defaultTargets [Array of Strings]: Array of query strings representing elements to target for replacement if such an array is not supplied by res.target. Elements found matching the query strings in the array will be replaced with the corresponding query string from the rendered template.updateDelay [Number]: How long to wait in milliseconds between rendering the template and writing its contents to the DOM. This is useful to give your animations time to animate if you're using animations. Default: 0.You can also set res.updateDelay on a per request basis.Post-renderafterEveryRender(params) [Function]: Optionally supply a function to execute just after your template is rendered and written to the DOM. Useful for finishing a CSS transition.You can also set res.afterRender(params) [Function] on a per request basis.The params argument contains:model [Object]: The data model supplied to the template rendered.doc [String]: The document object created from the template after it was rendered.markup [String]: The HTML string that was written to the page.targets [Array of Strings]: The list of DOM nodes that were updated.postRenderCallbacks [Object]: Optionally supply an object with keys that are template names and values that are functions to execute after that template renders. You can also supply * as a key to execute a post-render callback after every template render.Application objectWhen you call the constructor, it will return an app object.PropertiesafterEveryRender(params) [Function]: Function to execute after every template render sourced from the constructor params.alwaysScrollTop [Boolean]: If true, the app will not remember scroll position on a per-page basis.appVars [Object]: List of variables stored via app.set() and retrieved with app.get().beforeEveryRender(params) [Function]: Function to execute before every template render sourced from the constructor params.defaultTarget [String]: Query string representing the default element to target if one is not supplied by res.target.defaultTargets [Array of Strings]: Optional array of query strings representing elements to target for replacement if such an array is not supplied by res.target.expressVersion [Number]: Which version of the Express API to use for route string parsing sourced from the constructor params.postRenderCallbacks [Object]: List of callback functions to execute after a render event occurs sourced from the constructor params.routes [Object]: List of routes registered with single-page-express.routeCallbacks [Object]: List of callback functions executed when a given route is visited.templates [Object]: List of templates loaded into into single-page-express sourced from the constructor params.templatingEngine [String]: The templating engine module loaded into single-page-express sourced from the constructor params.topbarEnabled [Boolean]: Whether or not the top loading bar is enabled.topbarRoutes [Array of Strings]: Which routes to use the top loading bar on; defaults to all if this option is not supplied.updateDelay [Number]: How long to wait before rendering a template sourced from constructor params.urls [Object]: List of URLs that have been visited and metadata about them.Express API implementationsingle-page-express is a partial frontend implementation of the Express API. Below is a full list of Express API methods and the degree to which it is implemented.App constructor methodsNot supported: None from Express are implemented. single-page-express implements its own constructor which is described above.Application objectSettingscase sensitive routing [Boolean]: Supported. Defaults to false.env [String]: Supported. Defaults to production.etag: Not supported because there is no request cycle concept in single page app contexts.jsonp callback name: Not supported because it is not useful in single page app contexts.json escape: Not supported because it is not useful in single page app contexts.json replacer: Not supported because it is not useful in single page app contexts.json spaces: Not supported because it is not useful in single page app contexts.query parser [Boolean]: Partially supported. In Express there are multiple options, but in single-page-express you can set it to either true or false. It defaults to true.strict routing [Boolean]: Supported. Defaults to false.subdomain offset [Number]: Supported. Defaults to 2.trust proxy: Not supported because there is no request cycle concept in single page app contexts.views: Not supported because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.view cache: Not supported because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.view engine: Not supported because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.x-powered-by: Not supported because there is no request cycle concept in single page app contexts.Propertiesapp.locals [Object]: Stubbed out. This will always return {} because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.app.mountpath [String]: Stubbed out. This will always return '' because single-page-express does not have a concept of app mounting in the way that Express does. See feature request.Eventsmount: Stubbed out but does nothing because single-page-express does not have a concept of app mounting in the way that Express does. See feature request.Methodsapp.all(): Supported.app.delete(): Supported.app.disable(): Supported.app.disabled(): Supported.app.enable(): Supported.app.enabled(): Supported.app.engine(): Stubbed out but does nothing because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.app.get(): Supported. (Both versions.)app.listen(): Stubbed out but does nothing because there is no \"server\" concept in single page app contexts.app.METHOD(): Supported.app.param(): Stubbed out but does nothing because this feature has not been implemented yet. See feature request.app.path(): Stubbed out but does nothing because single-page-express does not have a concept of app mounting in the way that Express does. See feature request.app.post(): Supported.app.put(): Supported.app.render(): Supported.app.route(): Supported.app.set(): Supported.app.use(): Stubbed out but does nothing because single-page-express does not have a concept of app middleware in the way that Express does. See feature request.New methods defined by single-page-expressapp.triggerRoute(params): This will activate the route callback registered for a given route, as though a link was clicked or a form was POSTed.Params accepted by app.triggerRoute include:route [String]: Which route you're triggering.method [String]: e.g. GET, POST, etc. (Case insensitive.)body [Object]: What to supply to req.body if you're triggering a POST.Request objectPropertiesreq.app [Object]: Supported, however the app object returned will not have all the same properties and methods as Express itself due to the API differences documented above.req.baseUrl [String]: Stubbed out. This will always be '' because single-page-express does not have a concept of app mounting in the way that Express does. See feature request.req.body [Object]: Supported.req.cookies [Object]: Supported.req.fresh [Boolean]: Stubbed out. This will always be true because there is no request cycle concept in single page app contexts.req.hostname [String]: Supported.req.ip [String]: Stubbed out. This will always be 127.0.0.1 because there is no request cycle concept in single page app contexts.req.ips [Array of Strings]: Stubbed out. This will always be [] because there is no request cycle concept in single page app contexts.req.method [String]: Supported.req.originalUrl [String]: Supported.req.params [Object]: Supported.req.path [String]: Supported.req.protocol [String]: Supported.req.query [String]: Supported.req.res [Object]: Supported.req.route [String]: Supported.req.secure [Boolean]: Supported.req.signedCookies [Object]: Stubbed out. This will always be {} because there is no request cycle concept in single page app contexts.req.stale [Boolean]: Stubbed out. This will always be false because there is no request cycle concept in single page app contexts.req.subdomains [Array of Strings]: Supported.req.xhr [Boolean]: Stubbed out. This will always be true because there is no request cycle concept in single page app contexts.Other req properties from the Node.js API: Not supported. They are uncommonly used in Express applications, so they are not even stubbed out. See feature request.MethodsAll Express request object methods are stubbed out but do nothing because because there is no request cycle concept in single page app contexts and all of the Request methods in Express pertain to the HTTP traffic flowing back and forth between the server and client.Likewise all other req methods from the Node.js API are not supported. They are uncommonly used in Express applications, so they are not even stubbed out. See feature request.New properties defined by single-page-expressreq.backButtonPressed [Boolean]: This will be true when the browser back button was pressed. A class backButtonPressed will also be added to the <html> element.req.forwardButtonPressed [Boolean]: This will be true when the browser forward button was pressed. A class forwardButtonPressed will also be added to the <html> element.req.singlePageExpress [Boolean]: This property will always be set to true. You can use it to detect whether your route is executing in the single-page-express context or not.Response objectPropertiesres.app [Object]: Supported, however the app object returned will not have all the same properties and methods as Express itself due to the API differences documented above.res.headersSent [Boolean]: Stubbed out. This will always be false because there is no request cycle concept in single page app contexts.res.locals [Object]: Stubbed out: This will always return {} because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.res.req [Object]: Supported.Other res properties from the Node.js API: Not supported. They are uncommonly used in Express applications, so they are not even stubbed out. See feature request.New properties defined by single-page-expressres.addTargets [Array of Strings]: If using the default render method, use this variable to set an array of query selectors representing elements to target for replacement in addition to whatever is set by app.defaultTargets. Elements found matching the query strings in the array will be replaced with the corresponding query string from the rendered template.res.afterRender(params) [Function]: If using the default render method, you can set this to a function that will execute after every render.res.beforeRender(params) [Function]: If using the default render method, you can set this to a function that will execute before every render.res.focus [String]: If using the default render method, if you set res.focus, the browser's focus will be set to that element after the page is rendered. If you do not set res.focus, then the browser's focus will be set to the first non-inert element in the DOM with the autofocus attribute, or, if none are present, it will be set to whatever the target element was set to for the DOM update.res.removeBaseTags [Boolean]: If using the default render method, this will remove any <base> tags from the page before doing the DOM update.res.removeHeadTags [Boolean]: If using the default render method, this will remove all children of the <head> tag except the title element from the page before doing the DOM update.res.removeLinkTags [Boolean]: If using the default render method, this will remove any <link> tags from the page before doing the DOM update.res.removeMetaTags [Boolean]: If using the default render method, this will remove any <meta> tags from the page before doing the DOM update.res.removeScriptTags [Boolean]: If using the default render method, this will remove any <script> tags from the page before doing the DOM update.res.removeStyleTags [Boolean]: If using the default render method, this will remove any <style> tags from the page before doing the DOM update.res.removeTemplateTags [Boolean]: If using the default render method, this will remove any <template> tags from the page before doing the DOM update.res.target [String or Array of Strings]: If using the default render method, use this variable to set a query selector or array of query selectors to determine which DOM node contents will be replaced by your template render's contents. If none is supplied, and neither app.defaultTarget nor app.defaultTargets is set, then the contents of the <body> tag will be replaced with the output of your rendered template.res.title [String]: If using the default render method, use this variable to set a page title for the new render.res.updateDelay [Number]: If using the default render method, use this variable to set a delay in milliseconds before the render occurs. If not using the default render method, this property will still allow you to specify a delay before resetting the scroll position.res.resetScroll [Boolean]: Purges the memory of the scroll position for this route so that scroll position is reset to the top for this page and all its child containers.Methodsres.append(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.attachment(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.cookie(): Supported.res.clearCookie(): Supported.res.download(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.end(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.format(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.get(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.json(): Supported, but behaves differently than Express. This method will log the JSON data to the console.res.jsonp(): Stubbed out but does nothing because it is not useful in single page app contexts.res.links(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.location(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.redirect(): Supported.res.render(): Supported.res.send(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.sendFile(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.sendStatus(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.set(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.status(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.type(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.vary(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.Other res methods from the Node.js API: Not supported. They are uncommonly used in Express applications, so they are not even stubbed out. See feature request.Router objectNot supported: See feature request."})
window.siteTexts.push({file: "docs/single-page-express/2.0.2/usage/index.html", title: "Single Page Express — usage (2.0.2)", text: "InstallFirst, install single-page-express from npm.The package is distributed with the following builds available:dist/single-page-express.cjs: CommonJS bundle: const singlePageExpress = require('single-page-express')dist/single-page-express.js: Standalone bundle that can be included via <script> tags. Declares a global variable: singlePageExpressdist/single-page-express.min.js: Minified standalone bundle that can be included via <script> tags. Declares a global variable: singlePageExpressdist/single-page-express.mjs: ES module: import singlePageExpress from 'single-page-express'dist/single-page-express.min.mjs: Minified ES module: import singlePageExpress from 'single-page-express/min'UseThen, in your frontend code:const templatingEngine = require('') // define which templating engine to use here const templates = {} // load some templates hereFor templatingEngine, use something like teddy, mustache, or any other templating system that supports Express and works in the browser.For templates, create an object of key/value pairs where the key is the name of the template and the value is the template code.Once those variables are defined, you can call the single-page-express constructor.Below is an example using Teddy for templating and defining two simple templates.const templatingEngine = require('teddy/client') const templates = {   index: '<p>hello world</p>',   secondPage: '<p>this page has a {variable} in it</p>' } const app = require('single-page-express')({   templatingEngine,   templates })Defining routesThe various methods of defining routes like you would with Express are supported.A simple example:app.route('/').get(function (req, res) {   res.render('index', {}) })  app.route('/secondPage').get(function (req, res) {   res.render('secondPage', {     variable: 'variable with contents: \"hi there!\"' &nbsp;&nbsp;}) })Some more examples:// using the app.METHOD syntax app.get('/routeWithAppDotMethod', function (req, res) {   res.render('someTemplate', { some: 'model' }) })  // using the app.route('route').METHOD syntax app.route('/routeWithAppDotRouterDotMethod').get(function (req, res) {   res.render('someTemplate', { some: 'model' }) })  // route with params app.route('/route/:with/:params').get(function (req, res) {   console.log('req.params:', req.params)   res.render('someTemplate', { some: 'model' }) })  // route with express 4 wildcard syntax app.route('*').get(function (req, res) {   res.render('someTemplate', { some: 'model' }) })  // route with express 5 wildcard syntax app.route('*:all').get(function (req, res) {   res.render('someTemplate', { some: 'model' }) })  // handle a form submit app.route('/routeWithFormSubmit').post(function (req, res) {   console.log('req.body:', req.body)   res.render('someTemplate', { some: 'model' }) })You can also call app.triggerRoute(params) to activate the route callback registered for a given route, as though the link was clicked or a form was POSTed.Params accepted by app.triggerRoute include:route: Which route you're triggering.method: e.g. GET, POST, etc. (Case insensitive.)body: What to supply to req.body if you're triggering a POST.Controlling scroll position behaviorBy default, single-page-express will remember the scroll position of pages that have been visited. It will also remember the scroll position of child containers on each page as well, but only if those containers have assigned id attributes.If you wish to not remember the scroll position on a per route basis, supply res.resetScroll = true in your route. To disable this memory app-wide, set the alwaysScrollTop param to true in the constructor.Running the sample appsThere are 3 sample apps you can run to see demos of how single-page-express can be used:Basic frontend-only sample app:This is a minimalist demo of single-page-express that just demos various kinds of routes working as expected, but does not wire up any templating system or do anything other than log data to the console when the render method is called.To run it:npm cinpm run sample-app-basic-frontend-onlyOr npm run sample1Go to http://localhost:3000Basic frontend-only sample app with templating:Similar to the above demo, but includes a templating engine and demos page navigation in the single page app context.To run it:npm cinpm run sample-app-basic-frontend-only-with-templatingOr npm run sample2Go to http://localhost:3000Express-based sample app:This is a full Express app that demos sharing routes and templates on the backend and frontend.To run it:cd sampleApps/expressnpm cicd ../../npm run express-sampleOr npm run sample3Or cd into sampleApps/express and run npm ci and npm startGo to http://localhost:3000More complex Express-based sample app:Similar to the previous one but tests more features of single-page-express. This app exists mainly for the automated tests, but you can use it as a template for your app too if you like.To run it:cd sampleApps/express-complexnpm cicd ../../npm run express-express-complexOr npm run sample4Or cd into sampleApps/express-complex and run npm ci and npm startGo to http://localhost:3000"})
window.siteTexts.push({file: "docs/single-page-express/2.0.3/changelog/index.html", title: "Single Page Express — changelog (2.0.3)", text: "2.0.3Fixed regression that caused after-render actions to break in Chrome in the default render method.Updated dependencies.2.0.2Fixed regression that caused middleware support to break routes without middleware.Updated dependencies.2.0.1Added support for middleware on routes.Updated dependencies.2.0.0Breaking: Changed default Express API version to 5.To migrate:Most apps probably only need to change * routes to *all.Apps that use more complex routing may need other changes.Full list of considerations for migrating to Express 5: https://expressjs.com/en/guide/migrating-5.htmlFixed a bug that caused req.body to populate {} instead of undefined in Express 5 mode.Fixed a bug that caused the default / route to not load in some situations.Fixed a bug that caused extra <head> tags to get inserted into the DOM with the default render method in some situations.Fixed issues in sample app 2.Updated dependencies.1.2.0Added view transition support in the default render method.Added support for multiple DOM update targets in the default render method.Added req.backButtonPressed and req.forwardButtonPressed to app.Added classes backButtonPressed and forwardButtonPressed which will populate on the <html> element if either button was pressed.Added [data-page-title] to the top of the list of accepted query selectors for sourcing content to announce to screen readers when a new page is rendered.Added new params to the res.beforeRender(params), beforeEveryRender(params), res.afterRender(params), and afterEveryRender(params) methods:It now supplies an object with:model: The data model supplied to the template to be rendered.doc: The document object created from the template after it is rendered.markup: The HTML string that will be written to the page.targets: The list of DOM nodes that will be updated.Fixed a bug that caused postRenderCallbacks not to function properly.Fixed a bug related to script tags from the rendered page being executed unnecessarily.Fixed a bug causing unnecessary outlines to appear on page transitions in Safari.Updated dependencies.1.1.1Fixed crash related to unfinished HTML validation feature.Updated dependencies.1.1.0Added feature which will allow single-page-express to remember the scroll position of pages that have been visited. It will also remember the scroll position of child containers on each page as well, but only if those containers have assigned id attributes.Added alwaysScrollTop param which will let you disable this behavior app wide and res.resetScroll which will let you disable this behavior on a per-route basis.Added new behaviors to the default render method. It will now:Update the attributes of the <html> and <head> tags.Add new children to the <head> tag if anything new is in the template render.Delay the DOM update until any new <link> or <script> tags load to prevent a FOUC.Set browser focus appropriately after the DOM update. Also added res.focus to let you set it manually.Announce page changes to screen readers.Added res properties which will let you remove elements from the <head> tag on a per route basis: res.removeMetaTags, res.removeStyleTags, res.removeLinkTags, res.removeScriptTags, res.removeBaseTags, res.removeTemplateTags. There is also res.removeHeadTags to remove all children of the <head> tag except the <title> tag.Added topBarRoutes param to allow restricting the top bar to certain routes.Added req.singlePageExpress which you can use to detect if your route is executing in the single-page-express context.Fixed a bug which caused back/forward buttons to not function properly sometimes.Fixed a bug which would cause the top bar not to ever hide if it was enabled but the default render method was replaced.Fixed a bug in the Express sample app that would cause server-rendering to fail on routes with more than one /.Added a new sample app.Added an automated test suite and a few starter tests.Refactored some code to simplify it.Removed some unneeded dependencies.Updated dependencies.1.0.3Fixed missing exports so you can require/import Single Page Express less verbosely in your projects.Updated docs to clarify what the different builds of Single Page Express are meant to be used for.Updated dependencies.1.0.2Fixed bug causing custom res variables to not be set properly during certain default render method calls.Fixed broken Express 5 support.Updated dependencies.1.0.1Fixed broken postinstall script.1.0.0Initial version."})
window.siteTexts.push({file: "docs/single-page-express/2.0.3/configuration/index.html", title: "Single Page Express — configuration (2.0.3)", text: "APIDefault render method behaviorThe default render method will handle both full page renders as well as rendering partials:If you set res.title, the page's title will be updated with its contents. Alternatively, if the template render output contains a <title> tag, the page's title will be updated with its contents.When the new page is rendered, it will be announced to screen readers. The content to read to screen readers will be sourced from one of the following querySelectors: [data-page-title], h1[aria-label], h1, or title in that order.If the template render contains an <html> or <head> tag and there are new attributes on the <html> or <head> tags that aren't present in the current document, those attributes will be set on the current document. This behavior is additive or replacement-level only. Attributes cannot be removed simply by omitting them in the template render. If you want to remove an attribute, do it with JavaScript, or set it to a different value in your template render.If there are any new children for the <head> in the template render, they will be inserted into the current document's <head> tag if they are not present already.If any of the new tags are <link> or <script> tags, the DOM update will be delayed until those external files load to prevent a flash of unstyled content.If you set res.removeMetaTags, all <meta> tags will be removed from the <head> before adding any new ones.If you set res.removeStyleTags, all <style> tags will be removed from the <head> before adding any new ones.If you set res.removeLinkTags, all <link> tags will be removed from the <head> before adding any new ones.If you set res.removeScriptTags, all <script> tags will be removed from the <head> before adding any new ones.If you set res.removeBaseTags, all <base> tags will be removed from the <head> before adding any new ones.If you set res.removeTemplateTags, all <template> tags will be removed from the <head> before adding any new ones.If you set res.removeHeadTags, all tags except <title> will be removed from the <head> before adding any new ones.If you set res.target, the DOM will be updated at that spot. res.target is a query selector, so an example value you could give it would be #my-container. That would replace the contents of the element with the id \"my-container\" with the output of your rendered template.If the output of your rendered template also has an element matching the same query selector, then the contents of that portion of the output will be all that is used to replace the target.If you do not set res.target and neither app.defaultTarget nor app.defaultTargets is set, then the contents of the <body> tag will be replaced with the output of your rendered template.You can also supply an array of query selectors to res.target. Elements found matching the query selectors in the array will be replaced with the corresponding query selectors from the rendered template.If you set res.appendTargets = true, any new target(s) you add will be in addition to whatever is set by app.defaultTarget or app.defaultTargets.If you set res.focus, the browser's focus will be set to that element after the page is rendered. If you do not set res.focus, then the browser's focus will be set to the first non-inert element in the DOM with the autofocus attribute, or, if none are present, it will be set to whatever the target element was set to for the DOM update. If there are multiple targets, the first target on the list will be what is selected.There are also hooks for setting animations as well. See \"Hooks for setting animations\" below.If this DOM manipulation behavior is undesirable to you, you can supply your own render method instead and do whatever you like. To supply your own render method, see the constructor parameter documentation below.Constructor parametersBasic configurationexpressVersion [Number]: Optionally set which version of the Express API to use for route string parsing. Supports values 4 or 5. Express 3 and below are not supported. Defaults to 5.templatingEngine [String]: Which Express templating system to use. You must include the package in your app and supply the module as an argument to this param. This param is required if you use the default render method and do not supply your own.templates [Object]: Supply an object with keys that are template names and values that are template strings. This param is required if you use the default render method and do not supply your own.renderMethod(template, model callback) [Function]: Optionally supply a function to execute when res.render is called in your routes. If you do not provide one, a default one will be used that will render your template with your chosen templating engine and make appropriate updates to the DOM. See below for details about what the default render method does specifically and how to customize its behavior.disableTopbar [Boolean]: Disable the top bar loading bar. Default: false (the loading bar is enabled by default)topbarConfig [Object]: Options to supply to top bar to customize its aesthetics and behavior. See the site's documentation for a list of options.topBarRoutes [Array of Strings]: Which routes to use top bar on. Defaults to all if this option is not supplied.alwaysScrollTop [Boolean]: Always scroll to the top of the page after every render. Default: false (the default render method will remember the scroll position of each page visited and restore that scroll position when you revisit those pages)Customizing the default render method's behaviorThese constructor params are only relevant if you're not supplying a custom render method.Pre-renderbeforeEveryRender(params) [Function]: Optionally supply a function to execute just before your template is rendered and written to the DOM. Useful for beginning a CSS transition.You can also set res.beforeRender(params) [Function] on a per request basis.The params argument contains:model [Object]: The data model supplied to the template to be rendered.doc [String]: The document object created from the template after it is rendered.markup [String]: The HTML string that will be written to the page.targets [Array of Strings]: The list of DOM nodes that will be updated.defaultTarget [String]: Query string representing the default element to target if one is not supplied by res.target. Defaults to the <body> tag if neither res.target or app.defaultTarget is supplied.defaultTargets [Array of Strings]: Array of query strings representing elements to target for replacement if such an array is not supplied by res.target. Elements found matching the query strings in the array will be replaced with the corresponding query string from the rendered template.updateDelay [Number]: How long to wait in milliseconds between rendering the template and writing its contents to the DOM. This is useful to give your animations time to animate if you're using animations. Default: 0.You can also set res.updateDelay on a per request basis.Post-renderafterEveryRender(params) [Function]: Optionally supply a function to execute just after your template is rendered and written to the DOM. Useful for finishing a CSS transition.You can also set res.afterRender(params) [Function] on a per request basis.The params argument contains:model [Object]: The data model supplied to the template rendered.doc [String]: The document object created from the template after it was rendered.markup [String]: The HTML string that was written to the page.targets [Array of Strings]: The list of DOM nodes that were updated.postRenderCallbacks [Object]: Optionally supply an object with keys that are template names and values that are functions to execute after that template renders. You can also supply * as a key to execute a post-render callback after every template render.Application objectWhen you call the constructor, it will return an app object.PropertiesafterEveryRender(params) [Function]: Function to execute after every template render sourced from the constructor params.alwaysScrollTop [Boolean]: If true, the app will not remember scroll position on a per-page basis.appVars [Object]: List of variables stored via app.set() and retrieved with app.get().beforeEveryRender(params) [Function]: Function to execute before every template render sourced from the constructor params.defaultTarget [String]: Query string representing the default element to target if one is not supplied by res.target.defaultTargets [Array of Strings]: Optional array of query strings representing elements to target for replacement if such an array is not supplied by res.target.expressVersion [Number]: Which version of the Express API to use for route string parsing sourced from the constructor params.postRenderCallbacks [Object]: List of callback functions to execute after a render event occurs sourced from the constructor params.routes [Object]: List of routes registered with single-page-express.routeCallbacks [Object]: List of callback functions executed when a given route is visited.templates [Object]: List of templates loaded into into single-page-express sourced from the constructor params.templatingEngine [String]: The templating engine module loaded into single-page-express sourced from the constructor params.topbarEnabled [Boolean]: Whether or not the top loading bar is enabled.topbarRoutes [Array of Strings]: Which routes to use the top loading bar on; defaults to all if this option is not supplied.updateDelay [Number]: How long to wait before rendering a template sourced from constructor params.urls [Object]: List of URLs that have been visited and metadata about them.Express API implementationsingle-page-express is a partial frontend implementation of the Express API. Below is a full list of Express API methods and the degree to which it is implemented.App constructor methodsNot supported: None from Express are implemented. single-page-express implements its own constructor which is described above.Application objectSettingscase sensitive routing [Boolean]: Supported. Defaults to false.env [String]: Supported. Defaults to production.etag: Not supported because there is no request cycle concept in single page app contexts.jsonp callback name: Not supported because it is not useful in single page app contexts.json escape: Not supported because it is not useful in single page app contexts.json replacer: Not supported because it is not useful in single page app contexts.json spaces: Not supported because it is not useful in single page app contexts.query parser [Boolean]: Partially supported. In Express there are multiple options, but in single-page-express you can set it to either true or false. It defaults to true.strict routing [Boolean]: Supported. Defaults to false.subdomain offset [Number]: Supported. Defaults to 2.trust proxy: Not supported because there is no request cycle concept in single page app contexts.views: Not supported because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.view cache: Not supported because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.view engine: Not supported because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.x-powered-by: Not supported because there is no request cycle concept in single page app contexts.Propertiesapp.locals [Object]: Stubbed out. This will always return {} because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.app.mountpath [String]: Stubbed out. This will always return '' because single-page-express does not have a concept of app mounting in the way that Express does. See feature request.Eventsmount: Stubbed out but does nothing because single-page-express does not have a concept of app mounting in the way that Express does. See feature request.Methodsapp.all(): Supported.app.delete(): Supported.app.disable(): Supported.app.disabled(): Supported.app.enable(): Supported.app.enabled(): Supported.app.engine(): Stubbed out but does nothing because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.app.get(): Supported. (Both versions.)app.listen(): Stubbed out but does nothing because there is no \"server\" concept in single page app contexts.app.METHOD(): Supported.app.param(): Stubbed out but does nothing because this feature has not been implemented yet. See feature request.app.path(): Stubbed out but does nothing because single-page-express does not have a concept of app mounting in the way that Express does. See feature request.app.post(): Supported.app.put(): Supported.app.render(): Supported.app.route(): Supported.app.set(): Supported.app.use(): Stubbed out but does nothing because single-page-express does not have a concept of app middleware in the way that Express does. See feature request.New methods defined by single-page-expressapp.triggerRoute(params): This will activate the route callback registered for a given route, as though a link was clicked or a form was POSTed.Params accepted by app.triggerRoute include:route [String]: Which route you're triggering.method [String]: e.g. GET, POST, etc. (Case insensitive.)body [Object]: What to supply to req.body if you're triggering a POST.Request objectPropertiesreq.app [Object]: Supported, however the app object returned will not have all the same properties and methods as Express itself due to the API differences documented above.req.baseUrl [String]: Stubbed out. This will always be '' because single-page-express does not have a concept of app mounting in the way that Express does. See feature request.req.body [Object]: Supported.req.cookies [Object]: Supported.req.fresh [Boolean]: Stubbed out. This will always be true because there is no request cycle concept in single page app contexts.req.hostname [String]: Supported.req.ip [String]: Stubbed out. This will always be 127.0.0.1 because there is no request cycle concept in single page app contexts.req.ips [Array of Strings]: Stubbed out. This will always be [] because there is no request cycle concept in single page app contexts.req.method [String]: Supported.req.originalUrl [String]: Supported.req.params [Object]: Supported.req.path [String]: Supported.req.protocol [String]: Supported.req.query [String]: Supported.req.res [Object]: Supported.req.route [String]: Supported.req.secure [Boolean]: Supported.req.signedCookies [Object]: Stubbed out. This will always be {} because there is no request cycle concept in single page app contexts.req.stale [Boolean]: Stubbed out. This will always be false because there is no request cycle concept in single page app contexts.req.subdomains [Array of Strings]: Supported.req.xhr [Boolean]: Stubbed out. This will always be true because there is no request cycle concept in single page app contexts.Other req properties from the Node.js API: Not supported. They are uncommonly used in Express applications, so they are not even stubbed out. See feature request.MethodsAll Express request object methods are stubbed out but do nothing because because there is no request cycle concept in single page app contexts and all of the Request methods in Express pertain to the HTTP traffic flowing back and forth between the server and client.Likewise all other req methods from the Node.js API are not supported. They are uncommonly used in Express applications, so they are not even stubbed out. See feature request.New properties defined by single-page-expressreq.backButtonPressed [Boolean]: This will be true when the browser back button was pressed. A class backButtonPressed will also be added to the <html> element.req.forwardButtonPressed [Boolean]: This will be true when the browser forward button was pressed. A class forwardButtonPressed will also be added to the <html> element.req.singlePageExpress [Boolean]: This property will always be set to true. You can use it to detect whether your route is executing in the single-page-express context or not.Response objectPropertiesres.app [Object]: Supported, however the app object returned will not have all the same properties and methods as Express itself due to the API differences documented above.res.headersSent [Boolean]: Stubbed out. This will always be false because there is no request cycle concept in single page app contexts.res.locals [Object]: Stubbed out: This will always return {} because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.res.req [Object]: Supported.Other res properties from the Node.js API: Not supported. They are uncommonly used in Express applications, so they are not even stubbed out. See feature request.New properties defined by single-page-expressres.addTargets [Array of Strings]: If using the default render method, use this variable to set an array of query selectors representing elements to target for replacement in addition to whatever is set by app.defaultTargets. Elements found matching the query strings in the array will be replaced with the corresponding query string from the rendered template.res.afterRender(params) [Function]: If using the default render method, you can set this to a function that will execute after every render.res.beforeRender(params) [Function]: If using the default render method, you can set this to a function that will execute before every render.res.focus [String]: If using the default render method, if you set res.focus, the browser's focus will be set to that element after the page is rendered. If you do not set res.focus, then the browser's focus will be set to the first non-inert element in the DOM with the autofocus attribute, or, if none are present, it will be set to whatever the target element was set to for the DOM update.res.removeBaseTags [Boolean]: If using the default render method, this will remove any <base> tags from the page before doing the DOM update.res.removeHeadTags [Boolean]: If using the default render method, this will remove all children of the <head> tag except the title element from the page before doing the DOM update.res.removeLinkTags [Boolean]: If using the default render method, this will remove any <link> tags from the page before doing the DOM update.res.removeMetaTags [Boolean]: If using the default render method, this will remove any <meta> tags from the page before doing the DOM update.res.removeScriptTags [Boolean]: If using the default render method, this will remove any <script> tags from the page before doing the DOM update.res.removeStyleTags [Boolean]: If using the default render method, this will remove any <style> tags from the page before doing the DOM update.res.removeTemplateTags [Boolean]: If using the default render method, this will remove any <template> tags from the page before doing the DOM update.res.target [String or Array of Strings]: If using the default render method, use this variable to set a query selector or array of query selectors to determine which DOM node contents will be replaced by your template render's contents. If none is supplied, and neither app.defaultTarget nor app.defaultTargets is set, then the contents of the <body> tag will be replaced with the output of your rendered template.res.title [String]: If using the default render method, use this variable to set a page title for the new render.res.updateDelay [Number]: If using the default render method, use this variable to set a delay in milliseconds before the render occurs. If not using the default render method, this property will still allow you to specify a delay before resetting the scroll position.res.resetScroll [Boolean]: Purges the memory of the scroll position for this route so that scroll position is reset to the top for this page and all its child containers.Methodsres.append(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.attachment(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.cookie(): Supported.res.clearCookie(): Supported.res.download(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.end(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.format(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.get(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.json(): Supported, but behaves differently than Express. This method will log the JSON data to the console.res.jsonp(): Stubbed out but does nothing because it is not useful in single page app contexts.res.links(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.location(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.redirect(): Supported.res.render(): Supported.res.send(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.sendFile(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.sendStatus(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.set(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.status(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.type(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.vary(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.Other res methods from the Node.js API: Not supported. They are uncommonly used in Express applications, so they are not even stubbed out. See feature request.Router objectNot supported: See feature request."})
window.siteTexts.push({file: "docs/single-page-express/2.0.3/usage/index.html", title: "Single Page Express — usage (2.0.3)", text: "InstallFirst, install single-page-express from npm.The package is distributed with the following builds available:dist/single-page-express.cjs: CommonJS bundle: const singlePageExpress = require('single-page-express')dist/single-page-express.js: Standalone bundle that can be included via <script> tags. Declares a global variable: singlePageExpressdist/single-page-express.min.js: Minified standalone bundle that can be included via <script> tags. Declares a global variable: singlePageExpressdist/single-page-express.mjs: ES module: import singlePageExpress from 'single-page-express'dist/single-page-express.min.mjs: Minified ES module: import singlePageExpress from 'single-page-express/min'UseThen, in your frontend code:const templatingEngine = require('') // define which templating engine to use here const templates = {} // load some templates hereFor templatingEngine, use something like teddy, mustache, or any other templating system that supports Express and works in the browser.For templates, create an object of key/value pairs where the key is the name of the template and the value is the template code.Once those variables are defined, you can call the single-page-express constructor.Below is an example using Teddy for templating and defining two simple templates.const templatingEngine = require('teddy/client') const templates = {   index: '<p>hello world</p>',   secondPage: '<p>this page has a {variable} in it</p>' } const app = require('single-page-express')({   templatingEngine,   templates })Defining routesThe various methods of defining routes like you would with Express are supported.A simple example:app.route('/').get(function (req, res) {   res.render('index', {}) })  app.route('/secondPage').get(function (req, res) {   res.render('secondPage', {     variable: 'variable with contents: \"hi there!\"' &nbsp;&nbsp;}) })Some more examples:// using the app.METHOD syntax app.get('/routeWithAppDotMethod', function (req, res) {   res.render('someTemplate', { some: 'model' }) })  // using the app.route('route').METHOD syntax app.route('/routeWithAppDotRouterDotMethod').get(function (req, res) {   res.render('someTemplate', { some: 'model' }) })  // route with params app.route('/route/:with/:params').get(function (req, res) {   console.log('req.params:', req.params)   res.render('someTemplate', { some: 'model' }) })  // route with express 4 wildcard syntax app.route('*').get(function (req, res) {   res.render('someTemplate', { some: 'model' }) })  // route with express 5 wildcard syntax app.route('*:all').get(function (req, res) {   res.render('someTemplate', { some: 'model' }) })  // handle a form submit app.route('/routeWithFormSubmit').post(function (req, res) {   console.log('req.body:', req.body)   res.render('someTemplate', { some: 'model' }) })You can also call app.triggerRoute(params) to activate the route callback registered for a given route, as though the link was clicked or a form was POSTed.Params accepted by app.triggerRoute include:route: Which route you're triggering.method: e.g. GET, POST, etc. (Case insensitive.)body: What to supply to req.body if you're triggering a POST.Controlling scroll position behaviorBy default, single-page-express will remember the scroll position of pages that have been visited. It will also remember the scroll position of child containers on each page as well, but only if those containers have assigned id attributes.If you wish to not remember the scroll position on a per route basis, supply res.resetScroll = true in your route. To disable this memory app-wide, set the alwaysScrollTop param to true in the constructor.Running the sample appsThere are 3 sample apps you can run to see demos of how single-page-express can be used:Basic frontend-only sample app:This is a minimalist demo of single-page-express that just demos various kinds of routes working as expected, but does not wire up any templating system or do anything other than log data to the console when the render method is called.To run it:npm cinpm run sample-app-basic-frontend-onlyOr npm run sample1Go to http://localhost:3000Basic frontend-only sample app with templating:Similar to the above demo, but includes a templating engine and demos page navigation in the single page app context.To run it:npm cinpm run sample-app-basic-frontend-only-with-templatingOr npm run sample2Go to http://localhost:3000Express-based sample app:This is a full Express app that demos sharing routes and templates on the backend and frontend.To run it:cd sampleApps/expressnpm cicd ../../npm run express-sampleOr npm run sample3Or cd into sampleApps/express and run npm ci and npm startGo to http://localhost:3000More complex Express-based sample app:Similar to the previous one but tests more features of single-page-express. This app exists mainly for the automated tests, but you can use it as a template for your app too if you like.To run it:cd sampleApps/express-complexnpm cicd ../../npm run express-express-complexOr npm run sample4Or cd into sampleApps/express-complex and run npm ci and npm startGo to http://localhost:3000"})
window.siteTexts.push({file: "docs/single-page-express/2.0.4/changelog/index.html", title: "Single Page Express — changelog (2.0.4)", text: "2.0.4Fixed a bug that caused a race condition related to view transitions and afterRender methods and render callbacks.Fixed a bug that caused Single Page Express to trigger on <a> elements that do not have href attributes.Fixed a bug that caused Single Page Express to trigger on <form> elements that do not have action attributes.Fixed a bug that caused history state to be modified in ways that could cause crashes.Updated dependencies.2.0.3Fixed regression that caused after-render actions to break in Chrome in the default render method.Updated dependencies.2.0.2Fixed regression that caused middleware support to break routes without middleware.Updated dependencies.2.0.1Added support for middleware on routes.Updated dependencies.2.0.0Breaking: Changed default Express API version to 5.To migrate:Most apps probably only need to change * routes to *all.Apps that use more complex routing may need other changes.Full list of considerations for migrating to Express 5: https://expressjs.com/en/guide/migrating-5.htmlFixed a bug that caused req.body to populate {} instead of undefined in Express 5 mode.Fixed a bug that caused the default / route to not load in some situations.Fixed a bug that caused extra <head> tags to get inserted into the DOM with the default render method in some situations.Fixed issues in sample app 2.Updated dependencies.1.2.0Added view transition support in the default render method.Added support for multiple DOM update targets in the default render method.Added req.backButtonPressed and req.forwardButtonPressed to app.Added classes backButtonPressed and forwardButtonPressed which will populate on the <html> element if either button was pressed.Added [data-page-title] to the top of the list of accepted query selectors for sourcing content to announce to screen readers when a new page is rendered.Added new params to the res.beforeRender(params), beforeEveryRender(params), res.afterRender(params), and afterEveryRender(params) methods:It now supplies an object with:model: The data model supplied to the template to be rendered.doc: The document object created from the template after it is rendered.markup: The HTML string that will be written to the page.targets: The list of DOM nodes that will be updated.Fixed a bug that caused postRenderCallbacks not to function properly.Fixed a bug related to script tags from the rendered page being executed unnecessarily.Fixed a bug causing unnecessary outlines to appear on page transitions in Safari.Updated dependencies.1.1.1Fixed crash related to unfinished HTML validation feature.Updated dependencies.1.1.0Added feature which will allow single-page-express to remember the scroll position of pages that have been visited. It will also remember the scroll position of child containers on each page as well, but only if those containers have assigned id attributes.Added alwaysScrollTop param which will let you disable this behavior app wide and res.resetScroll which will let you disable this behavior on a per-route basis.Added new behaviors to the default render method. It will now:Update the attributes of the <html> and <head> tags.Add new children to the <head> tag if anything new is in the template render.Delay the DOM update until any new <link> or <script> tags load to prevent a FOUC.Set browser focus appropriately after the DOM update. Also added res.focus to let you set it manually.Announce page changes to screen readers.Added res properties which will let you remove elements from the <head> tag on a per route basis: res.removeMetaTags, res.removeStyleTags, res.removeLinkTags, res.removeScriptTags, res.removeBaseTags, res.removeTemplateTags. There is also res.removeHeadTags to remove all children of the <head> tag except the <title> tag.Added topBarRoutes param to allow restricting the top bar to certain routes.Added req.singlePageExpress which you can use to detect if your route is executing in the single-page-express context.Fixed a bug which caused back/forward buttons to not function properly sometimes.Fixed a bug which would cause the top bar not to ever hide if it was enabled but the default render method was replaced.Fixed a bug in the Express sample app that would cause server-rendering to fail on routes with more than one /.Added a new sample app.Added an automated test suite and a few starter tests.Refactored some code to simplify it.Removed some unneeded dependencies.Updated dependencies.1.0.3Fixed missing exports so you can require/import Single Page Express less verbosely in your projects.Updated docs to clarify what the different builds of Single Page Express are meant to be used for.Updated dependencies.1.0.2Fixed bug causing custom res variables to not be set properly during certain default render method calls.Fixed broken Express 5 support.Updated dependencies.1.0.1Fixed broken postinstall script.1.0.0Initial version."})
window.siteTexts.push({file: "docs/single-page-express/2.0.4/configuration/index.html", title: "Single Page Express — configuration (2.0.4)", text: "APIDefault render method behaviorThe default render method will handle both full page renders as well as rendering partials:If you set res.title, the page's title will be updated with its contents. Alternatively, if the template render output contains a <title> tag, the page's title will be updated with its contents.When the new page is rendered, it will be announced to screen readers. The content to read to screen readers will be sourced from one of the following querySelectors: [data-page-title], h1[aria-label], h1, or title in that order.If the template render contains an <html> or <head> tag and there are new attributes on the <html> or <head> tags that aren't present in the current document, those attributes will be set on the current document. This behavior is additive or replacement-level only. Attributes cannot be removed simply by omitting them in the template render. If you want to remove an attribute, do it with JavaScript, or set it to a different value in your template render.If there are any new children for the <head> in the template render, they will be inserted into the current document's <head> tag if they are not present already.If any of the new tags are <link> or <script> tags, the DOM update will be delayed until those external files load to prevent a flash of unstyled content.If you set res.removeMetaTags, all <meta> tags will be removed from the <head> before adding any new ones.If you set res.removeStyleTags, all <style> tags will be removed from the <head> before adding any new ones.If you set res.removeLinkTags, all <link> tags will be removed from the <head> before adding any new ones.If you set res.removeScriptTags, all <script> tags will be removed from the <head> before adding any new ones.If you set res.removeBaseTags, all <base> tags will be removed from the <head> before adding any new ones.If you set res.removeTemplateTags, all <template> tags will be removed from the <head> before adding any new ones.If you set res.removeHeadTags, all tags except <title> will be removed from the <head> before adding any new ones.If you set res.target, the DOM will be updated at that spot. res.target is a query selector, so an example value you could give it would be #my-container. That would replace the contents of the element with the id \"my-container\" with the output of your rendered template.If the output of your rendered template also has an element matching the same query selector, then the contents of that portion of the output will be all that is used to replace the target.If you do not set res.target and neither app.defaultTarget nor app.defaultTargets is set, then the contents of the <body> tag will be replaced with the output of your rendered template.You can also supply an array of query selectors to res.target. Elements found matching the query selectors in the array will be replaced with the corresponding query selectors from the rendered template.If you set res.appendTargets = true, any new target(s) you add will be in addition to whatever is set by app.defaultTarget or app.defaultTargets.If you set res.focus, the browser's focus will be set to that element after the page is rendered. If you do not set res.focus, then the browser's focus will be set to the first non-inert element in the DOM with the autofocus attribute, or, if none are present, it will be set to whatever the target element was set to for the DOM update. If there are multiple targets, the first target on the list will be what is selected.There are also hooks for setting animations as well. See \"Hooks for setting animations\" below.If this DOM manipulation behavior is undesirable to you, you can supply your own render method instead and do whatever you like. To supply your own render method, see the constructor parameter documentation below.Constructor parametersBasic configurationexpressVersion [Number]: Optionally set which version of the Express API to use for route string parsing. Supports values 4 or 5. Express 3 and below are not supported. Defaults to 5.templatingEngine [String]: Which Express templating system to use. You must include the package in your app and supply the module as an argument to this param. This param is required if you use the default render method and do not supply your own.templates [Object]: Supply an object with keys that are template names and values that are template strings. This param is required if you use the default render method and do not supply your own.renderMethod(template, model callback) [Function]: Optionally supply a function to execute when res.render is called in your routes. If you do not provide one, a default one will be used that will render your template with your chosen templating engine and make appropriate updates to the DOM. See below for details about what the default render method does specifically and how to customize its behavior.disableTopbar [Boolean]: Disable the top bar loading bar. Default: false (the loading bar is enabled by default)topbarConfig [Object]: Options to supply to top bar to customize its aesthetics and behavior. See the site's documentation for a list of options.topBarRoutes [Array of Strings]: Which routes to use top bar on. Defaults to all if this option is not supplied.alwaysScrollTop [Boolean]: Always scroll to the top of the page after every render. Default: false (the default render method will remember the scroll position of each page visited and restore that scroll position when you revisit those pages)Customizing the default render method's behaviorThese constructor params are only relevant if you're not supplying a custom render method.Pre-renderbeforeEveryRender(params) [Function]: Optionally supply a function to execute just before your template is rendered and written to the DOM. Useful for beginning a CSS transition.You can also set res.beforeRender(params) [Function] on a per request basis.The params argument contains:model [Object]: The data model supplied to the template to be rendered.doc [String]: The document object created from the template after it is rendered.markup [String]: The HTML string that will be written to the page.targets [Array of Strings]: The list of DOM nodes that will be updated.defaultTarget [String]: Query string representing the default element to target if one is not supplied by res.target. Defaults to the <body> tag if neither res.target or app.defaultTarget is supplied.defaultTargets [Array of Strings]: Array of query strings representing elements to target for replacement if such an array is not supplied by res.target. Elements found matching the query strings in the array will be replaced with the corresponding query string from the rendered template.updateDelay [Number]: How long to wait in milliseconds between rendering the template and writing its contents to the DOM. This is useful to give your animations time to animate if you're using animations. Default: 0.You can also set res.updateDelay on a per request basis.Post-renderafterEveryRender(params) [Function]: Optionally supply a function to execute just after your template is rendered and written to the DOM. Useful for finishing a CSS transition.You can also set res.afterRender(params) [Function] on a per request basis.The params argument contains:model [Object]: The data model supplied to the template rendered.doc [String]: The document object created from the template after it was rendered.markup [String]: The HTML string that was written to the page.targets [Array of Strings]: The list of DOM nodes that were updated.postRenderCallbacks [Object]: Optionally supply an object with keys that are template names and values that are functions to execute after that template renders. You can also supply * as a key to execute a post-render callback after every template render.Application objectWhen you call the constructor, it will return an app object.PropertiesafterEveryRender(params) [Function]: Function to execute after every template render sourced from the constructor params.alwaysScrollTop [Boolean]: If true, the app will not remember scroll position on a per-page basis.appVars [Object]: List of variables stored via app.set() and retrieved with app.get().beforeEveryRender(params) [Function]: Function to execute before every template render sourced from the constructor params.defaultTarget [String]: Query string representing the default element to target if one is not supplied by res.target.defaultTargets [Array of Strings]: Optional array of query strings representing elements to target for replacement if such an array is not supplied by res.target.expressVersion [Number]: Which version of the Express API to use for route string parsing sourced from the constructor params.postRenderCallbacks [Object]: List of callback functions to execute after a render event occurs sourced from the constructor params.routes [Object]: List of routes registered with single-page-express.routeCallbacks [Object]: List of callback functions executed when a given route is visited.templates [Object]: List of templates loaded into into single-page-express sourced from the constructor params.templatingEngine [String]: The templating engine module loaded into single-page-express sourced from the constructor params.topbarEnabled [Boolean]: Whether or not the top loading bar is enabled.topbarRoutes [Array of Strings]: Which routes to use the top loading bar on; defaults to all if this option is not supplied.updateDelay [Number]: How long to wait before rendering a template sourced from constructor params.urls [Object]: List of URLs that have been visited and metadata about them.Express API implementationsingle-page-express is a partial frontend implementation of the Express API. Below is a full list of Express API methods and the degree to which it is implemented.App constructor methodsNot supported: None from Express are implemented. single-page-express implements its own constructor which is described above.Application objectSettingscase sensitive routing [Boolean]: Supported. Defaults to false.env [String]: Supported. Defaults to production.etag: Not supported because there is no request cycle concept in single page app contexts.jsonp callback name: Not supported because it is not useful in single page app contexts.json escape: Not supported because it is not useful in single page app contexts.json replacer: Not supported because it is not useful in single page app contexts.json spaces: Not supported because it is not useful in single page app contexts.query parser [Boolean]: Partially supported. In Express there are multiple options, but in single-page-express you can set it to either true or false. It defaults to true.strict routing [Boolean]: Supported. Defaults to false.subdomain offset [Number]: Supported. Defaults to 2.trust proxy: Not supported because there is no request cycle concept in single page app contexts.views: Not supported because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.view cache: Not supported because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.view engine: Not supported because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.x-powered-by: Not supported because there is no request cycle concept in single page app contexts.Propertiesapp.locals [Object]: Stubbed out. This will always return {} because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.app.mountpath [String]: Stubbed out. This will always return '' because single-page-express does not have a concept of app mounting in the way that Express does. See feature request.Eventsmount: Stubbed out but does nothing because single-page-express does not have a concept of app mounting in the way that Express does. See feature request.Methodsapp.all(): Supported.app.delete(): Supported.app.disable(): Supported.app.disabled(): Supported.app.enable(): Supported.app.enabled(): Supported.app.engine(): Stubbed out but does nothing because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.app.get(): Supported. (Both versions.)app.listen(): Stubbed out but does nothing because there is no \"server\" concept in single page app contexts.app.METHOD(): Supported.app.param(): Stubbed out but does nothing because this feature has not been implemented yet. See feature request.app.path(): Stubbed out but does nothing because single-page-express does not have a concept of app mounting in the way that Express does. See feature request.app.post(): Supported.app.put(): Supported.app.render(): Supported.app.route(): Supported.app.set(): Supported.app.use(): Stubbed out but does nothing because single-page-express does not have a concept of app middleware in the way that Express does. See feature request.New methods defined by single-page-expressapp.triggerRoute(params): This will activate the route callback registered for a given route, as though a link was clicked or a form was POSTed.Params accepted by app.triggerRoute include:route [String]: Which route you're triggering.method [String]: e.g. GET, POST, etc. (Case insensitive.)body [Object]: What to supply to req.body if you're triggering a POST.Request objectPropertiesreq.app [Object]: Supported, however the app object returned will not have all the same properties and methods as Express itself due to the API differences documented above.req.baseUrl [String]: Stubbed out. This will always be '' because single-page-express does not have a concept of app mounting in the way that Express does. See feature request.req.body [Object]: Supported.req.cookies [Object]: Supported.req.fresh [Boolean]: Stubbed out. This will always be true because there is no request cycle concept in single page app contexts.req.hostname [String]: Supported.req.ip [String]: Stubbed out. This will always be 127.0.0.1 because there is no request cycle concept in single page app contexts.req.ips [Array of Strings]: Stubbed out. This will always be [] because there is no request cycle concept in single page app contexts.req.method [String]: Supported.req.originalUrl [String]: Supported.req.params [Object]: Supported.req.path [String]: Supported.req.protocol [String]: Supported.req.query [String]: Supported.req.res [Object]: Supported.req.route [String]: Supported.req.secure [Boolean]: Supported.req.signedCookies [Object]: Stubbed out. This will always be {} because there is no request cycle concept in single page app contexts.req.stale [Boolean]: Stubbed out. This will always be false because there is no request cycle concept in single page app contexts.req.subdomains [Array of Strings]: Supported.req.xhr [Boolean]: Stubbed out. This will always be true because there is no request cycle concept in single page app contexts.Other req properties from the Node.js API: Not supported. They are uncommonly used in Express applications, so they are not even stubbed out. See feature request.MethodsAll Express request object methods are stubbed out but do nothing because because there is no request cycle concept in single page app contexts and all of the Request methods in Express pertain to the HTTP traffic flowing back and forth between the server and client.Likewise all other req methods from the Node.js API are not supported. They are uncommonly used in Express applications, so they are not even stubbed out. See feature request.New properties defined by single-page-expressreq.backButtonPressed [Boolean]: This will be true when the browser back button was pressed. A class backButtonPressed will also be added to the <html> element.req.forwardButtonPressed [Boolean]: This will be true when the browser forward button was pressed. A class forwardButtonPressed will also be added to the <html> element.req.singlePageExpress [Boolean]: This property will always be set to true. You can use it to detect whether your route is executing in the single-page-express context or not.Response objectPropertiesres.app [Object]: Supported, however the app object returned will not have all the same properties and methods as Express itself due to the API differences documented above.res.headersSent [Boolean]: Stubbed out. This will always be false because there is no request cycle concept in single page app contexts.res.locals [Object]: Stubbed out: This will always return {} because there is no concept of a \"view engine\" in single-page-express. Instead, you supply a templating system to single-page-express's constructor if you're using the default render method or author your own render method and wire up templating systems yourself.res.req [Object]: Supported.Other res properties from the Node.js API: Not supported. They are uncommonly used in Express applications, so they are not even stubbed out. See feature request.New properties defined by single-page-expressres.addTargets [Array of Strings]: If using the default render method, use this variable to set an array of query selectors representing elements to target for replacement in addition to whatever is set by app.defaultTargets. Elements found matching the query strings in the array will be replaced with the corresponding query string from the rendered template.res.afterRender(params) [Function]: If using the default render method, you can set this to a function that will execute after every render.res.beforeRender(params) [Function]: If using the default render method, you can set this to a function that will execute before every render.res.focus [String]: If using the default render method, if you set res.focus, the browser's focus will be set to that element after the page is rendered. If you do not set res.focus, then the browser's focus will be set to the first non-inert element in the DOM with the autofocus attribute, or, if none are present, it will be set to whatever the target element was set to for the DOM update.res.removeBaseTags [Boolean]: If using the default render method, this will remove any <base> tags from the page before doing the DOM update.res.removeHeadTags [Boolean]: If using the default render method, this will remove all children of the <head> tag except the title element from the page before doing the DOM update.res.removeLinkTags [Boolean]: If using the default render method, this will remove any <link> tags from the page before doing the DOM update.res.removeMetaTags [Boolean]: If using the default render method, this will remove any <meta> tags from the page before doing the DOM update.res.removeScriptTags [Boolean]: If using the default render method, this will remove any <script> tags from the page before doing the DOM update.res.removeStyleTags [Boolean]: If using the default render method, this will remove any <style> tags from the page before doing the DOM update.res.removeTemplateTags [Boolean]: If using the default render method, this will remove any <template> tags from the page before doing the DOM update.res.target [String or Array of Strings]: If using the default render method, use this variable to set a query selector or array of query selectors to determine which DOM node contents will be replaced by your template render's contents. If none is supplied, and neither app.defaultTarget nor app.defaultTargets is set, then the contents of the <body> tag will be replaced with the output of your rendered template.res.title [String]: If using the default render method, use this variable to set a page title for the new render.res.updateDelay [Number]: If using the default render method, use this variable to set a delay in milliseconds before the render occurs. If not using the default render method, this property will still allow you to specify a delay before resetting the scroll position.res.resetScroll [Boolean]: Purges the memory of the scroll position for this route so that scroll position is reset to the top for this page and all its child containers.Methodsres.append(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.attachment(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.cookie(): Supported.res.clearCookie(): Supported.res.download(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.end(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.format(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.get(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.json(): Supported, but behaves differently than Express. This method will log the JSON data to the console.res.jsonp(): Stubbed out but does nothing because it is not useful in single page app contexts.res.links(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.location(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.redirect(): Supported.res.render(): Supported.res.send(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.sendFile(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.sendStatus(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.set(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.status(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.type(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.res.vary(): Stubbed out but does nothing because there is no request cycle concept in single page app contexts.Other res methods from the Node.js API: Not supported. They are uncommonly used in Express applications, so they are not even stubbed out. See feature request.Router objectNot supported: See feature request."})
window.siteTexts.push({file: "docs/single-page-express/2.0.4/usage/index.html", title: "Single Page Express — usage (2.0.4)", text: "InstallFirst, install single-page-express from npm.The package is distributed with the following builds available:dist/single-page-express.cjs: CommonJS bundle: const singlePageExpress = require('single-page-express')dist/single-page-express.js: Standalone bundle that can be included via <script> tags. Declares a global variable: singlePageExpressdist/single-page-express.min.js: Minified standalone bundle that can be included via <script> tags. Declares a global variable: singlePageExpressdist/single-page-express.mjs: ES module: import singlePageExpress from 'single-page-express'dist/single-page-express.min.mjs: Minified ES module: import singlePageExpress from 'single-page-express/min'UseThen, in your frontend code:const templatingEngine = require('') // define which templating engine to use here const templates = {} // load some templates hereFor templatingEngine, use something like teddy, mustache, or any other templating system that supports Express and works in the browser.For templates, create an object of key/value pairs where the key is the name of the template and the value is the template code.Once those variables are defined, you can call the single-page-express constructor.Below is an example using Teddy for templating and defining two simple templates.const templatingEngine = require('teddy/client') const templates = {   index: '<p>hello world</p>',   secondPage: '<p>this page has a {variable} in it</p>' } const app = require('single-page-express')({   templatingEngine,   templates })Defining routesThe various methods of defining routes like you would with Express are supported.A simple example:app.route('/').get(function (req, res) {   res.render('index', {}) })  app.route('/secondPage').get(function (req, res) {   res.render('secondPage', {     variable: 'variable with contents: \"hi there!\"' &nbsp;&nbsp;}) })Some more examples:// using the app.METHOD syntax app.get('/routeWithAppDotMethod', function (req, res) {   res.render('someTemplate', { some: 'model' }) })  // using the app.route('route').METHOD syntax app.route('/routeWithAppDotRouterDotMethod').get(function (req, res) {   res.render('someTemplate', { some: 'model' }) })  // route with params app.route('/route/:with/:params').get(function (req, res) {   console.log('req.params:', req.params)   res.render('someTemplate', { some: 'model' }) })  // route with express 4 wildcard syntax app.route('*').get(function (req, res) {   res.render('someTemplate', { some: 'model' }) })  // route with express 5 wildcard syntax app.route('*:all').get(function (req, res) {   res.render('someTemplate', { some: 'model' }) })  // handle a form submit app.route('/routeWithFormSubmit').post(function (req, res) {   console.log('req.body:', req.body)   res.render('someTemplate', { some: 'model' }) })You can also call app.triggerRoute(params) to activate the route callback registered for a given route, as though the link was clicked or a form was POSTed.Params accepted by app.triggerRoute include:route: Which route you're triggering.method: e.g. GET, POST, etc. (Case insensitive.)body: What to supply to req.body if you're triggering a POST.Controlling scroll position behaviorBy default, single-page-express will remember the scroll position of pages that have been visited. It will also remember the scroll position of child containers on each page as well, but only if those containers have assigned id attributes.If you wish to not remember the scroll position on a per route basis, supply res.resetScroll = true in your route. To disable this memory app-wide, set the alwaysScrollTop param to true in the constructor.Running the sample appsThere are 3 sample apps you can run to see demos of how single-page-express can be used:Basic frontend-only sample app:This is a minimalist demo of single-page-express that just demos various kinds of routes working as expected, but does not wire up any templating system or do anything other than log data to the console when the render method is called.To run it:npm cinpm run sample-app-basic-frontend-onlyOr npm run sample1Go to http://localhost:3000Basic frontend-only sample app with templating:Similar to the above demo, but includes a templating engine and demos page navigation in the single page app context.To run it:npm cinpm run sample-app-basic-frontend-only-with-templatingOr npm run sample2Go to http://localhost:3000Express-based sample app:This is a full Express app that demos sharing routes and templates on the backend and frontend.To run it:cd sampleApps/expressnpm cicd ../../npm run express-sampleOr npm run sample3Or cd into sampleApps/express and run npm ci and npm startGo to http://localhost:3000More complex Express-based sample app:Similar to the previous one but tests more features of single-page-express. This app exists mainly for the automated tests, but you can use it as a template for your app too if you like.To run it:cd sampleApps/express-complexnpm cicd ../../npm run express-express-complexOr npm run sample4Or cd into sampleApps/express-complex and run npm ci and npm startGo to http://localhost:3000"})
window.siteTexts.push({file: "docs/source-configs/1.0.0/changelog/index.html", title: "Source Configs — changelog (1.0.0)", text: "1.0.0Breaking: Changed default behavior for configs with no default value to populate the config value's name instead of null by default.Breaking: Removed deployConfig feature.Added new secret schema metadata feature to declare certain configs (e.g. passwords or API keys) sensitive.Added safelyPrintSchema method to return schema with secret configs redacted.Updated dependencies.0.3.6Various dependencies updated.Migrated colors to @colors/colors0.3.5Added a function to make it easy for developers to add a -h or --help command to their applications that will print a summary of supported command line options.Dropped support for Node 12 and below.Various dependencies updated.0.3.4Fixed a bug with command line args. https://github.com/rooseveltframework/source-configs/issues/198Various dependencies updated.0.3.3Fixed a bug where disabling the logger didn't disable all logs.Various dependencies updated.0.3.2Fixed a bug where config value doesn't source properly.Various dependencies updated.0.3.1Fixed broken push to npm.Ensured each usage loads config in isolation.Various dependencies updated.0.3.0Altered the source-configs usage in such a way that an optional configuration param can be passed which includes the following options:logging: Ability to enable/disable logging (Roosevelt will celebrate!)transform: A function that will get called after building the config from the schema but before returning it. Useful for handling various edge cases that the schema cannot on its own.sources: An array of sources in priority order. Can be a combination of built-in sources and custom ones (with object supplied). Notably this also allows built-ins to be omitted entirely if desired.This config object is completely optional and when not passed source-configs will behave exactly the same as it did before, so this should not break any apps currently using it.Added full test coverage.Suppress logs during tests.Various dependencies updated.CI overhauled.0.2.1Fixed bug where certain reserved words would break source-configs.Various dependencies updated.0.2.0Changed deployFile to deployConfigFile and fixed associated typo in the README.Various dependencies updated.0.1.2Updated roosevelt-logger, which fixes some downstream bugs.Various other dependencies updated.CI improvements.0.1.1Fixed main filename for npm package.Various dependencies updated.0.1.0Initial version."})
window.siteTexts.push({file: "docs/source-configs/1.0.0/configuration/index.html", title: "Source Configs — configuration (1.0.0)", text: "APIlogging [Boolean]: Whether or not source-configs will log to console. Default: true.sources [Array of Strings]: An array of sources that can be a mix of built-in sources and custom source objects in order of priority.Built-in sources can be referenced in multiple ways:Command line: \"command line\" or \"commandLineArg\".Environment variable: \"environment variable\" or \"envVar\".Default:[   'command line',   'environment variable' ]Supply an object to add custom sources:[   'command line',   'environment variable',   { custom: 'object' } ]transform(config, commandLineArgs) [Function]: A function that can be used to mutate your config after it has been parsed and sourced but before it gets returned by source-configs.config [Object]: The config after being parsed by source-configs.commandLineArgs [Object]: CLI flags as parsed by yargs-parser.Example:const sourceConfigs = require('source-configs') const schema = require('./your-schema-js-file.json')  const config = sourceConfigs(schema, {   transform: (config, commandLineArgs) => {     // check for a cli flag that wouldn't normally translate into a config     if (commandLineArgs.switchPort === true) {       config.websocket.port = 43711     }     return config // return the config when done   } })  // access that config configs console.log(config.websocket.port) // prints 43711Properties of source-configs moduleIn addition to its constructor, source-configs exposes the following properties:configs [Object]: The resulting configs after running source-config's constructor.commandLineArgs [Array]: All command line arguments passed to your application, including those not listened for by your schema. Powered by yargs-parser.yargsParser [Function]: The instance of yargs-parser that source-configs used to compile all command line arguments passed to your application.printHelp [Function]: A function which will generate a help menu describing the command line arguments defined in the schema. Useful for if you want to define a -h or --help command line argument to print all available supported command line arguments. Just print console.log(config.printHelp()) to print that information to your users.safelyPrintSchema [Function]: A function which will print the fully post-processed schema to the console, but obscure any data that is marked as secret."})
window.siteTexts.push({file: "docs/source-configs/1.0.0/usage/index.html", title: "Source Configs — usage (1.0.0)", text: "First declare source-configs as a dependency in your app.Then create a config schema JSON object to tell source-configs what config values to listen for.Here's a simple example declaring that our application will use a WebSocket with a configurable host, port, and protocol:const sourceConfigs = require('source-configs') const schema = require({   websocket: {     host: {       description: 'WebSocket host URL',       default: 'localhost',       commandLineArg: ['--websocket-host-url', '--ws-host', '-h'],       envVar: ['WEBSOCKET_HOST_URL', 'WS_HOST']     },     port: {       description: 'WebSocket port',       default: 8081,       commandLineArg: ['--ws-port', '-p'],       envVar: 'WS_PORT'     },     protocol: {       description: 'Which WebSocket protocol',       values: ['ws', 'wss'],       commandLineArg: '--ws-protocol',       envVar: 'WS_PROTOCOL'     },     url: 'user-defined function'   } )  // define the user-defined function above schema.websocket.url = (config) => config.protocol + '://' + config.host + ':' + config.port  // run source-configs against the schema const config = sourceConfigs(schema)  // access one of the configs console.log(config.websocket.port)Schema metadataSchemas support the following metadata for each configurable property in order to create constraints if desired or add additional functionality:description [String]: Describe what this config will be used for.default [any]: Set a default value for this config. If not set, the default will be set to the config's name.values [Array]: Enumerated list of values that are valid. If not set, any value will be valid.commandLineArg [String or Array of Strings]: Command line argument(s) to listen for that will set this config. If not set, source-configs will not listen for command line arguments to set the value for this config.envVar [String or Array of Strings]: Environment variable(s) to listen for that will set this config. If not set, source-configs will not listen for an environment variable to set the value for this config.secret [Boolean]: Whether or not this value is sensitive information, like a password.User-defined functionsAdditionally, a schema can be a function which has the parent config passed to it as the first argument. To do this create a key/value pair within the schema object:If the schema is stored in a .js file, set the key as the desired function name and the value as the function.If using a .json file to store the schema, set the key as the desired function name and the value as 'user-defined function'. Once the .json file is required in, override the key's value with the desired function.Custom configurationIn addition to the above instantiation method, source-configs also accepts an optional configuration object that can be passed to the constructor as a second object like so:const sourceConfigs = require('source-configs') const schema = require('./your-schema-js-file.json')  const config = sourceConfigs(schema, {   logging: true,   sources: [     'command line',     'environment variable',     { custom: 'object' }   ] })"})
window.siteTexts.push({file: "docs/teddy/1.1.4/changelog/index.html", title: "Teddy — changelog (1.1.4)", text: "1.1.4Added slicker live demo docs.Added some performance improvements.Fixed a bug when escaping escape tags or escape comments.Updated dependencies.1.1.3Added <!--# escape comments -->.Updated dependencies.1.1.2Added teddy.clearTemplates() method to clear the template cache.Updated dependencies.1.1.1Added support for variables-with-dashes-in-their-names.Updated dependencies.1.1.0Added <escape> tag.Excluded <pre> tags from Teddy parsing. Add a parse attribute to prevent this behavior.Fixed a bug that could cause infinite loops in variable parsing.Updated dependencies.1.0.1Fixed a bug that caused client-side Teddy to try to fetch resources from the server inappropriately while parsing the template.Updated dependencies.1.0.0Added support for a new <!--! server-side comments --> syntax.Changed the behavior of <include> tags to display an error when attempting to include a template that does not exist.Updated various dependencies.0.6.26Fixed a bug that could cause ${templateLiteral} strings to lose their $ character if they were meant to print as strings and not be parsed as Teddy variables.Updated various dependencies.0.6.25Fixed bugs associated with selected-value and checked-value attributes.0.6.24Added  to force hide or {varName} to force display variable. This is a per-var override for:teddy.setEmptyVarBehavior('hide'): Will make it possible for variables which don't resolve to display as empty strings instead of displaying the variable.Default: 'display'.Added support for sourcing most Teddy attribute values dynamically from {variables}.Added boolean logic to one-line if statements.Added selected-value and checked-value attributes for setting what option to select or what checkbox / radio to check in a more concise way than using one-line ifs.Fixed a bug that prevented boolean logic from working if there were multiple and or multiple or attributes on an element.Updated various dependencies.0.6.23Added new <inline> tag for adding inline CSS or JS using Teddy variables. Usage is optional, but it can help you avoid syntax error warnings in your code editor.Fixed a bug preventing <include> args from parsing correctly in certain circumstances.Updated various dependencies.0.6.22Made variable name lookups case insensitive in server-side Teddy to match client-side Teddy so as to match HTML grammar rules.Added some performance improvements to loops and includes.Fixed a bug preventing <noparse> and <noteddy> tags from working in markup passed to include tags.Updated various dependencies.0.6.21Fixed missing exports so you can require/import teddy less verbosely in your projects.Updated docs to clarify what the different builds of Teddy are meant to be used for.Removed minified cjs build since there is no use case for it.Updated various dependencies.0.6.20Fixed double-encoding HTML entity bug in client-side mode.Updated various dependencies.0.6.19Made client-side Teddy parser a bit more tolerant of bad markup.0.6.18Fixed a bug which caused client-side Teddy to rename yet more form elements accidentally.0.6.17Fixed a bug which caused client-side Teddy to handle array length lookups differently from cheerio-driven Teddy.Fixed a bug which caused client-side Teddy to crash if extra spaces were in markup attribute lists.Fixed a bug which caused client-side Teddy to return the wrong data with 2 or more layers of object lookups if the object keys were camelCase.Fixed a bug which caused client-side Teddy to rename some form elements accidentally.Updated various dependencies.0.6.16Fixed a bug which caused client-side Teddy to fail in some situations like putting a <loop> in a <select> element.Deprecated a test that tests for passing numeric arguments to include tags, since this violates HTML grammar and never should've worked to begin with. It may still work with cheerio-driven Teddy because cheerio's parser is more forgiving than a standards-compliant one unless and until cheerio deprecates support for that itself. Client-side Teddy will not support it, so for consistency the test has been removed.Updated various dependencies.0.6.15Fixed a bug which caused the cheerio-driven modules to not work client-side if you choose to use them there.Updated various dependencies.0.6.14Finished work on cheerioPolyfill.js which makes it possible for Teddy to execute in client-side contexts without using cheerio, allowing for a very small bundle size for client-side Teddy (17kb minified).Fixed client-side tests to test Teddy in the browser properly.Refactored tests to improve maintainability.Updated various dependencies.0.6.13Removed xregexp and html-entities dependencies. Also Replaced cheerio with cheerio/slim. These changes have reduced bundle size significantly.Began work on cheerioPolyfill.js which will allow Teddy to execute in client-side contexts without using cheerio. This will result in even smaller bundle sizes (currently around 16kb minified), however the work is unfinished.Updated various dependencies.0.6.12Downgraded cheerio to prevent webpack errors when using Teddy on frontend.Updated various dependencies.0.6.11Added new setting teddy.setEmptyVarBehavior('hide') that will make it possible for variables which don't resolve to display as empty strings instead of displaying the variable.0.6.10Added support for template literal ${templateLiteral} variables.Fixed bug that caused Teddy to crash if you attempted to loop through a Set.Replaced internal HTML entities scanner with the html-entities npm package.Updated various dependencies.0.6.9Fixed issue with rendering variables with empty strings piped through variables with flags.Updated various dependencies.0.6.8Fixed issue with rendering special characters correctly when piped through a teddy noparse flagged variable.Updated various dependencies.0.6.7Fixed issue causing server-side comments to not be stripped from templates parsed as strings instead of as files.Updated various dependencies.0.6.6Fixed issue causing the template caching feature to not work properly in Express apps.Updated various dependencies.0.6.5Fixed scenario where one-line if with only a false condition could crash if it's fed by arguments from an include element.Fixed crash associated with embedding JSON strings in script tags.Fixed bug causing \"{}\" to be inappropriately stripped from templates.Reduced unminified bundle size from 2.4mb to 1.5mb and added a minified bundle that reduces it further to 449kb.Improved logging and refactored the code a bit.Updated various dependencies.0.6.4Fixed crash that could occur in an unusual edge case.Various dependencies bumped.0.6.3Restored template-level caching feature with an improved API.Restored compile method but now with an API similar to other templating systems. It will now take a template string and return a function which when given model data will render HTML from the template and model data.Now hosting the Teddy playground on https://rooseveltframework.github.io/teddy/playground.html. Thanks to jsDelivr for CDN hosting.Various dependencies bumped.0.6.2Significant performance improvements.Added a new <cache> element that can be used to improve template parsing performance further.Various dependencies bumped.0.6.1Fixed memory leak related to the no parse block feature.Various dependencies bumped.0.6.0Breaking: <include> elements will no longer automatically disable escaping content of <arg> variables. Use {var|s} to disable escaping yourself.Breaking: One-line if statements like if-something='' will now evaluate as true if something is present in the model.Breaking: You can no longer apply more than one one-line if statement to the same element.Breaking: Boolean logic will no longer allow you to query the same variable twice in the same if statement or use the same boolean logic operator twice in the same if statement.Breaking: You can no longer use Teddy tags in elements that interpret child text as plain text, e.g. <style>, <script>, <textarea>, etc.Breaking: Removed the noparse and noteddy attribute feature from <include> tags.Breaking: Removed Teddy's internal minifier since third party HTML minifiers are better.Breaking: Removed caching feature. A better-designed one may arrive in the future.Breaking: Server-side comments will now always be removed, even if they are contained in a no-parse block. To preserve them for display, you must manually escape them with HTML entities.Breaking: teddy.compile was removed as a public method. To set a new template, you must now call teddy.setTemplate to create it. Accordingly the teddy.compileAtEveryRender method has been removed as well.Breaking: The |p flag will now also apply the same logic as |s as well. If you have any {variables} written like {variable|s|p}, you can now optionally write it as {variable|p} instead to get identical functionality.Breaking: The in attribute as a synonym for through in <loop> has been removed.Significant stability improvements; lots of bugs fixed.Some performance improvements, some performance downgrades (notably looping through large datasets is slightly slower now).Simplified API.maxPasses default changed from 25000 to 1000.Various dependencies bumped.0.5.10Fixed bug with one-line-ifs. See https://github.com/rooseveltframework/teddy/pull/540Various dependencies bumped.0.5.9Fixed an issue where model content could get printed without being escaped even when the |s flag is not present.Various dependencies bumped.0.5.8Fixed bug in client-side support where file extensions would be inappropriately appended to template names in some cases.Dropped Node 15 support. Added Node 16 support.Various dependencies bumped.0.5.7Closed:https://github.com/rooseveltframework/teddy/issues/446https://github.com/rooseveltframework/teddy/issues/431https://github.com/rooseveltframework/teddy/issues/449https://github.com/rooseveltframework/teddy/issues/426Dropped Node 12 support.Various dependencies bumped.0.5.6Closed https://github.com/rooseveltframework/teddy/issues/404Various dependencies bumped.0.5.5Closed https://github.com/rooseveltframework/teddy/issues/4210.5.4Closed https://github.com/rooseveltframework/teddy/issues/412Closed https://github.com/rooseveltframework/teddy/pull/418Closed many unreported bugs.Wrote a test for https://github.com/rooseveltframework/teddy/issues/404Wrote a test for https://github.com/rooseveltframework/teddy/issues/357 but upon further investigation now consider it a wontfix.Various dependencies bumped.0.5.3Fixed some Windows-exclusive bugs related to how newlines are parsed in Windows vs. other operating systems.Various dependencies bumped.CI improvements.0.5.2Undo accidental removal of package-lock.json.0.5.1Removed postinstall script since it created a problematic prompt to install webpack-cli during npm installs.0.5.0Variables with spaces in them will now be parsed.Fixed issue where one line if statements couldn't use variables as part of the condition.Fixed issue where recursive variable resolution could cause an infinite loop.Significant performance improvements.Total rewrite into a much cleaner codebase:Less reliance on regex and more reliance on character counting in base algorithm.Code now split into separate files for development but bundled into a single JS file with Webpack during deployment.Various dependencies bumped.CI improvements.0.4.28 and belowHere be dragons…"})
window.siteTexts.push({file: "docs/teddy/1.1.4/configuration/index.html", title: "Teddy templating engine — configuration (1.1.4)", text: "APIteddy.getTemplates(): Get the internal cache of templates.teddy.setTemplate(name, template): Add a new template to the template cache.teddy.clearTemplates(): Clear the template cache.teddy.render(template, model): Render a template by supplying either source code or a file name (in Node.js).Returns fully rendered HTML.Removes <!--! teddy comments --> and {! teddy comments !}teddy.setTemplateRoot(path): Set the location of your templates directory. Default is the current directory.teddy.compile(templateString): Takes a template string and returns a function which when given model data will render HTML from the template and model data.Example:const templateFunction = teddy.compile('<p>{hello}</p>') templateFunction({ hello: 'world' }) // returns \"<p>world</p>\"teddy.setVerbosity(n): Sets the level of verbosity in Teddy's console logs. Call teddy.setVerbosity(n) where n equals one of the below values to change the default:0 or 'none': No logging.1 or 'concise': The default. Concise logging. Will usually only log serious errors.2 or 'verbose': Verbose logging. Logs even minor errors.3, 'debug', or 'DEBUG': Debug mode. Very verbose.teddy.setDefaultParams(): Reset all params to default.teddy.maxPasses(n): Sets the maximum number of passes the parser can execute over your template. If this maximum is exceeded, Teddy will stop attempting to render the template. The limit exists to prevent the possibility of teddy producing infinite loops due to improperly coded templates. Default: 1000.teddy.setEmptyVarBehavior('hide'): Will make it possible for variables which don't resolve to display as empty strings instead of displaying the variable. Default: 'display'.{varName|h} to force it to hide or {varName|d}teddy.setIncludeNotFoundBehavior('hide'): Will make it possible for <include> tags which don't resolve to display as empty strings instead of displaying an error. Default: 'display'.teddy.setCache(params): Declare a template-level cache.Params:template: Name of the template to cache.key: Model variable to cache it by. Set to 'none' to cache the first render for all model values.maxAge: How old the cache can be in milliseconds before it is invalidated and will be re-rendered. Default: 0 (no limit).maxCaches: The maximum number of caches that Teddy will be allowed to create for a given template/key combination. If the maximum is reached, Teddy will remove the oldest cache in the stack, where oldest is defined as the least recently created or accessed. Does not apply to caches where key is not also set. Default: 1000.Example:teddy.setCache({   template: 'someTemplate.html',   key: 'city',   maxAge: 1000 })teddy.clearCache(name): If name is a string, it will delete the whole cache at that name.teddy.clearCache(name, keyVal): Deletes just the value at that keyVal. Assumes name will be a string.teddy.clearCache(params): If params is an object, it will delete a whole template-level cache.Params:template: Name of the template to delete the cache of.key: Model variable cache index to delete it by. If key is not provided, it will delete all caches of that template."})
window.siteTexts.push({file: "docs/teddy/1.1.4/usage/index.html", title: "Teddy templating engine — usage (1.1.4)", text: "InstallInstall Teddy with npm: npm i teddy.The package is distributed with builds intended for usage in Node.js and separate builds intended for browser use. The Node.js builds use cheerio for DOM parsing and the browser builds use native DOM parsing instead.Note: Because the Node.js builds include cheerio as a dependency, they are much larger files. As such, you can use the Node.js builds in the browser if you want, but it is not recommended because they will result in much larger bundle sizes. Only do so if you encounter a bug that is exclusive to the browser builds.For use in Node.js:dist/teddy.cjs: CommonJS bundle: const teddy = require('teddy')dist/teddy.mjs: ES module: import teddy from 'teddy'For use in browsers:dist/teddy.client.cjs: CommonJS bundle: const teddy = require('teddy/client')dist/teddy.js: Standalone bundle that can be included via <script> tags.dist/teddy.min.js: Minified standalone bundle that can be included via <script> tags.dist/teddy.client.mjs: ES module: import teddy from 'teddy/client'dist/teddy.min.mjs: Minified ES module: import teddy from 'teddy/client/min'Once Teddy is included in your app, you can then pass source code to Teddy's render method, like so: teddy.render(sourceCode, yourModel). The render method will return a fully rendered template.To use Teddy with with Express:First require or import express and teddy.Then initialize Express and configure it to your liking.In your Express config, make sure to include this line: app.engine('html', teddy.__express).If you're interested in using Teddy with the gulp.js build system for Node apps, check out the gulp-teddy project.VariablesDisplay a variable by simply writing {varName} anywhere in the template. You can also use template literal ${templateLiteral} variables as well.Live demoModel{   \"varName\": \"hello world\" }Template{varName}RenderRendered:<p><strong>JavaScript is disabled in your browser, so you cannot run the live demo.</strong></p>All variable names are case-insensitive, both in {varName} form and when referenced in Teddy tags described below. This is to comply with the rules of HTML grammar which mandate that HTML tags and attributes be case insensitive.Variables escape HTML entities by defaultHTML entities such as <, >, &, ', and \" will be escaped by default as a safeguard against cross-site scripting.If you want to deliberately escape some text or some HTML, then wrap it in an <escape> tag like <escape><p>hello</p></escape> or an escape comment like <!--#<p>hello</p>--> which will output: &lt;p&gt;hello&lt;/p&gt; to render the code as text.Live demoModelTemplate<escape><p>hello</p></escape>RenderRendered:<p><strong>JavaScript is disabled in your browser, so you cannot run the live demo.</strong></p>If you need to suppress this escaping in certain scenarios, write your variable like this: {varName|s}.A note about inline CSS or JS via Teddy variablesIf you want to pass inline CSS or JS code to a <style> or <script> tag via a Teddy variable, you can do so like this:<style>{inlineStyles|s}</style> <script>{inlineScript|s}</script>That will work, but your code editor may complain that this is a syntax error. To avoid that, Teddy also provides a convenience tag called <inline> to let you do it like this instead:<inline css=\"inlineStyles\"></inline> <inline js=\"inlineScript\"></inline>The <inline> tag approach will work the same as the previous examples using <style> or <script> tags manually, but code editors will not consider it a syntax error.IncludesInclude another template:<include src=\"other-template.html\"></include>Or use the no extension shorthand (Teddy will append the .html extension for you):<include src=\"other-template\"></include>Pass arguments to the template:<include src=\"other-template\">   <arg firstArgument>Plain text argument</arg>   <arg secondArgument>     <span>Argument with HTML in it</span>   </arg> </include>The arguments you've defined will be accessible as {firstArgument} and {secondArgument|s} in the child template partial.html. Note you must use the |s flag to suppress escaping HTML entities in order to render the HTML in the second argument.Live demoModelTemplate<include src=\"other-template\">   <arg firstArgument>Plain text argument</arg>   <arg secondArgument>     <span>Argument with HTML in it</span>   </arg> </include>Other template<div>   <p>{firstArgument}</p>   <p>{secondArgument|s}</p> </div>RenderRendered:<p><strong>JavaScript is disabled in your browser, so you cannot run the live demo.</strong></p>ConditionalsCheck for the presence of a variable:<if something>   <p>The variable 'something' is present</p> </if> <else>   <p>The variable 'something' is not present</p> </else>Check a variable's value:<if something=\"hello\">   <p>The variable 'something' is set to 'hello'</p> </if> <else>   <p>The variable 'something' is not set to 'hello'</p> </else>Check for the non-presence of a variable:<unless something>   <p>The variable 'something' is not present</p> </unless> <else>   <p>The variable 'something' is present</p> </else>An <if> statement structure with an <elseif> tag which is evaluated if the first <if> fails:<if something>   <p>The variable 'something' is present</p> </if> <elseif somethingElse>   <p>The variable 'something' is not present, but 'somethingElse' is present</p> </elseif> <else>   <p>The variable 'something' is not present and neither is 'somethingElse'</p> </else>An <unless> statement structure with an <elseunless> tag which is evaluated if the first <unless> fails:<unless something>   <p>The variable 'something' is not present</p> </unless> <elseunless somethingElse>   <p>The variable 'something' is present, but 'somethingElse' is not present</p> </elseunless> <else>   <p>The variables 'something' and 'somethingElse' are both present</p> </else>Note: <if something> and <if something=\"\"> are considered logically equivalent statements in Teddy.Live demoModel{   \"something\": \"hello\" }Template<if something>   <p>The variable 'something' is present</p> </if> <else>   <p>The variable 'something' is not present</p> </else>RenderRendered:<p><strong>JavaScript is disabled in your browser, so you cannot run the live demo.</strong></p>Boolean logicBoolean logic operators are evaluated left to right.or operator:<if something or somethingElse>   <p>This will render if either 'something' or 'somethingElse' is present.</p> </if>and operator<if something and somethingElse>   <p>This will render if 'something' is present and 'somethingElse' is present too.</p> </if>xor operator:<if something xor somethingElse>   <p>This will render if either 'something' is present or 'somethingElse' is present, but it will not render if both are present.</p> </if> <else>   <p>This will render if 'something' is present and 'somethingElse' is present too.</p> </else>not: prefix:<if not:something>   <p>This will render if 'something' is not present.</p> </if>Note: you cannot query the same variable twice in the same if statement or use the same boolean logic operator twice in the same if statement due to the rules of HTML grammar requiring that no HTML attributes appear more than once on the same tag.Live demoModel{ \"something\": \"hello\" }Template<if something or somethingElse>   <p>This will render if either 'something' or 'somethingElse' is present.</p> </if>RenderRendered:<p><strong>JavaScript is disabled in your browser, so you cannot run the live demo.</strong></p>One-line ifsIf you need a more concise conditional to control which attributes are applied to a given element, then use this syntax:<p if-something true='class=\"shown\"' false='class=\"hidden\"'>One-line if.</p>In that structure, the attribute if-something checks to see if the variable something is truthy. This means it will check for either variable presence in the model or the boolean value true. If so, the class declared in the true attribute is written to the element, resulting in the following output:<p class=\"shown\">One-line if.</p>If not, this will check for non-presence in the model or the boolean value false. If so, the class declared in the false attribute is written to the element, resulting in the following output:<p class=\"hidden\">One-line if.</p>Like the <if> tag you can check for both the presence of a variable as well as its value. To check the value of a variable, use this syntax:<p if-something=\"hello\" true='class=\"hello\"' false='class=\"not-hello\"'>One-line if.</p>It's important to note that whichever type of quotes you use on the outside of your true or false attributes must be reversed on the inside. So if you use single quotes on the outside, then you must use double quotes on the inside.Also note you can only have one one-line if statement per element.Live demoModel{ \"something\": \"hello\" }Template<p if-something true='class=\"shown\"' false='class=\"hidden\"'>One-line if.</p>RenderRendered:<p><strong>JavaScript is disabled in your browser, so you cannot run the live demo.</strong></p>LoopsAssume the following JS model:letters = ['a', 'b', 'c'];It can be iterated over like so:<loop through=\"letters\" val=\"letter\">   <p>{letter}</p> <!-- outputs a, b, c --> </loop>In the above example through=\"letters\" defines the JS model being iterated over and val=\"letter\" defines a local variable for the current letter being iterated over.When looping over more complex data structures, sometimes you will need access to both the key and the value of your array or object. For instance, suppose this JS model:names = {jack: 'guy', jill: 'girl', hill: 'landscape'};       It can be iterated over like so:<loop through=\"names\" key=\"name\" val=\"description\">   <p>{name}</p> <!-- outputs jack, jill, hill -->   <p>{description}</p> <!-- outputs guy, girl, landscape --> </loop>We once again define a through attribute which we set to through=\"names\" and a val attribute which we set to val=\"description\" similar to the last example. However this time we've iterated over a JS object with named keys instead of a simple indexed array, so it is useful to define a key attribute in the <loop> tag to gain access to the name of the current iteration variable. We have defined it as key=\"name\" in this example.Even complex, hierarchical data structures can be iterated over. For instance, suppose this JS model:objects = [{a:1, b:2, c:3}, {a:4, b:5, c:6}, {a:7, b:8, c:9}];       For the above array of objects, we can combine the techniques illustrated above to display each member of the hierarchy in sequence:<loop through=\"objects\" key=\"i\" val=\"item\">   <p>{i}</p> <!-- outputs 0, 1, 2 -->   <p>{item.a}</p> <!-- outputs 1, 4, 7 -->   <p>{item.b}</p> <!-- outputs 2, 5, 8 -->   <p>{item.c}</p> <!-- outputs 3, 6, 9 --> </loop>Live demoModel{   \"letters\": [     \"a\",     \"b\",     \"c\"   ] }Template<loop through=\"letters\" val=\"letter\">   <p>{letter}</p> </loop>RenderRendered:<p><strong>JavaScript is disabled in your browser, so you cannot run the live demo.</strong></p>Selecting option elements, checkboxes, or radio buttonsYou could use a one-line if to select <option> elements inside of <select> fields, or to select checkboxes / radio buttons like this:<select>   <option value=\"a\" if-foo=\"a\" true=\"selected\">A</option>   <option value=\"b\" if-foo=\"b\" true=\"selected\">B</option>   <option value=\"c\" if-foo=\"c\" true=\"selected\">C</option> </select>However that is tedious.Teddy also provides a convenience attribute selected-value to automate this process so you can write it like this:<select selected-value=\"b\">   <option value=\"a\">A</option>   <option value=\"b\">B</option> <!-- this will be selected -->   <option value=\"c\">C</option> </select>This also works with checkboxes and radio buttons using checked-value:<div checked-value=\"b\">   <input type=\"checkbox\" name=\"letters\" value=\"a\">   <input type=\"checkbox\" name=\"letters\" value=\"b\"> <!-- this will be selected -->   <input type=\"checkbox\" name=\"letters\" value=\"c\"> </div>  <div checked-value=\"b\">   <input type=\"radio\" name=\"letters\" value=\"a\">   <input type=\"radio\" name=\"letters\" value=\"b\"> <!-- this will be selected -->   <input type=\"radio\" name=\"letters\" value=\"c\"> </div>  <div checked-value=\"b\" checked-value=\"{check-this-value}\"> <!-- you can also supply values -->   <input type=\"checkbox\" name=\"letters\" value=\"a\">   <input type=\"checkbox\" name=\"letters\" value=\"b\"> <!-- this will be selected -->   <input type=\"checkbox\" name=\"letters\" value=\"c\"> <!-- this will be selected --> </div>Live demoModel{   \"check-this-value\": \"c\" }Template<div checked-value=\"b\">   <input type=\"checkbox\" name=\"letters\" value=\"a\">   <input type=\"checkbox\" name=\"letters\" value=\"b\"> <!-- this will be selected -->   <input type=\"checkbox\" name=\"letters\" value=\"c\"> </div>  <div checked-value=\"b\">   <input type=\"radio\" name=\"letters\" value=\"a\">   <input type=\"radio\" name=\"letters\" value=\"b\"> <!-- this will be selected -->   <input type=\"radio\" name=\"letters\" value=\"c\"> </div>  <div checked-value=\"b\" checked-value=\"{check-this-value}\"> <!-- you can also supply values -->   <input type=\"checkbox\" name=\"letters\" value=\"a\">   <input type=\"checkbox\" name=\"letters\" value=\"b\"> <!-- this will be selected -->   <input type=\"checkbox\" name=\"letters\" value=\"c\"> <!-- this will be selected --> </div>RenderRendered:<p><strong>JavaScript is disabled in your browser, so you cannot run the live demo.</strong></p>Non-parsed blocksTo skip teddy parsing a block of code, use a <noteddy> or <noparse> tag:<p><noteddy>{this_var_will_not_be_parsed}</noteddy></p>You can also instruct the contents of a variable to not be parsed after that variable is rendered using the |p flag:<p>{this_var_will_be_parsed_but_its_contents_will_not_be|p}</p>Note: Teddy tags will also not be parsed if they appear inside of elements that interpret child text as plain text, e.g. <style>, <script>, <textarea>, etc. Teddy will also not parse anything in a <pre> tag unless you add a parse attribute to the <pre> tag like <pre parse>.Caching blocksYou can use a <cache> element to prevent Teddy from having to continuously re-render blocks of template code that frequently resolve to the same markup in order to improve template parsing performance.Here's an example:<p>Dynamic: Welcome {user}!</p> <cache name=\"weather\" key=\"city\" maxCaches=\"3\">   <p>Cached: High temperature today in {city} is {value}.</p> </cache>In the above example, assume that there are a large number of values that {user} could resolve to, but there are a limited number of values that {city} and {value} could resolve to. In that case, we can cache the block of code that doesn't need re-rendering as often by enclosing it in a <cache> element to improve the performance of template parsing while still allowing other parts of the template to be parsed dynamically at each render.Here's what the attributes mean:name: What you want to name your cache. The name is necessary so you can manually clear the cache from JavaScript later if you like via teddy.clearCache():teddy.clearCache(name) will delete the whole cache at that name, e.g. all values for {city}.teddy.clearCache(name, keyVal) will delete just the value at that keyVal, e.g. just the cache for when {city} resolves to \"NY\" if you set keyVal to \"NY\".key: The model value to use to index new caches.Example: Suppose city in the above example could resolve to three possible values: \"NY\", \"SF\", and \"LA\". In that case, the caching feature will create 3 caches using the city key: one for each of the three possible values.maxAge: How old the cache can be in milliseconds before it is invalidated and will be re-rendered. Default: 0 (no limit).maxCaches: The maximum number of caches that Teddy will be allowed to create for a given <cache> element. If the maximum is reached, Teddy will remove the oldest cache in the stack, where oldest is defined as the least recently created or accessed. Default: 1000."})